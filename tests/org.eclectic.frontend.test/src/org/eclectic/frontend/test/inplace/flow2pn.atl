-- @path FD=/genericity.benchmarks/components/flowdiagrams/metamodels/flow_concept.ecore
-- @path PN=/genericity.benchmarks/components/flowdiagrams/metamodels/petri_nets.ecore

module flow2pn;
create OUT : PN from IN : FD;

helper context FD!Node def: typeName             : String  = self.oclType().name; 
helper context FD!Node def: isTask               : Boolean = self.oclIsKindOf(FD!Task);
helper context FD!Node def: isFinalTask          : Boolean = self.oclIsKindOf(FD!FinalTask);
helper context FD!Node def: isTerminatingTask    : Boolean = if self.isFinalTask then self.oclAsType(FD!FinalTask).isTerminating else false endif;
helper context FD!Node def: isParallelSplit      : Boolean = self.oclIsKindOf(FD!ParallelSplit);
helper context FD!Node def: isSynchronization    : Boolean = self.oclIsKindOf(FD!Synchronization);
helper context FD!Node def: isExclusiveChoice    : Boolean = self.oclIsKindOf(FD!ExclusiveChoice);
helper context FD!Node def: isSimpleMerge        : Boolean = self.oclIsKindOf(FD!SimpleMerge);
helper context FD!Node def: isMultiChoice        : Boolean = self.oclIsKindOf(FD!MultiChoice);
helper context FD!Node def: toPlaceAsInput       : Boolean = self.isTask or self.isFinalTask or self.isExclusiveChoice or self.isSimpleMerge or self.isMultiChoice;
helper context FD!Node def: toPlaceAsOutput      : Boolean = self.isTask or self.isFinalTask or self.isExclusiveChoice;
helper context FD!Node def: toTransitionAsInput  : Boolean = self.isSynchronization or self.isParallelSplit;
helper context FD!Node def: toTransitionAsOutput : Boolean = self.isSynchronization or self.isParallelSplit or self.isSimpleMerge or self.isMultiChoice;

helper context FD!Node def: parentFlowDiagram    : FD!FlowDiagram  = FD!FlowDiagram.allInstances()->first(); 
helper context FD!FlowEdge def: parentFlowDiagram    : FD!FlowDiagram  = FD!FlowDiagram.allInstances()->first(); 

helper context Integer def: pow (m:Integer) : Integer = if (m>1) then self*self.pow(m-1) else self endif; -- n^m
helper context Integer def: toSequence ()   : Sequence(Integer) = if self<=0 then Sequence{} else Sequence{self}.union((self-1).toSequence()) endif; -- Sequence{1, 2..., n}
helper context Integer def: choices () : Sequence(Sequence(Boolean)) = 
	if self>1 then 
	    (self-1).choices()->collect(n | n->append(true)) ->union(
		(self-1).choices()->collect(n | n->append(false)))
	else
		Sequence{Sequence{true},Sequence{false}}
    endif;

helper context FD!MultiChoice def: nodeGenerator : Sequence(TupleType(source : FD!Node, num : Integer)) =
	(2.pow(self.outs->size())-1).toSequence()->iterate(n; result: Sequence(TupleType(source : FD!Node, num : Integer)) = Sequence { } |
		let tuple : OclAny = Tuple { source : FD!Node = self, num : Integer = n } in	
			result.including(tuple)		
	);

rule create_transition(source : FD!Node, num : Integer) {
	using { choices  : Sequence(Boolean) = source.outs->size().choices()->at(num); 
	        icontrol : Sequence(OclAny)  = source.parentFlowDiagram.control; 
            ocontrol : Sequence(OclAny)  = if source.isConnectedToTerminating then Sequence{} else icontrol endif; }
 	to  transition : PN!Transition (
 		name <- source.typeName + ' ' + num,
		in   <- icontrol.append (source),
        out  <- source.outs->size().toSequence()->iterate (i; result:Sequence(FD!Node)=Sequence{} | 
		            if choices->at(i)=true then
		                result->append( 
		       	         if source.outs->at(i).out.toPlaceAsInput
				         then source.outs.at(i).out
				         else source.outs.at(i)
				         endif
		       	         )
		            else
		              result
		            endif
			         ) 
		        .append( ocontrol )				
 	) do {
 		-- This is important, it is the result value...
 		transition;
 	}
}

-- if the diagram contains terminating final tasks, we add a place 'Control' connected to all transitions in the net as follows:
--   1) with an arc, if the transition is connected to a terminating final task
--   2) with a loop, if the transition is not connected to a terminating final task

helper context FD!FlowEdge    def: isConnectedToTerminating : Boolean = self.out.isTerminatingTask;
helper context FD!Node        def: isConnectedToTerminating : Boolean = self.outs->exists(e | e.isConnectedToTerminating);
helper context FD!FlowDiagram def: control : Sequence(PN!Place) = 
	if self.nodes->exists(n | n.isTerminatingTask) 
	then Sequence{ thisModule.get_control(self) }
	else Sequence{} endif;

unique lazy rule get_control {
	from flow : FD!FlowDiagram
	to  place : PN!Place (      
		name <- 'Control',
		tokens <- 1
		)
}
	
-- BUILDING BLOCKS ---------------------------------------------------------------------------------------------

-- the flow diagram is transformed into a Petri net 
rule flowdiagram {
	from flow : FD!FlowDiagram 
	to   net  : PN!PetriNet (
		elems <- flow.nodes.append(
			     flow.edges.append(
				 flow.nodes->select(n | n.isSimpleMerge)->collect(n | thisModule.create_transition(n, 1) ))).union( 
				 flow.nodes->select(n | n.isMultiChoice)->collect(n | n.nodeGenerator)->flatten()->collect(n | thisModule.create_transition(n.source, n.num) )).append(
				 flow.control)->flatten()	
	)
}

-- each task is transformed into a place, with 1 token if it is initial
rule task { 
	from task  : FD!Task 
 	to   place : PN!Place (
		name   <- if task.isInitial then 'Initial' else task.name endif,
		tokens <- if task.isInitial then 1 else 0 endif
 	    )
}

-- each final task is transformed into a place
rule finaltask { 
	from task  : FD!FinalTask 
 	to   place : PN!Place (
		--name   <- if task.isTerminating then 'Final Terminating' else 'Final' endif,
		name <- 'Final' + 
		        (if task.isTerminating then ' Terminating' else '' endif) +
				(if task.isMandatory   then ' Mandatory'   else '' endif) ,
		tokens <- 0
 	    )
}

-- each parallel split  (i.e. fork) is transformed into a transition
-- each synchronization (i.e. join) is transformed into a transition
rule synchronization_all {
	from synch       : FD!Node (synch.isParallelSplit or synch.isSynchronization)
	using { icontrol : Sequence(OclAny) = synch.parentFlowDiagram.control; 
            ocontrol : Sequence(OclAny) = if synch.isConnectedToTerminating then Sequence{} else icontrol endif; }
    to   transition  : PN!Transition (
		name <- synch.typeName,		
		in   <- synch.ins->select(e | e.in.toPlaceAsOutput)->collect(e | e.in) -- connect to input places
                ->union( synch.ins->select(e | e.in.toTransitionAsOutput) )    -- connect to input transitions
				.append( icontrol ),                                           -- connect to control place   				
		out  <- synch.outs->select(e | e.out.toPlaceAsInput)->collect(e | e.out)  
		        ->union( synch.outs->select(e | e.out.toTransitionAsInput) )
				.append( ocontrol )
		) 		
}

-- each exclusive choice is transformed into a place
rule exclusive_choice {
	from choice : FD!ExclusiveChoice
	to   place  : PN!Place (
		name   <- choice.typeName,
		tokens <- 0
		)
}

-- each simple merge is transformed into a place connected to a transition;
-- the transition is created by rule create_transition, invoked from rule flow_diagram
rule simple_merge {
	from merge : FD!SimpleMerge
	to 	 place : PN!Place (
		name <- merge.typeName,
		tokens <- 0
	)
}

-- each multi choice is transformed into a place connected to (2^n)-1 transitions;
-- the transitions are created by rule create_transition, invoked from rule flow_diagram
rule multi_choice {
	from choice : FD!MultiChoice
	to 	 place  : PN!Place (
		name <- choice.typeName,
		tokens <- 0
	)
}

-- INTERCONNECTIONS --------------------------------------------------------------------------------------------

-- flow edges connecting nodes that are transformed into places, 
-- are transformed into transitions
rule place_place {
	from edge        : FD!FlowEdge ( edge.in.toPlaceAsOutput and edge.out.toPlaceAsInput )
	using { icontrol : Sequence(OclAny) = edge.parentFlowDiagram.control; 
            ocontrol : Sequence(OclAny) = if edge.isConnectedToTerminating then Sequence{} else icontrol endif; }
	to   transition  : PN!Transition (
	    in  <- icontrol.append (edge.in),
		out <- ocontrol.append (edge.out)
		)
}

-- flow edges connecting nodes that are transformed into transitions, 
-- are transformed into places
rule transition_transition {
	from edge  : FD!FlowEdge ( edge.in.toTransitionAsOutput and edge.out.toTransitionAsInput ) -- should we differentiate transitionAsOutput when SimpleMerge???
	to   place : PN!Place (
		name   <- edge.in.typeName + '-' + edge.out.typeName,
		tokens <- 0
		)
}
