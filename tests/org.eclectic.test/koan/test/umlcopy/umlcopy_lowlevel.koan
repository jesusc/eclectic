koan umlcopy(in) -> (out)

trace rt 
  link class2class 
	var s :  in!Class 
	var t : out!Class 
  end

  link attr2attr 
	var s :  in!Attribute 
	var t : out!Attribute 
  end

end 

// There is advantage in letting the pattern
// call the rule: the same patterns could call several
// rules, as an optimization
single queue qClass : in!Class
single queue qPair  : (in!Class, in!Class)

// in!Class is treated as a queue
// it could be declared as
//    metaclass queue inClass : in!Class
// and used
//    forall c1 in inClass

// Another type are polymorphic queues redirects its elements
// only to one of the sinks that are waiting,
// according to the dynamic type of the enqueued object.

pattern findClasses 
	forall c1 in in!Class
		emit c1 to qClass
		forall c2 : in!Class
			emit (c1, c2) to qPair
		end
	end
end

rule class2class 
  forall c1 in qClass 
  // it is inconditional, in the sense that the rule is triggered whenever a new element
  // is created

  // forRequest 		
  // I don't really need forRequest, because I could intercept the queue with the
  // requests, which would be an implicit queue, the only issue is how to know
  // which is the thing being matched
  // 
  // Now match trace can be generalised to "match"
  // match qPair with [ _1 = someObj ]
	
  put rt!class2class with [ s = sclass, t = tclass ] 
	
end 

// pattern rule communication could be another queue

// This is an optimization
rule class2class
  forAll sclass : in!Class
  
  tclass = out!Class.new
  x = 1
  y = 3
  // z = sclass.name  
  z = sclass.nameWithError
  
  put rt!class2class with [ s = sclass, t = tclass ] 
            
  // tclass.features = (match rt!attr2attr with [ s = sclass.features ])
  
  
  /*
  result = (match rt!attr2attr with [ s = sclass.features ])
  closure = { |trace_| 
  	trace_.t 
  }
  mapped = result.map(closure)  
  tclass.features = mapped
  */
	
  tclass.features = (match rt!attr2attr with [ s = sclass.features ]).map({ |trace_| trace_.t })
            
//  tclass.features = [rt::attr2attr | s = sclass.features ].map({ trace | trace.t; })
//  tclass.name = sclass.name
end

rule attr2attr
  forAll sattr : in!Attribute

  attr = out!Attribute.new
  attr.name = sattr.name  
  
  put rt!attr2attr with [ s = sattr, t = attr ]
  
  attr.owner = (match rt!class2class with [ s = sattr.owner ]).t 
end

