/*
 * generated by Xtext
 */
package org.eclectic.frontend.scoping;

import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

import org.eclectic.frontend.core.ClassUse;
import org.eclectic.frontend.core.ClosureDeclaration;
import org.eclectic.frontend.core.DefineVariable;
import org.eclectic.frontend.core.MethodCall;
import org.eclectic.frontend.core.ModelReference;
import org.eclectic.frontend.core.PropertyWrite;
import org.eclectic.frontend.core.RepresentModel;
import org.eclectic.frontend.core.Statement;
import org.eclectic.frontend.core.Variable;
import org.eclectic.frontend.qool.EmitStatement;
import org.eclectic.frontend.qool.ForAllStatement;
import org.eclectic.frontend.qool.InvokeExternal;
import org.eclectic.frontend.qool.MatchExpression;
import org.eclectic.frontend.qool.PropertyEqualsPredicate;
import org.eclectic.frontend.qool.QoolFactory;
import org.eclectic.frontend.qool.QoolTransformation;
import org.eclectic.frontend.qool.Segment;
import org.eclectic.frontend.qool.facilities.Copier;
import org.eclectic.frontend.qool.facilities.CopierCallbackDefinition;
import org.eclectic.frontend.qool.impl.QoolFactoryImpl;
import org.eclectic.frontend.syntax.scoping.ExpressionsScopeProvider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.scoping.IScope;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class QoolScopeProvider extends ExpressionsScopeProvider {
	
	@Override
	public IScope getScope(EObject context, EReference reference) {
		if ( context instanceof ClassUse ) {
			return new ModelScope( (QoolTransformation) EcoreUtil.getRootContainer(context) );
		}
		// System.out.println("==> " + context + " " + reference);
		// TODO Auto-generated method stub
		return super.getScope(context, reference);
		
	}
	
	protected List<Statement> getStatements(EObject container) {
		if ( container instanceof ForAllStatement ) {
			return ((ForAllStatement) container).getStatements();
		} else if ( container instanceof Segment ) {
			return ((Segment) container).getStatements();
		} else if ( container instanceof QoolTransformation ) {
			return Collections.emptyList();
		} else if ( container instanceof ClosureDeclaration ) {
			return ((ClosureDeclaration) container).getStatements();			
		// Not sure the code below is meaningful...
		} else if ( container instanceof EmitStatement ) {
			LinkedList<Statement> l = new LinkedList<Statement>();
			l.add( ((EmitStatement) container).getValue() );
			return l;
		} else if ( container instanceof DefineVariable ) {
			LinkedList<Statement> l = new LinkedList<Statement>();
			l.add( ((DefineVariable) container).getExpression() );
			return l;			
		} else if ( container instanceof PropertyWrite ) {
			LinkedList<Statement> l = new LinkedList<Statement>();
			l.add( ((PropertyWrite) container).getExpression() );
			return l;			
		} else if ( container instanceof MethodCall ) {
			LinkedList<Statement> l = new LinkedList<Statement>();
			l.addAll( ((MethodCall) container).getParameters() );
			return l;						
		} else if ( container instanceof PropertyEqualsPredicate ) {
			LinkedList<Statement> l = new LinkedList<Statement>();
			l.add( ((PropertyEqualsPredicate) container).getValue() );
			return l;									
		} else if ( container instanceof MatchExpression ) {
			return Collections.emptyList();
		} else if ( container instanceof InvokeExternal ) {
			LinkedList<Statement> l = new LinkedList<Statement>();
			l.addAll( ((InvokeExternal) container).getEntryPointParameters() );
			return l;												
		} else if ( container instanceof Copier ) {
			Copier c = (Copier) container;
			LinkedList<Statement> l = new LinkedList<Statement>();
			l.addAll( c.getObjects() );
			return l;
		} else if ( container instanceof CopierCallbackDefinition ) {
			CopierCallbackDefinition d = (CopierCallbackDefinition) container;
			LinkedList<Statement> l = new LinkedList<Statement>();
			l.add( d.getAction() );
			l.add( d.getTrigger() );
			return l;
		}

		
		
		System.err.println("QoolScopeProvider.getStatements does not support " + container.eClass().getName());
		throw new IllegalArgumentException();
	}

	protected List<Variable> getDeclaredVariables(EObject container) {
		if ( container instanceof ForAllStatement ) {
			return singleVariableList((Variable) container);
		} else if ( container instanceof Segment ) {
			return Collections.emptyList();
		} else if ( container instanceof QoolTransformation ) {
			return Collections.emptyList();
		} else if ( container instanceof ClosureDeclaration ) {
			LinkedList<Variable> l = new LinkedList<Variable>();
			l.addAll(((ClosureDeclaration) container).getFormalParameters());
			return l;			
		// Not sure the code below is meaningful...
		} else if ( container instanceof EmitStatement ) {
			return Collections.emptyList();
		} else if ( container instanceof DefineVariable ) {
			return Collections.emptyList();
		} else if ( container instanceof PropertyWrite ) {
			return Collections.emptyList();
		} else if ( container instanceof MethodCall ) {
			return Collections.emptyList();
		} else if ( container instanceof PropertyEqualsPredicate ) {
			return Collections.emptyList();
		} else if ( container instanceof MatchExpression ) {
			return Collections.emptyList();
		} else if ( container instanceof InvokeExternal ) {
			return Collections.emptyList();
		} else if ( container instanceof Copier ) {
			return Collections.emptyList();
		} else if ( container instanceof CopierCallbackDefinition ) {
			return Collections.emptyList();
		}


		System.err.println("QoolScopeProvider.getDeclaredVaribles does not support " + container.eClass().getName());
		throw new IllegalArgumentException();
	}

	private final List<Variable> singleVariableList(Variable v) {
		LinkedList<Variable> l = new LinkedList<Variable>();
		l.add(v);
		return l;
	}
}
