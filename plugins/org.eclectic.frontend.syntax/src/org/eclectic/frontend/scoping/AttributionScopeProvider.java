/*
 * generated by Xtext
 */
package org.eclectic.frontend.scoping;

import java.util.Collection;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

import org.eclectic.frontend.attribution.AttributeInit;
import org.eclectic.frontend.attribution.AttributeUse;
import org.eclectic.frontend.attribution.AttributionFactory;
import org.eclectic.frontend.attribution.AttributionRule;
import org.eclectic.frontend.attribution.AttributionTransformation;
import org.eclectic.frontend.attribution.RuleSelf;
import org.eclectic.frontend.core.ClassUse;
import org.eclectic.frontend.core.ClosureDeclaration;
import org.eclectic.frontend.core.DefineVariable;
import org.eclectic.frontend.core.MethodCall;
import org.eclectic.frontend.core.PropertyWrite;
import org.eclectic.frontend.core.ResolveLink;
import org.eclectic.frontend.core.Statement;
import org.eclectic.frontend.core.TransformationDefinition;
import org.eclectic.frontend.core.Variable;
import org.eclectic.frontend.syntax.scoping.ExpressionsScopeProvider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.scoping.IScope;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class AttributionScopeProvider extends ExpressionsScopeProvider {
	public IScope scope_ResolveLink_module(ResolveLink this_, EReference ref) {
		return new UseDeclarationScope(this_);
	}

	@Override
	public IScope getScope(EObject context, EReference reference) {
		if ( context instanceof ClassUse ) {
			return new ModelScope( (TransformationDefinition) EcoreUtil.getRootContainer(context) );
		}
		// System.out.println("==> " + context + " " + reference);
		// TODO Auto-generated method stub
		return super.getScope(context, reference);
		
	}
	
	protected List<Statement> getStatements(EObject container) {
		if ( container instanceof AttributeInit ) {
			return Collections.emptyList();		
		} else if ( container instanceof AttributionRule ) {
			return ((AttributionRule) container).getStatements();
		} else if ( container instanceof AttributionTransformation ) {
			return Collections.emptyList();
		} else if ( container instanceof AttributeUse ) {
			return Collections.emptyList();
		
		// COMMON TO EXPRESSION LANGUAGES!!
		} else if ( container instanceof ClosureDeclaration ) {
			return ((ClosureDeclaration) container).getStatements();			
		// Not sure the code below is meaningTful...
		} else if ( container instanceof DefineVariable ) {
			LinkedList<Statement> l = new LinkedList<Statement>();
			l.add( ((DefineVariable) container).getExpression() );
			return l;			
		} else if ( container instanceof PropertyWrite ) {
			LinkedList<Statement> l = new LinkedList<Statement>();
			l.add( ((PropertyWrite) container).getExpression() );
			return l;			
		} else if ( container instanceof MethodCall ) {
			LinkedList<Statement> l = new LinkedList<Statement>();
			l.addAll( ((MethodCall) container).getParameters() );
			return l;						
		} else if ( container instanceof ResolveLink ) {
			LinkedList<Statement> l = new LinkedList<Statement>();
			return l;						
		} 

		System.err.println("AttributionScopeProvider.getStatements does not support " + container.eClass().getName());
		throw new IllegalArgumentException();
	}


	private Variable createSelfVariable(AttributionRule rule) {
		if ( rule.getSelf() == null ) {
			RuleSelf s = AttributionFactory.eINSTANCE.createRuleSelf();
			s.setName("self");		
			rule.setSelf(s);
		}
		return rule.getSelf();
	}

	
	protected List<Variable> getDeclaredVariables(EObject container) {
		
		if ( container instanceof AttributeInit ) {
			return Collections.emptyList();
		} else if ( container instanceof AttributionRule ) {
			LinkedList<Variable> l = new LinkedList<Variable>();
			l.add( createSelfVariable((AttributionRule)container) );
			return l;			
		} else if ( container instanceof AttributionTransformation ) {			
			LinkedList<Variable> l = new LinkedList<Variable>();
			l.addAll(((AttributionTransformation) container).getAttributes());
			return l;			
		} else if ( container instanceof AttributeUse ) {
			return Collections.emptyList();

		// COMMON TO EXPRESSION LANGUAGES!! 
		} else if ( container instanceof ClosureDeclaration ) {
			LinkedList<Variable> l = new LinkedList<Variable>();
			l.addAll(((ClosureDeclaration) container).getFormalParameters());
			return l;			
		} else if ( container instanceof DefineVariable ) {
			return Collections.emptyList();
		} else if ( container instanceof PropertyWrite ) {
			return Collections.emptyList();
		} else if ( container instanceof MethodCall ) {
			return Collections.emptyList();
		} else if ( container instanceof ResolveLink ) {
			return Collections.emptyList();
		}


		System.err.println("AttributionScopeProvider.getDeclaraedVaribles does not support " + container.eClass().getName());
		throw new IllegalArgumentException();
	}

	private final List<Variable> singleVariableList(Variable v) {
		LinkedList<Variable> l = new LinkedList<Variable>();
		l.add(v);
		return l;
	}

}
