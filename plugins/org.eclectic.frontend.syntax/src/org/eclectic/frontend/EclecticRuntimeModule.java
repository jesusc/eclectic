/*
 * generated by Xtext
 */
package org.eclectic.frontend;

import org.eclectic.frontend.imperative.MethodDefinition;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.linking.lazy.LazyLinker;
import org.eclipse.xtext.parsetree.reconstr.ITransientValueService;
import org.eclipse.xtext.parsetree.reconstr.impl.DefaultTransientValueService;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
public class EclecticRuntimeModule extends org.eclectic.frontend.AbstractEclecticRuntimeModule {

	
	/**
	 * Redefined to return a new type of parser which is able of tracking line numbers
	 * and nodes.
	 */
	@Override 
	public Class<? extends org.eclipse.xtext.parser.IParser> bindIParser() {		
		return org.eclectic.frontend.EclecticParserTrackingLines.class;
	}
	
	public Class<? extends ITransientValueService> bindITransientValueService() {
		return EclecticTransientValueService.class;
	}

	@Override
	public Class<? extends IValueConverterService> bindIValueConverterService() {
		return org.eclectic.frontend.syntax.valueconverter.EclecticValueConverter.class;
	}

	
	public static class EclecticTransientValueService extends DefaultTransientValueService {
		public boolean isTransient(EObject owner, EStructuralFeature feature, int index) {
			if ( owner instanceof MethodDefinition && feature.getName().equals("self") ) {
				return true;
			}
			return super.isTransient(owner, feature, index);
		}

	}
	
}
