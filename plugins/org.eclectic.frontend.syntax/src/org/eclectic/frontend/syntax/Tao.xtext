
// automatically generated by Xtext
grammar org.eclectic.frontend.Tao // with org.eclectic.frontend.syntax.Expressions 
	// with org.eclipse.xtext.common.Terminals 
    with org.eclectic.frontend.syntax.Expressions

import "platform:/resource/org.eclectic.frontend.asm/model/eclectic.frontend.ecore" 

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

import "platform:/resource/org.eclectic.frontend.asm/model/eclectic.frontend.ecore#//core" as core

import "platform:/resource/org.eclectic.frontend.asm/model/eclectic.frontend.ecore#//tao" as tao

//import "platform:/resource/modelum.eclectic.compiler/model/family/eclectic.frontend.ecore#//frontend" as frontend

TaoTransformation returns tao::TaoTransformation:
	'tao'
	name=EString
	// '(' left=[core::TransformationDefinitionParameter|EString] ')'
	//'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
	'(' (inModels+=TransformationDefinitionParameter) ("," inModels+=TransformationDefinitionParameter)* ')'
	'->'
	'(' outModels+=TransformationDefinitionParameter ("," outModels+=TransformationDefinitionParameter)* ')'

	(uses+=UsesStatements)*

	( templates+=Template)+
    ;

// @common

UsesStatements returns core::UseDeclaration: 
	UseDeclaration // TODO: Allow several declarations together
;

UseDeclaration returns core::UseDeclaration: 
	"uses" module=EString ("as" ^as=EString)?
;

TransformationDefinitionParameter returns core::TransformationDefinitionParameter:
	{core::TransformationDefinitionParameter}
	name=EString
	;
	
ClassUse returns core::ClassUse :
	model=[core::RepresentModel] "!" className=ID	
;

// Using Expressions as superlanguage makes that [a] does not work because of conflicts
	
// end-of-common

Template returns tao::Template: 
	"template" name=ID "(" parameters+=TemplateParameter ( "," parameters+=TemplateParameter)* ")"
	(roots += TemplateRootObject)
	"end"
;

TemplateParameter returns tao::TemplateParameter: 
	name=ID ":" type=ClassUse
;


// To avoid conflicts, because Statement is not actually used
Statement returns core::Statement: 
	DefineVariable
;

// redefine
Expression returns core::Expression:
	WithResolveMethodCall
;


TemplateRootObject returns tao::TemplateRootObject: 
// 	ObjectInstantiation
//  Duplicated!
	(name=ID ":")? type=ClassUse "{"
		(assigments+=Assignment)*
	"}"
;

ObjectInstantiation returns tao::ObjectInstantiation: 
	(name=ID ":")? type=ClassUse "{"
		(assigments+=Assignment)*
	"}"
;

Assignment returns tao::Assignment: 
	AttributeAssigment
	| ObjectSyntax
	| Invocation
;

AttributeAssigment returns tao::AttributeAssigment: 
	targetFeature=ID "=" expr=SourceExpression	
;

SourceExpression returns tao::SourceExpression: 
	WithOptionalVariableExpression 
//	| NormalExpression 
; 

WithOptionalVariableExpression returns tao::WithOptionalVariableExpression: 
	(variable=ObjectSourceVariable ":")? expr=Expression // receptor=[core::Variable] "." sourceFeature=ID
;

ObjectSourceVariable returns tao::ObjectSourceVariable: 
	name=ID 
;


ObjectSyntax returns tao::ObjectSyntax: 
	targetFeature=ID "=" ("from" expr=SourceExpression (multivalued?="*")?  "to")? object=ObjectInstantiation		
;

Invocation returns tao::Invocation: 
	targetFeature=ID "=" template=[tao::Template] "(" expr=SourceExpression (multivalued?="*")?  ")"
;


// Not sure if this has be factorized somewhere...
EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	'-'? INT;
