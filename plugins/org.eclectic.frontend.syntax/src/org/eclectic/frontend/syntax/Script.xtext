// automatically generated by Xtext
grammar org.eclectic.frontend.Script with org.eclectic.frontend.syntax.Expressions

import "platform:/resource/org.eclectic.frontend.asm/model/eclectic.frontend.ecore" 

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

import "platform:/resource/org.eclectic.frontend.asm/model/eclectic.frontend.ecore#//core" as core

import "platform:/resource/org.eclectic.frontend.asm/model/eclectic.frontend.ecore#//script" as script

//import "platform:/resource/modelum.eclectic.compiler/model/family/eclectic.frontend.ecore#//frontend" as frontend

ScriptedTransformation returns script::ScriptedTransformation:
	'script'
	name=EString
	// '(' left=[core::TransformationDefinitionParameter|EString] ')'
	//'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
	'(' (inModels+=TransformationDefinitionParameter) ')'
	'->'
	'(' outModels+=TransformationDefinitionParameter ')'

	// like this to resolve a reference: it is not the case
	//'(' right=[core::TransformationDefinitionParameter|EString] ')'
		// ('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		//('inModels' '{' inModels+=TransformationDefinitionParameter ( "," inModels+=TransformationDefinitionParameter)* '}' )?
		// ('outModels' '{' outModels+=TransformationDefinitionParameter ( "," outModels+=TransformationDefinitionParameter)* '}' )?

	// (traceInterface = TraceInterface)?	
	(statements += Statement)+	
    ;

// @common
TransformationDefinitionParameter returns core::TransformationDefinitionParameter:
	{core::TransformationDefinitionParameter}
	name=EString
	;
    