// automatically generated by Xtext
grammar org.eclectic.frontend.Attribution with org.eclectic.frontend.syntax.Expressions

import "platform:/resource/org.eclectic.frontend.asm/model/eclectic.frontend.ecore" 

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

import "platform:/resource/org.eclectic.frontend.asm/model/eclectic.frontend.ecore#//core" as core

import "platform:/resource/org.eclectic.frontend.asm/model/eclectic.frontend.ecore#//attribution" as attr

//import "platform:/resource/modelum.eclectic.compiler/model/family/eclectic.frontend.ecore#//frontend" as frontend

AttributionTransformation returns attr::AttributionTransformation:
	'attribution'
	name=EString
	// '(' left=[core::TransformationDefinitionParameter|EString] ')'
	//'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
	'(' inModels+=TransformationDefinitionParameter ("," inModels+=TransformationDefinitionParameter)* ')'
	'->'
	'(' outModels+=TransformationDefinitionParameter? ("," inModels+=TransformationDefinitionParameter)* ')'
	(annotations+=Annotation)*
	// like this to resolve a reference: it is not the case
	//'(' right=[core::TransformationDefinitionParameter|EString] ')'
		// ('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		//('inModels' '{' inModels+=TransformationDefinitionParameter ( "," inModels+=TransformationDefinitionParameter)* '}' )?
		// ('outModels' '{' outModels+=TransformationDefinitionParameter ( "," outModels+=TransformationDefinitionParameter)* '}' )?
	// (traceInterface = TraceInterface)
	(uses+=UsesStatements)*
	(attributes += AttributeDcl)*	
	(rules += AttributionRule)+
	"end"
    ;

// @common
Annotation returns core::Annotation:
	MetamodelModelAnnotation
;

MetamodelModelAnnotation returns core::MetamodelModelAnnotation:
	annotatedElement=[core::RepresentModel] ":" metamodel=STRING
;

TransformationDefinitionParameter returns core::TransformationDefinitionParameter:
	{core::TransformationDefinitionParameter}
	name=EString
	;

ClassUse returns core::ClassUse :
	model=[core::RepresentModel] "!" className=ID	
;

UsesStatements returns core::UseDeclaration: 
	UseDeclaration // TODO: Allow several declarations together
;

UseDeclaration returns core::UseDeclaration: 
	"uses" module=EString ("as" ^as=EString)?
;
// End of @common


AttributeDcl returns attr::AttributeDcl :
	InheritedAttributeDcl
	| SynthesizedAttributeDcl
;

InheritedAttributeDcl returns attr::InheritedAttributeDcl: 
	"inh" name=ID ":" type_=ClassUse
;

SynthesizedAttributeDcl returns attr::SynthesizedAttributeDcl: 
	"syn" name=ID ":"  type_=ClassUse
;

AttributionRule returns attr::AttributionRule: 
	"rule" type=ClassUse
		(statements+=Statement)+
//		("properties:"
//		(statements+=PropertyWrite)+)? // It does not recognize property writes as parts of statements!
	"end"
;


// redefine
Statement returns core::Statement: 
	DefineVariable
	// | Expression // This is to avoid conflicts, but I don't think standalone expressions are really needed here
	| AttributeInit
	| PropertyWrite
	//| SynthesizedInit
;

ClosureStatement returns core::Statement: 
	DefineVariable
	// | Expression 
	| PropertyWrite
	| VariableReference 
	| AttributeInit	// Let's see if this compile and works...
	
	// TODO: Allow normal expressions in closures... conflict currently
;

// Redefined
ClosureDeclaration returns core::ClosureDeclaration: 
	"{" ("|" formalParameters+=ClosureParameter ( "," formalParameters+=ClosureParameter)* "|")?
	   (statements += ClosureStatement)+ "}"
;


// redefine
PrimaryExpression returns core::Expression: 
	  Literal
	| VariableReference
	| ModelReference
	| ParenthesizedExpression
	| ClosureDeclaration
//	| InheritedAttributeUse   // <-- added for attribution
	// | SynthesizedAttributeUse // <-- added for attribution
;

Expression returns core::Expression:
	MethodCall	
;

InitiableExpression returns core::Expression:
	VariableReference 
    | VariableReference	(=> ({core::MethodCall.receptor = current}) "." methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")" )? (parameters+=ClosureDeclaration)?  )+
;

MethodCall returns core::Expression:
	PrimaryExpression
	(
		( ({core::BinaryExpr.left = current}) binaryOp=BinaryOp right=Expression)		
		| ( ( ({attr::AttributeUse.expr = current}) "[" attribute=[attr::AttributeDcl] "]" )
			(=> ({core::MethodCall.receptor = current}) "." methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")" )? (parameters+=ClosureDeclaration)?  )?
			)+
	    | ( (=> ({core::MethodCall.receptor = current}) "." methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")" )? (parameters+=ClosureDeclaration)?  )
			  (  (({attr::AttributeUse.expr = current}) "[" attribute=[attr::AttributeDcl] "]") |
			  	 ((({core::ResolveLink.expr = current}) "[" module=[core::UseDeclaration] isExternal?="!" linkName=EString ("." featureName=EString)?  "]"))			  	
			  )? )+
        // to allow accessing attributes	
	)? // ? ( ({attr::AttributeUse.expr = current}) "[" attribute=[attr::AttributeDcl] "]" )?
;

AttributeInit returns attr::AttributeInit:
	receptor=InitiableExpression "[" attribute=[attr::AttributeDcl] "]" "<-" right=Expression  
;



//SynthesizedInit returns attr::SynthesizedInit: 
//	"self" "[" attribute=[attr::SynthesizedAttributeDcl] "]" "<-" right=Expression
//;


//InheritedAttributeUse returns attr::InheritedAttributeUse: 
//	"self" "[" attribute=[attr::InheritedAttributeDcl] "]"
//;
/*
SynthesizedAttributeUse returns attr::SynthesizedAttributeUse: 
	expr=Expression "[" attribute=[attr::SynthesizedAttributeDcl] "]"
;
*/
