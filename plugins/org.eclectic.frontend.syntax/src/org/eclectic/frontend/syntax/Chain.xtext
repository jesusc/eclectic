
// automatically generated by Xtext
grammar org.eclectic.frontend.Chain // with org.eclectic.frontend.syntax.Expressions 
	with org.eclipse.xtext.common.Terminals 
    // with org.eclectic.frontend.syntax.Expressions

import "platform:/resource/org.eclectic.frontend.asm/model/eclectic.frontend.ecore" 

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

import "platform:/resource/org.eclectic.frontend.asm/model/eclectic.frontend.ecore#//core" as core

import "platform:/resource/org.eclectic.frontend.asm/model/eclectic.frontend.ecore#//chain" as chain

//import "platform:/resource/modelum.eclectic.compiler/model/family/eclectic.frontend.ecore#//frontend" as frontend

MappingTransformation returns chain::ChainTransformation:
	'chain'
	name=EString
	// '(' left=[core::TransformationDefinitionParameter|EString] ')'
	//'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
	'(' (inModels+=TransformationDefinitionParameter)? ("," inModels+=TransformationDefinitionParameter)*  ')'
	'->'
	'(' (outModels+=TransformationDefinitionParameter)? ("," outModels+=TransformationDefinitionParameter)* ')'

	
	( externals+=ExternalTransformation )* // THIS IS NO LONGER NEEDED, BUT 

	( composites+=CompositeTransformation )*
	( executions+=TransformationExecution)+
    "end"
    ;

// @common
TransformationDefinitionParameter returns core::TransformationDefinitionParameter:
	{core::TransformationDefinitionParameter}
	name=EString
	
;

// end-of-common
CompositeTransformation returns chain::CompositeTransformation: 
	"composite" name=EString '(' (inModels+=TransformationDefinitionParameter)? ("," inModels+=TransformationDefinitionParameter)* ')' 
	                    '->' '(' (outModels+=TransformationDefinitionParameter)? ("," outModels+=TransformationDefinitionParameter)* ')'
		( executions+=TransformationExecution)+	
	"end"
;

TransformationExecution returns chain::TransformationExecution: 
	(outputModels+=[core::RepresentModel]) ("," outputModels+=[core::RepresentModel])* "=" transformation=[chain::AvailableTransformation]
	"(" (inputModels+=[core::RepresentModel]) ("," inputModels+=[core::RepresentModel])* ")"
;


ExternalTransformation returns chain::ExternalTransformation: 
	"external" name=EString
;

// Not sure if this has be factorized somewhere...
EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	'-'? INT;
