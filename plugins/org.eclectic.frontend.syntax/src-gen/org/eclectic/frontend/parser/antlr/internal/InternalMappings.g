/*
* generated by Xtext
*/
grammar InternalMappings;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclectic.frontend.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclectic.frontend.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclectic.frontend.services.MappingsGrammarAccess;

}

@parser::members {

 	private MappingsGrammarAccess grammarAccess;
 	
    public InternalMappingsParser(TokenStream input, MappingsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "MappingTransformation";	
   	}
   	
   	@Override
   	protected MappingsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleMappingTransformation
entryRuleMappingTransformation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMappingTransformationRule()); }
	 iv_ruleMappingTransformation=ruleMappingTransformation 
	 { $current=$iv_ruleMappingTransformation.current; } 
	 EOF 
;

// Rule MappingTransformation
ruleMappingTransformation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='mappings' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMappingTransformationAccess().getMappingsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingTransformationAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingTransformationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMappingTransformationAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingTransformationAccess().getInModelsTransformationDefinitionParameterParserRuleCall_3_0()); 
	    }
		lv_inModels_3_0=ruleTransformationDefinitionParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingTransformationRule());
	        }
       		add(
       			$current, 
       			"inModels",
        		lv_inModels_3_0, 
        		"TransformationDefinitionParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMappingTransformationAccess().getRightParenthesisKeyword_4());
    }
	otherlv_5='->' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMappingTransformationAccess().getHyphenMinusGreaterThanSignKeyword_5());
    }
	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMappingTransformationAccess().getLeftParenthesisKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingTransformationAccess().getOutModelsTransformationDefinitionParameterParserRuleCall_7_0()); 
	    }
		lv_outModels_7_0=ruleTransformationDefinitionParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingTransformationRule());
	        }
       		add(
       			$current, 
       			"outModels",
        		lv_outModels_7_0, 
        		"TransformationDefinitionParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMappingTransformationAccess().getRightParenthesisKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingTransformationAccess().getAnnotationsAnnotationParserRuleCall_9_0()); 
	    }
		lv_annotations_9_0=ruleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingTransformationRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_9_0, 
        		"Annotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingTransformationAccess().getUsesUsesStatementsParserRuleCall_10_0()); 
	    }
		lv_uses_10_0=ruleUsesStatements		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingTransformationRule());
	        }
       		add(
       			$current, 
       			"uses",
        		lv_uses_10_0, 
        		"UsesStatements");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingTransformationAccess().getDelegatesDelegateParserRuleCall_11_0()); 
	    }
		lv_delegates_11_0=ruleDelegate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingTransformationRule());
	        }
       		add(
       			$current, 
       			"delegates",
        		lv_delegates_11_0, 
        		"Delegate");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingTransformationAccess().getContextsContextParserRuleCall_12_0()); 
	    }
		lv_contexts_12_0=ruleContext		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingTransformationRule());
	        }
       		add(
       			$current, 
       			"contexts",
        		lv_contexts_12_0, 
        		"Context");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	 iv_ruleAnnotation=ruleAnnotation 
	 { $current=$iv_ruleAnnotation.current; } 
	 EOF 
;

// Rule Annotation
ruleAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getAnnotationAccess().getMetamodelModelAnnotationParserRuleCall()); 
    }
    this_MetamodelModelAnnotation_0=ruleMetamodelModelAnnotation
    { 
        $current = $this_MetamodelModelAnnotation_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleMetamodelModelAnnotation
entryRuleMetamodelModelAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMetamodelModelAnnotationRule()); }
	 iv_ruleMetamodelModelAnnotation=ruleMetamodelModelAnnotation 
	 { $current=$iv_ruleMetamodelModelAnnotation.current; } 
	 EOF 
;

// Rule MetamodelModelAnnotation
ruleMetamodelModelAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetamodelModelAnnotationRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getMetamodelModelAnnotationAccess().getAnnotatedElementRepresentModelCrossReference_0_0()); 
	}

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMetamodelModelAnnotationAccess().getColonKeyword_1());
    }
(
(
		lv_metamodel_2_0=RULE_STRING
		{
			newLeafNode(lv_metamodel_2_0, grammarAccess.getMetamodelModelAnnotationAccess().getMetamodelSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMetamodelModelAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"metamodel",
        		lv_metamodel_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleUsesStatements
entryRuleUsesStatements returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUsesStatementsRule()); }
	 iv_ruleUsesStatements=ruleUsesStatements 
	 { $current=$iv_ruleUsesStatements.current; } 
	 EOF 
;

// Rule UsesStatements
ruleUsesStatements returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getUsesStatementsAccess().getUseDeclarationParserRuleCall()); 
    }
    this_UseDeclaration_0=ruleUseDeclaration
    { 
        $current = $this_UseDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleUseDeclaration
entryRuleUseDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUseDeclarationRule()); }
	 iv_ruleUseDeclaration=ruleUseDeclaration 
	 { $current=$iv_ruleUseDeclaration.current; } 
	 EOF 
;

// Rule UseDeclaration
ruleUseDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='uses' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUseDeclarationAccess().getUsesKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUseDeclarationAccess().getModuleEStringParserRuleCall_1_0()); 
	    }
		lv_module_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUseDeclarationRule());
	        }
       		set(
       			$current, 
       			"module",
        		lv_module_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUseDeclarationAccess().getAsKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUseDeclarationAccess().getAsEStringParserRuleCall_2_1_0()); 
	    }
		lv_as_3_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUseDeclarationRule());
	        }
       		set(
       			$current, 
       			"as",
        		lv_as_3_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleTransformationDefinitionParameter
entryRuleTransformationDefinitionParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransformationDefinitionParameterRule()); }
	 iv_ruleTransformationDefinitionParameter=ruleTransformationDefinitionParameter 
	 { $current=$iv_ruleTransformationDefinitionParameter.current; } 
	 EOF 
;

// Rule TransformationDefinitionParameter
ruleTransformationDefinitionParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTransformationDefinitionParameterAccess().getTransformationDefinitionParameterAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationDefinitionParameterAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationDefinitionParameterRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDelegate
entryRuleDelegate returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDelegateRule()); }
	 iv_ruleDelegate=ruleDelegate 
	 { $current=$iv_ruleDelegate.current; } 
	 EOF 
;

// Rule Delegate
ruleDelegate returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDelegateAccess().getTagsTagParserRuleCall_0_0()); 
	    }
		lv_tags_0_0=ruleTag		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDelegateRule());
	        }
       		add(
       			$current, 
       			"tags",
        		lv_tags_0_0, 
        		"Tag");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='delegate' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDelegateAccess().getDelegateKeyword_1());
    }
	otherlv_2='from' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDelegateAccess().getFromKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDelegateAccess().getLeftMatchedElementParserRuleCall_3_0()); 
	    }
		lv_left_3_0=ruleMatchedElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDelegateRule());
	        }
       		add(
       			$current, 
       			"left",
        		lv_left_3_0, 
        		"MatchedElement");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDelegateAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDelegateAccess().getLeftMatchedElementParserRuleCall_4_1_0()); 
	    }
		lv_left_5_0=ruleMatchedElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDelegateRule());
	        }
       		add(
       			$current, 
       			"left",
        		lv_left_5_0, 
        		"MatchedElement");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6='to' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDelegateAccess().getToKeyword_5());
    }
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDelegateRule());
	        }
        }
	otherlv_7=RULE_ID
	{
		newLeafNode(otherlv_7, grammarAccess.getDelegateAccess().getModuleUseDeclarationCrossReference_6_0_0()); 
	}

)
)(
(
		lv_isExternal_8_0=	'!' 
    {
        newLeafNode(lv_isExternal_8_0, grammarAccess.getDelegateAccess().getIsExternalExclamationMarkKeyword_6_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDelegateRule());
	        }
       		setWithLastConsumed($current, "isExternal", true, "!");
	    }

)
))(
(
		{ 
	        newCompositeNode(grammarAccess.getDelegateAccess().getLinkNameEStringParserRuleCall_7_0()); 
	    }
		lv_linkName_9_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDelegateRule());
	        }
       		set(
       			$current, 
       			"linkName",
        		lv_linkName_9_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10='.' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getDelegateAccess().getFullStopKeyword_8_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDelegateAccess().getFeatureNameEStringParserRuleCall_8_1_0()); 
	    }
		lv_featureName_11_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDelegateRule());
	        }
       		set(
       			$current, 
       			"featureName",
        		lv_featureName_11_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleContext
entryRuleContext returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContextRule()); }
	 iv_ruleContext=ruleContext 
	 { $current=$iv_ruleContext.current; } 
	 EOF 
;

// Rule Context
ruleContext returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getContextAccess().getTagsTagParserRuleCall_0_0()); 
	    }
		lv_tags_0_0=ruleTag		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContextRule());
	        }
       		add(
       			$current, 
       			"tags",
        		lv_tags_0_0, 
        		"Tag");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='from' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getContextAccess().getFromKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContextAccess().getLeftMatchedElementParserRuleCall_2_0()); 
	    }
		lv_left_2_0=ruleMatchedElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContextRule());
	        }
       		add(
       			$current, 
       			"left",
        		lv_left_2_0, 
        		"MatchedElement");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getContextAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContextAccess().getLeftMatchedElementParserRuleCall_3_1_0()); 
	    }
		lv_left_4_0=ruleMatchedElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContextRule());
	        }
       		add(
       			$current, 
       			"left",
        		lv_left_4_0, 
        		"MatchedElement");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='to' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getContextAccess().getToKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContextAccess().getRightMatchedElementParserRuleCall_5_0()); 
	    }
		lv_right_6_0=ruleMatchedElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContextRule());
	        }
       		add(
       			$current, 
       			"right",
        		lv_right_6_0, 
        		"MatchedElement");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getContextAccess().getCommaKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContextAccess().getRightMatchedElementParserRuleCall_6_1_0()); 
	    }
		lv_right_8_0=ruleMatchedElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContextRule());
	        }
       		add(
       			$current, 
       			"right",
        		lv_right_8_0, 
        		"MatchedElement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getContextAccess().getModifiersC2CModifierParserRuleCall_7_0()); 
	    }
		lv_modifiers_9_0=ruleC2CModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContextRule());
	        }
       		add(
       			$current, 
       			"modifiers",
        		lv_modifiers_9_0, 
        		"C2CModifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
(
		{ 
	        newCompositeNode(grammarAccess.getContextAccess().getMappingsAttributeMappingParserRuleCall_8_0_0()); 
	    }
		lv_mappings_10_1=ruleAttributeMapping		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContextRule());
	        }
       		add(
       			$current, 
       			"mappings",
        		lv_mappings_10_1, 
        		"AttributeMapping");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getContextAccess().getMappingsReference2ReferenceParserRuleCall_8_0_1()); 
	    }
		lv_mappings_10_2=ruleReference2Reference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContextRule());
	        }
       		add(
       			$current, 
       			"mappings",
        		lv_mappings_10_2, 
        		"Reference2Reference");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*	otherlv_11='end' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getContextAccess().getEndKeyword_9());
    }
)
;





// Entry rule entryRuleTag
entryRuleTag returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTagRule()); }
	 iv_ruleTag=ruleTag 
	 { $current=$iv_ruleTag.current; } 
	 EOF 
;

// Rule Tag
ruleTag returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTagAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTagAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTagRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTagAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleMatchedElement
entryRuleMatchedElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMatchedElementRule()); }
	 iv_ruleMatchedElement=ruleMatchedElement 
	 { $current=$iv_ruleMatchedElement.current; } 
	 EOF 
;

// Rule MatchedElement
ruleMatchedElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getMatchedElementAccess().getNameIDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMatchedElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMatchedElementAccess().getColonKeyword_0_1());
    }
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMatchedElementRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getMatchedElementAccess().getModelRepresentModelCrossReference_1_0()); 
	}

)
)	otherlv_3='!' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMatchedElementAccess().getExclamationMarkKeyword_2());
    }
(
(
		lv_className_4_0=RULE_ID
		{
			newLeafNode(lv_className_4_0, grammarAccess.getMatchedElementAccess().getClassNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMatchedElementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"className",
        		lv_className_4_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMatchedElementAccess().getAnnotationsSingleAnnotationParserRuleCall_4_0()); 
	    }
		lv_annotations_5_0=ruleSingleAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMatchedElementRule());
	        }
       		add(
       			$current, 
       			"annotations",
        		lv_annotations_5_0, 
        		"SingleAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_strictType_6_0=	'!' 
    {
        newLeafNode(lv_strictType_6_0, grammarAccess.getMatchedElementAccess().getStrictTypeExclamationMarkKeyword_5_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMatchedElementRule());
	        }
       		setWithLastConsumed($current, "strictType", true, "!");
	    }

)
)?)
;





// Entry rule entryRuleSingleAnnotation
entryRuleSingleAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSingleAnnotationRule()); }
	 iv_ruleSingleAnnotation=ruleSingleAnnotation 
	 { $current=$iv_ruleSingleAnnotation.current; } 
	 EOF 
;

// Rule SingleAnnotation
ruleSingleAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getSingleAnnotationAccess().getPotencyAnnotationParserRuleCall()); 
    }
    this_PotencyAnnotation_0=rulePotencyAnnotation
    { 
        $current = $this_PotencyAnnotation_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRulePotencyAnnotation
entryRulePotencyAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPotencyAnnotationRule()); }
	 iv_rulePotencyAnnotation=rulePotencyAnnotation 
	 { $current=$iv_rulePotencyAnnotation.current; } 
	 EOF 
;

// Rule PotencyAnnotation
rulePotencyAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='@' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPotencyAnnotationAccess().getCommercialAtKeyword_0_0());
    }

    |	otherlv_1='^' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPotencyAnnotationAccess().getCircumflexAccentKeyword_0_1());
    }
)(
(
		lv_value_2_0=RULE_INT
		{
			newLeafNode(lv_value_2_0, grammarAccess.getPotencyAnnotationAccess().getValueINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPotencyAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleC2CModifier
entryRuleC2CModifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getC2CModifierRule()); }
	 iv_ruleC2CModifier=ruleC2CModifier 
	 { $current=$iv_ruleC2CModifier.current; } 
	 EOF 
;

// Rule C2CModifier
ruleC2CModifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getC2CModifierAccess().getLinkedByParserRuleCall()); 
    }
    this_LinkedBy_0=ruleLinkedBy
    { 
        $current = $this_LinkedBy_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleLinkedBy
entryRuleLinkedBy returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinkedByRule()); }
	 iv_ruleLinkedBy=ruleLinkedBy 
	 { $current=$iv_ruleLinkedBy.current; } 
	 EOF 
;

// Rule LinkedBy
ruleLinkedBy returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='linking' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLinkedByAccess().getLinkingKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLinkedByAccess().getAttributeAttributeRefParserRuleCall_1_0()); 
	    }
		lv_attribute_1_0=ruleAttributeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkedByRule());
	        }
       		set(
       			$current, 
       			"attribute",
        		lv_attribute_1_0, 
        		"AttributeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLinkedByAccess().getEqualsSignKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLinkedByRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getLinkedByAccess().getLinkedElementMatchedElementCrossReference_3_0()); 
	}

)
))
;





// Entry rule entryRuleAttributeMapping
entryRuleAttributeMapping returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeMappingRule()); }
	 iv_ruleAttributeMapping=ruleAttributeMapping 
	 { $current=$iv_ruleAttributeMapping.current; } 
	 EOF 
;

// Rule AttributeMapping
ruleAttributeMapping returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeMappingAccess().getLeftAttributeRefParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleAttributeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeMappingRule());
	        }
       		add(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"AttributeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttributeMappingAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeMappingAccess().getLeftAttributeRefParserRuleCall_1_1_0()); 
	    }
		lv_left_2_0=ruleAttributeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeMappingRule());
	        }
       		add(
       			$current, 
       			"left",
        		lv_left_2_0, 
        		"AttributeRef");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAttributeMappingAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeMappingAccess().getRightPartAttributeRightPartParserRuleCall_3_0()); 
	    }
		lv_rightPart_4_0=ruleAttributeRightPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeMappingRule());
	        }
       		set(
       			$current, 
       			"rightPart",
        		lv_rightPart_4_0, 
        		"AttributeRightPart");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAttributeRightPart
entryRuleAttributeRightPart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRightPartRule()); }
	 iv_ruleAttributeRightPart=ruleAttributeRightPart 
	 { $current=$iv_ruleAttributeRightPart.current; } 
	 EOF 
;

// Rule AttributeRightPart
ruleAttributeRightPart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAttributeRightPartAccess().getAttributeIsStringParserRuleCall_0()); 
    }
    this_AttributeIsString_0=ruleAttributeIsString
    { 
        $current = $this_AttributeIsString_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAttributeRightPartAccess().getAttributeIsBooleanParserRuleCall_1()); 
    }
    this_AttributeIsBoolean_1=ruleAttributeIsBoolean
    { 
        $current = $this_AttributeIsBoolean_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAttributeRightPartAccess().getAttributeIsDoubleParserRuleCall_2()); 
    }
    this_AttributeIsDouble_2=ruleAttributeIsDouble
    { 
        $current = $this_AttributeIsDouble_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAttributeRightPartAccess().getAttributeIsIntegerParserRuleCall_3()); 
    }
    this_AttributeIsInteger_3=ruleAttributeIsInteger
    { 
        $current = $this_AttributeIsInteger_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAttributeRightPartAccess().getAttribute2AttributeParserRuleCall_4()); 
    }
    this_Attribute2Attribute_4=ruleAttribute2Attribute
    { 
        $current = $this_Attribute2Attribute_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAttribute2Attribute
entryRuleAttribute2Attribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttribute2AttributeRule()); }
	 iv_ruleAttribute2Attribute=ruleAttribute2Attribute 
	 { $current=$iv_ruleAttribute2Attribute.current; } 
	 EOF 
;

// Rule Attribute2Attribute
ruleAttribute2Attribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttribute2AttributeAccess().getRightAttributeRefParserRuleCall_0_0()); 
	    }
		lv_right_0_0=ruleAttributeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttribute2AttributeRule());
	        }
       		add(
       			$current, 
       			"right",
        		lv_right_0_0, 
        		"AttributeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttribute2AttributeAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttribute2AttributeAccess().getRightAttributeRefParserRuleCall_1_1_0()); 
	    }
		lv_right_2_0=ruleAttributeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttribute2AttributeRule());
	        }
       		add(
       			$current, 
       			"right",
        		lv_right_2_0, 
        		"AttributeRef");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getAttribute2AttributeAccess().getConverterConverterParserRuleCall_2_0()); 
	    }
		lv_converter_3_0=ruleConverter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttribute2AttributeRule());
	        }
       		set(
       			$current, 
       			"converter",
        		lv_converter_3_0, 
        		"Converter");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleAttributeIsString
entryRuleAttributeIsString returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeIsStringRule()); }
	 iv_ruleAttributeIsString=ruleAttributeIsString 
	 { $current=$iv_ruleAttributeIsString.current; } 
	 EOF 
;

// Rule AttributeIsString
ruleAttributeIsString returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeIsStringAccess().getStrValueStrictStringParserRuleCall_0()); 
	    }
		lv_strValue_0_0=ruleStrictString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeIsStringRule());
	        }
       		set(
       			$current, 
       			"strValue",
        		lv_strValue_0_0, 
        		"StrictString");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleAttributeIsBoolean
entryRuleAttributeIsBoolean returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeIsBooleanRule()); }
	 iv_ruleAttributeIsBoolean=ruleAttributeIsBoolean 
	 { $current=$iv_ruleAttributeIsBoolean.current; } 
	 EOF 
;

// Rule AttributeIsBoolean
ruleAttributeIsBoolean returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeIsBooleanAccess().getBoolValueEBooleanParserRuleCall_0()); 
	    }
		lv_boolValue_0_0=ruleEBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeIsBooleanRule());
	        }
       		set(
       			$current, 
       			"boolValue",
        		lv_boolValue_0_0, 
        		"EBoolean");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleAttributeIsDouble
entryRuleAttributeIsDouble returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeIsDoubleRule()); }
	 iv_ruleAttributeIsDouble=ruleAttributeIsDouble 
	 { $current=$iv_ruleAttributeIsDouble.current; } 
	 EOF 
;

// Rule AttributeIsDouble
ruleAttributeIsDouble returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeIsDoubleAccess().getDoubleValueEDoubleParserRuleCall_0()); 
	    }
		lv_doubleValue_0_0=ruleEDouble		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeIsDoubleRule());
	        }
       		set(
       			$current, 
       			"doubleValue",
        		lv_doubleValue_0_0, 
        		"EDouble");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleAttributeIsInteger
entryRuleAttributeIsInteger returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeIsIntegerRule()); }
	 iv_ruleAttributeIsInteger=ruleAttributeIsInteger 
	 { $current=$iv_ruleAttributeIsInteger.current; } 
	 EOF 
;

// Rule AttributeIsInteger
ruleAttributeIsInteger returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeIsIntegerAccess().getIntValueEIntParserRuleCall_0()); 
	    }
		lv_intValue_0_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeIsIntegerRule());
	        }
       		set(
       			$current, 
       			"intValue",
        		lv_intValue_0_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleAttributeRef
entryRuleAttributeRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRefRule()); }
	 iv_ruleAttributeRef=ruleAttributeRef 
	 { $current=$iv_ruleAttributeRef.current; } 
	 EOF 
;

// Rule AttributeRef
ruleAttributeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRefRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getAttributeRefAccess().getReferredElementMatchedElementCrossReference_0_0_0()); 
	}

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttributeRefAccess().getFullStopKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getAttributeRefAccess().getFeatureNameEStringParserRuleCall_1_0()); 
	    }
		lv_featureName_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttributeRefRule());
	        }
       		set(
       			$current, 
       			"featureName",
        		lv_featureName_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_multivalued_3_0=	'*' 
    {
        newLeafNode(lv_multivalued_3_0, grammarAccess.getAttributeRefAccess().getMultivaluedAsteriskKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRefRule());
	        }
       		setWithLastConsumed($current, "multivalued", true, "*");
	    }

)
)?)
;





// Entry rule entryRuleReference2Reference
entryRuleReference2Reference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReference2ReferenceRule()); }
	 iv_ruleReference2Reference=ruleReference2Reference 
	 { $current=$iv_ruleReference2Reference.current; } 
	 EOF 
;

// Rule Reference2Reference
ruleReference2Reference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getReference2ReferenceAccess().getLeftReferenceRefParserRuleCall_0_0()); 
	    }
		lv_left_0_0=ruleReferenceRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReference2ReferenceRule());
	        }
       		add(
       			$current, 
       			"left",
        		lv_left_0_0, 
        		"ReferenceRef");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getReference2ReferenceAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReference2ReferenceAccess().getLeftReferenceRefParserRuleCall_1_1_0()); 
	    }
		lv_left_2_0=ruleReferenceRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReference2ReferenceRule());
	        }
       		add(
       			$current, 
       			"left",
        		lv_left_2_0, 
        		"ReferenceRef");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_3='<-' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getReference2ReferenceAccess().getLessThanSignHyphenMinusKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReference2ReferenceAccess().getRightReferenceRefParserRuleCall_3_0()); 
	    }
		lv_right_4_0=ruleReferenceRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReference2ReferenceRule());
	        }
       		add(
       			$current, 
       			"right",
        		lv_right_4_0, 
        		"ReferenceRef");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getReference2ReferenceAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReference2ReferenceAccess().getRightReferenceRefParserRuleCall_4_1_0()); 
	    }
		lv_right_6_0=ruleReferenceRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReference2ReferenceRule());
	        }
       		add(
       			$current, 
       			"right",
        		lv_right_6_0, 
        		"ReferenceRef");
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getReference2ReferenceAccess().getConverterConverterParserRuleCall_5_0()); 
	    }
		lv_converter_7_0=ruleConverter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReference2ReferenceRule());
	        }
       		set(
       			$current, 
       			"converter",
        		lv_converter_7_0, 
        		"Converter");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleReferenceRef
entryRuleReferenceRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReferenceRefRule()); }
	 iv_ruleReferenceRef=ruleReferenceRef 
	 { $current=$iv_ruleReferenceRef.current; } 
	 EOF 
;

// Rule ReferenceRef
ruleReferenceRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceRefRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getReferenceRefAccess().getReferredElementMatchedElementCrossReference_0_0_0()); 
	}

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getReferenceRefAccess().getFullStopKeyword_0_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getReferenceRefAccess().getFeatureNameEStringParserRuleCall_1_0()); 
	    }
		lv_featureName_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReferenceRefRule());
	        }
       		set(
       			$current, 
       			"featureName",
        		lv_featureName_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_multivalued_3_0=	'*' 
    {
        newLeafNode(lv_multivalued_3_0, grammarAccess.getReferenceRefAccess().getMultivaluedAsteriskKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceRefRule());
	        }
       		setWithLastConsumed($current, "multivalued", true, "*");
	    }

)
)?)
;





// Entry rule entryRuleConverter
entryRuleConverter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConverterRule()); }
	 iv_ruleConverter=ruleConverter 
	 { $current=$iv_ruleConverter.current; } 
	 EOF 
;

// Rule Converter
ruleConverter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='convert' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConverterAccess().getConvertKeyword_0());
    }
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConverterRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getConverterAccess().getModuleUseDeclarationCrossReference_1_0_0()); 
	}

)
)(
(
		lv_isExternal_2_0=	'.' 
    {
        newLeafNode(lv_isExternal_2_0, grammarAccess.getConverterAccess().getIsExternalFullStopKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConverterRule());
	        }
       		setWithLastConsumed($current, "isExternal", true, ".");
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getConverterAccess().getConverterNameEStringParserRuleCall_2_0()); 
	    }
		lv_converterName_3_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConverterRule());
	        }
       		set(
       			$current, 
       			"converterName",
        		lv_converterName_3_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleEDouble
entryRuleEDouble returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEDoubleRule()); } 
	 iv_ruleEDouble=ruleEDouble 
	 { $current=$iv_ruleEDouble.current.getText(); }  
	 EOF 
;

// Rule EDouble
ruleEDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEDoubleAccess().getFullStopKeyword_1()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleEBoolean
entryRuleEBoolean returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEBooleanRule()); } 
	 iv_ruleEBoolean=ruleEBoolean 
	 { $current=$iv_ruleEBoolean.current.getText(); }  
	 EOF 
;

// Rule EBoolean
ruleEBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEBooleanAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEBooleanAccess().getFalseKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleStrictString
entryRuleStrictString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStrictStringRule()); } 
	 iv_ruleStrictString=ruleStrictString 
	 { $current=$iv_ruleStrictString.current.getText(); }  
	 EOF 
;

// Rule StrictString
ruleStrictString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getStrictStringAccess().getSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIntRule()); } 
	 iv_ruleEInt=ruleEInt 
	 { $current=$iv_ruleEInt.current.getText(); }  
	 EOF 
;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


