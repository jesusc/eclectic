/*
* generated by Xtext
*/
grammar InternalChain;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclectic.frontend.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclectic.frontend.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclectic.frontend.services.ChainGrammarAccess;

}

@parser::members {

 	private ChainGrammarAccess grammarAccess;
 	
    public InternalChainParser(TokenStream input, ChainGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "MappingTransformation";	
   	}
   	
   	@Override
   	protected ChainGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleMappingTransformation
entryRuleMappingTransformation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMappingTransformationRule()); }
	 iv_ruleMappingTransformation=ruleMappingTransformation 
	 { $current=$iv_ruleMappingTransformation.current; } 
	 EOF 
;

// Rule MappingTransformation
ruleMappingTransformation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='chain' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMappingTransformationAccess().getChainKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingTransformationAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingTransformationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMappingTransformationAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingTransformationAccess().getInModelsTransformationDefinitionParameterParserRuleCall_3_0()); 
	    }
		lv_inModels_3_0=ruleTransformationDefinitionParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingTransformationRule());
	        }
       		add(
       			$current, 
       			"inModels",
        		lv_inModels_3_0, 
        		"TransformationDefinitionParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMappingTransformationAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingTransformationAccess().getInModelsTransformationDefinitionParameterParserRuleCall_4_1_0()); 
	    }
		lv_inModels_5_0=ruleTransformationDefinitionParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingTransformationRule());
	        }
       		add(
       			$current, 
       			"inModels",
        		lv_inModels_5_0, 
        		"TransformationDefinitionParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMappingTransformationAccess().getRightParenthesisKeyword_5());
    }
	otherlv_7='->' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMappingTransformationAccess().getHyphenMinusGreaterThanSignKeyword_6());
    }
	otherlv_8='(' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMappingTransformationAccess().getLeftParenthesisKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingTransformationAccess().getOutModelsTransformationDefinitionParameterParserRuleCall_8_0()); 
	    }
		lv_outModels_9_0=ruleTransformationDefinitionParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingTransformationRule());
	        }
       		add(
       			$current, 
       			"outModels",
        		lv_outModels_9_0, 
        		"TransformationDefinitionParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getMappingTransformationAccess().getCommaKeyword_9_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingTransformationAccess().getOutModelsTransformationDefinitionParameterParserRuleCall_9_1_0()); 
	    }
		lv_outModels_11_0=ruleTransformationDefinitionParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingTransformationRule());
	        }
       		add(
       			$current, 
       			"outModels",
        		lv_outModels_11_0, 
        		"TransformationDefinitionParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_12=')' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getMappingTransformationAccess().getRightParenthesisKeyword_10());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingTransformationAccess().getExternalsExternalTransformationParserRuleCall_11_0()); 
	    }
		lv_externals_13_0=ruleExternalTransformation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingTransformationRule());
	        }
       		add(
       			$current, 
       			"externals",
        		lv_externals_13_0, 
        		"ExternalTransformation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingTransformationAccess().getCompositesCompositeTransformationParserRuleCall_12_0()); 
	    }
		lv_composites_14_0=ruleCompositeTransformation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingTransformationRule());
	        }
       		add(
       			$current, 
       			"composites",
        		lv_composites_14_0, 
        		"CompositeTransformation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingTransformationAccess().getExecutionsTransformationExecutionParserRuleCall_13_0()); 
	    }
		lv_executions_15_0=ruleTransformationExecution		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingTransformationRule());
	        }
       		add(
       			$current, 
       			"executions",
        		lv_executions_15_0, 
        		"TransformationExecution");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_16='end' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getMappingTransformationAccess().getEndKeyword_14());
    }
)
;





// Entry rule entryRuleTransformationDefinitionParameter
entryRuleTransformationDefinitionParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransformationDefinitionParameterRule()); }
	 iv_ruleTransformationDefinitionParameter=ruleTransformationDefinitionParameter 
	 { $current=$iv_ruleTransformationDefinitionParameter.current; } 
	 EOF 
;

// Rule TransformationDefinitionParameter
ruleTransformationDefinitionParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTransformationDefinitionParameterAccess().getTransformationDefinitionParameterAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationDefinitionParameterAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationDefinitionParameterRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCompositeTransformation
entryRuleCompositeTransformation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompositeTransformationRule()); }
	 iv_ruleCompositeTransformation=ruleCompositeTransformation 
	 { $current=$iv_ruleCompositeTransformation.current; } 
	 EOF 
;

// Rule CompositeTransformation
ruleCompositeTransformation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='composite' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCompositeTransformationAccess().getCompositeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompositeTransformationAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompositeTransformationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCompositeTransformationAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompositeTransformationAccess().getInModelsTransformationDefinitionParameterParserRuleCall_3_0()); 
	    }
		lv_inModels_3_0=ruleTransformationDefinitionParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompositeTransformationRule());
	        }
       		add(
       			$current, 
       			"inModels",
        		lv_inModels_3_0, 
        		"TransformationDefinitionParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCompositeTransformationAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompositeTransformationAccess().getInModelsTransformationDefinitionParameterParserRuleCall_4_1_0()); 
	    }
		lv_inModels_5_0=ruleTransformationDefinitionParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompositeTransformationRule());
	        }
       		add(
       			$current, 
       			"inModels",
        		lv_inModels_5_0, 
        		"TransformationDefinitionParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCompositeTransformationAccess().getRightParenthesisKeyword_5());
    }
	otherlv_7='->' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCompositeTransformationAccess().getHyphenMinusGreaterThanSignKeyword_6());
    }
	otherlv_8='(' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getCompositeTransformationAccess().getLeftParenthesisKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompositeTransformationAccess().getOutModelsTransformationDefinitionParameterParserRuleCall_8_0()); 
	    }
		lv_outModels_9_0=ruleTransformationDefinitionParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompositeTransformationRule());
	        }
       		add(
       			$current, 
       			"outModels",
        		lv_outModels_9_0, 
        		"TransformationDefinitionParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getCompositeTransformationAccess().getCommaKeyword_9_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompositeTransformationAccess().getOutModelsTransformationDefinitionParameterParserRuleCall_9_1_0()); 
	    }
		lv_outModels_11_0=ruleTransformationDefinitionParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompositeTransformationRule());
	        }
       		add(
       			$current, 
       			"outModels",
        		lv_outModels_11_0, 
        		"TransformationDefinitionParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_12=')' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getCompositeTransformationAccess().getRightParenthesisKeyword_10());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompositeTransformationAccess().getExecutionsTransformationExecutionParserRuleCall_11_0()); 
	    }
		lv_executions_13_0=ruleTransformationExecution		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompositeTransformationRule());
	        }
       		add(
       			$current, 
       			"executions",
        		lv_executions_13_0, 
        		"TransformationExecution");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_14='end' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getCompositeTransformationAccess().getEndKeyword_12());
    }
)
;





// Entry rule entryRuleTransformationExecution
entryRuleTransformationExecution returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransformationExecutionRule()); }
	 iv_ruleTransformationExecution=ruleTransformationExecution 
	 { $current=$iv_ruleTransformationExecution.current; } 
	 EOF 
;

// Rule TransformationExecution
ruleTransformationExecution returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransformationExecutionRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getTransformationExecutionAccess().getOutputModelsRepresentModelCrossReference_0_0()); 
	}

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransformationExecutionAccess().getCommaKeyword_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransformationExecutionRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getTransformationExecutionAccess().getOutputModelsRepresentModelCrossReference_1_1_0()); 
	}

)
))*	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTransformationExecutionAccess().getEqualsSignKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransformationExecutionRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getTransformationExecutionAccess().getTransformationAvailableTransformationCrossReference_3_0()); 
	}

)
)	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTransformationExecutionAccess().getLeftParenthesisKeyword_4());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransformationExecutionRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getTransformationExecutionAccess().getInputModelsRepresentModelCrossReference_5_0()); 
	}

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTransformationExecutionAccess().getCommaKeyword_6_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransformationExecutionRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getTransformationExecutionAccess().getInputModelsRepresentModelCrossReference_6_1_0()); 
	}

)
))*	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTransformationExecutionAccess().getRightParenthesisKeyword_7());
    }
)
;





// Entry rule entryRuleExternalTransformation
entryRuleExternalTransformation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExternalTransformationRule()); }
	 iv_ruleExternalTransformation=ruleExternalTransformation 
	 { $current=$iv_ruleExternalTransformation.current; } 
	 EOF 
;

// Rule ExternalTransformation
ruleExternalTransformation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='external' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExternalTransformationAccess().getExternalKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExternalTransformationAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExternalTransformationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;







RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


