/*
* generated by Xtext
*/
grammar InternalKoan;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclectic.frontend.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclectic.frontend.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclectic.frontend.services.KoanGrammarAccess;

}

@parser::members {

 	private KoanGrammarAccess grammarAccess;
 	
    public InternalKoanParser(TokenStream input, KoanGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "MappingTransformation";	
   	}
   	
   	@Override
   	protected KoanGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleMappingTransformation
entryRuleMappingTransformation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMappingTransformationRule()); }
	 iv_ruleMappingTransformation=ruleMappingTransformation 
	 { $current=$iv_ruleMappingTransformation.current; } 
	 EOF 
;

// Rule MappingTransformation
ruleMappingTransformation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='koan' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMappingTransformationAccess().getKoanKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingTransformationAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingTransformationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMappingTransformationAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingTransformationAccess().getInModelsTransformationDefinitionParameterParserRuleCall_3_0()); 
	    }
		lv_inModels_3_0=ruleTransformationDefinitionParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingTransformationRule());
	        }
       		add(
       			$current, 
       			"inModels",
        		lv_inModels_3_0, 
        		"TransformationDefinitionParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMappingTransformationAccess().getRightParenthesisKeyword_4());
    }
	otherlv_5='->' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMappingTransformationAccess().getHyphenMinusGreaterThanSignKeyword_5());
    }
	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMappingTransformationAccess().getLeftParenthesisKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingTransformationAccess().getOutModelsTransformationDefinitionParameterParserRuleCall_7_0()); 
	    }
		lv_outModels_7_0=ruleTransformationDefinitionParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingTransformationRule());
	        }
       		add(
       			$current, 
       			"outModels",
        		lv_outModels_7_0, 
        		"TransformationDefinitionParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMappingTransformationAccess().getRightParenthesisKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingTransformationAccess().getTraceInterfaceTraceInterfaceParserRuleCall_9_0()); 
	    }
		lv_traceInterface_9_0=ruleTraceInterface		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingTransformationRule());
	        }
       		set(
       			$current, 
       			"traceInterface",
        		lv_traceInterface_9_0, 
        		"TraceInterface");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMappingTransformationAccess().getRulesKoanRuleParserRuleCall_10_0()); 
	    }
		lv_rules_10_0=ruleKoanRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMappingTransformationRule());
	        }
       		add(
       			$current, 
       			"rules",
        		lv_rules_10_0, 
        		"KoanRule");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleTransformationDefinitionParameter
entryRuleTransformationDefinitionParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransformationDefinitionParameterRule()); }
	 iv_ruleTransformationDefinitionParameter=ruleTransformationDefinitionParameter 
	 { $current=$iv_ruleTransformationDefinitionParameter.current; } 
	 EOF 
;

// Rule TransformationDefinitionParameter
ruleTransformationDefinitionParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTransformationDefinitionParameterAccess().getTransformationDefinitionParameterAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTransformationDefinitionParameterAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransformationDefinitionParameterRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTraceInterface
entryRuleTraceInterface returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTraceInterfaceRule()); }
	 iv_ruleTraceInterface=ruleTraceInterface 
	 { $current=$iv_ruleTraceInterface.current; } 
	 EOF 
;

// Rule TraceInterface
ruleTraceInterface returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='trace' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTraceInterfaceAccess().getTraceKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTraceInterfaceAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTraceInterfaceRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTraceInterfaceAccess().getDefinitionsTraceDefinitionParserRuleCall_2_0()); 
	    }
		lv_definitions_2_0=ruleTraceDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTraceInterfaceRule());
	        }
       		add(
       			$current, 
       			"definitions",
        		lv_definitions_2_0, 
        		"TraceDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='end' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTraceInterfaceAccess().getEndKeyword_3());
    }
)
;





// Entry rule entryRuleTraceDefinition
entryRuleTraceDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTraceDefinitionRule()); }
	 iv_ruleTraceDefinition=ruleTraceDefinition 
	 { $current=$iv_ruleTraceDefinition.current; } 
	 EOF 
;

// Rule TraceDefinition
ruleTraceDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='link' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTraceDefinitionAccess().getLinkKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTraceDefinitionAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTraceDefinitionRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTraceDefinitionAccess().getLeftCurlyBracketKeyword_2_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTraceDefinitionAccess().getElementsTraceElementInlineParserRuleCall_2_0_1_0()); 
	    }
		lv_elements_3_0=ruleTraceElementInline		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTraceDefinitionRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"TraceElementInline");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTraceDefinitionAccess().getSemicolonKeyword_2_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTraceDefinitionAccess().getElementsTraceElementInlineParserRuleCall_2_0_2_1_0()); 
	    }
		lv_elements_5_0=ruleTraceElementInline		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTraceDefinitionRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_5_0, 
        		"TraceElementInline");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTraceDefinitionAccess().getRightCurlyBracketKeyword_2_0_3());
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getTraceDefinitionAccess().getElementsTraceElementExpandedParserRuleCall_2_1_0_0()); 
	    }
		lv_elements_7_0=ruleTraceElementExpanded		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTraceDefinitionRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_7_0, 
        		"TraceElementExpanded");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTraceDefinitionAccess().getElementsTraceElementExpandedParserRuleCall_2_1_1_0()); 
	    }
		lv_elements_8_0=ruleTraceElementExpanded		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTraceDefinitionRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_8_0, 
        		"TraceElementExpanded");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='end' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTraceDefinitionAccess().getEndKeyword_2_1_2());
    }
)))
;





// Entry rule entryRuleTraceElementInline
entryRuleTraceElementInline returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTraceElementInlineRule()); }
	 iv_ruleTraceElementInline=ruleTraceElementInline 
	 { $current=$iv_ruleTraceElementInline.current; } 
	 EOF 
;

// Rule TraceElementInline
ruleTraceElementInline returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTraceElementInlineAccess().getNameEStringParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTraceElementInlineRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTraceElementInlineAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTraceElementInlineAccess().getTypeTypeExpressionParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleTypeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTraceElementInlineRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"TypeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTraceElementExpanded
entryRuleTraceElementExpanded returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTraceElementExpandedRule()); }
	 iv_ruleTraceElementExpanded=ruleTraceElementExpanded 
	 { $current=$iv_ruleTraceElementExpanded.current; } 
	 EOF 
;

// Rule TraceElementExpanded
ruleTraceElementExpanded returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='var' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTraceElementExpandedAccess().getVarKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTraceElementExpandedAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTraceElementExpandedRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTraceElementExpandedAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTraceElementExpandedAccess().getTypeTypeExpressionParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleTypeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTraceElementExpandedRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"TypeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTypeExpression
entryRuleTypeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeExpressionRule()); }
	 iv_ruleTypeExpression=ruleTypeExpression 
	 { $current=$iv_ruleTypeExpression.current; } 
	 EOF 
;

// Rule TypeExpression
ruleTypeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getTypeExpressionAccess().getClassUseParserRuleCall()); 
    }
    this_ClassUse_0=ruleClassUse
    { 
        $current = $this_ClassUse_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleClassUse
entryRuleClassUse returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassUseRule()); }
	 iv_ruleClassUse=ruleClassUse 
	 { $current=$iv_ruleClassUse.current; } 
	 EOF 
;

// Rule ClassUse
ruleClassUse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClassUseRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getClassUseAccess().getModelRepresentModelCrossReference_0_0()); 
	}

)
)	otherlv_1='!' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getClassUseAccess().getExclamationMarkKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassUseAccess().getClassNameEStringParserRuleCall_2_0()); 
	    }
		lv_className_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassUseRule());
	        }
       		set(
       			$current, 
       			"className",
        		lv_className_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getDefineVariableParserRuleCall_0()); 
    }
    this_DefineVariable_0=ruleDefineVariable
    { 
        $current = $this_DefineVariable_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getPutTraceExpressionParserRuleCall_2()); 
    }
    this_PutTraceExpression_2=rulePutTraceExpression
    { 
        $current = $this_PutTraceExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getPropertyWriteParserRuleCall_3()); 
    }
    this_PropertyWrite_3=rulePropertyWrite
    { 
        $current = $this_PropertyWrite_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePropertyWrite
entryRulePropertyWrite returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyWriteRule()); }
	 iv_rulePropertyWrite=rulePropertyWrite 
	 { $current=$iv_rulePropertyWrite.current; } 
	 EOF 
;

// Rule PropertyWrite
rulePropertyWrite returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyWriteRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getPropertyWriteAccess().getReceptorVariableCrossReference_0_0()); 
	}

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPropertyWriteAccess().getFullStopKeyword_1());
    }
(
(
		lv_property_2_0=RULE_ID
		{
			newLeafNode(lv_property_2_0, grammarAccess.getPropertyWriteAccess().getPropertyIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyWriteRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"property",
        		lv_property_2_0, 
        		"ID");
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPropertyWriteAccess().getEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyWriteAccess().getExpressionExpressionParserRuleCall_4_0()); 
	    }
		lv_expression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyWriteRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDefineVariable
entryRuleDefineVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefineVariableRule()); }
	 iv_ruleDefineVariable=ruleDefineVariable 
	 { $current=$iv_ruleDefineVariable.current; } 
	 EOF 
;

// Rule DefineVariable
ruleDefineVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDefineVariableAccess().getNameEStringParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefineVariableRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDefineVariableAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefineVariableAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefineVariableRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleModelReference
entryRuleModelReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelReferenceRule()); }
	 iv_ruleModelReference=ruleModelReference 
	 { $current=$iv_ruleModelReference.current; } 
	 EOF 
;

// Rule ModelReference
ruleModelReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getModelReferenceRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getModelReferenceAccess().getModelRepresentModelCrossReference_0_0()); 
	}

)
)	otherlv_1='!' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModelReferenceAccess().getExclamationMarkKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelReferenceAccess().getClassNameEStringParserRuleCall_2_0()); 
	    }
		lv_className_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelReferenceRule());
	        }
       		set(
       			$current, 
       			"className",
        		lv_className_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getMethodCallParserRuleCall()); 
    }
    this_MethodCall_0=ruleMethodCall
    { 
        $current = $this_MethodCall_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0()); 
    }
    this_Literal_0=ruleLiteral
    { 
        $current = $this_Literal_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getVariableReferenceParserRuleCall_1()); 
    }
    this_VariableReference_1=ruleVariableReference
    { 
        $current = $this_VariableReference_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getModelReferenceParserRuleCall_2()); 
    }
    this_ModelReference_2=ruleModelReference
    { 
        $current = $this_ModelReference_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_3()); 
    }
    this_ParenthesizedExpression_3=ruleParenthesizedExpression
    { 
        $current = $this_ParenthesizedExpression_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getMatchTraceExpressionParserRuleCall_4()); 
    }
    this_MatchTraceExpression_4=ruleMatchTraceExpression
    { 
        $current = $this_MatchTraceExpression_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getClosureDeclarationParserRuleCall_5()); 
    }
    this_ClosureDeclaration_5=ruleClosureDeclaration
    { 
        $current = $this_ClosureDeclaration_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleParenthesizedExpression
entryRuleParenthesizedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenthesizedExpressionRule()); }
	 iv_ruleParenthesizedExpression=ruleParenthesizedExpression 
	 { $current=$iv_ruleParenthesizedExpression.current; } 
	 EOF 
;

// Rule ParenthesizedExpression
ruleParenthesizedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getParenthesizedExpressionAccess().getExpressionParserRuleCall_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current; } 
	 EOF 
;

// Rule Literal
ruleLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getLiteralAccess().getNumLiteralParserRuleCall()); 
    }
    this_NumLiteral_0=ruleNumLiteral
    { 
        $current = $this_NumLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleVariableReference
entryRuleVariableReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableReferenceRule()); }
	 iv_ruleVariableReference=ruleVariableReference 
	 { $current=$iv_ruleVariableReference.current; } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableReferenceRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getVariableReferenceAccess().getVariableVariableCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleClosureDeclaration
entryRuleClosureDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClosureDeclarationRule()); }
	 iv_ruleClosureDeclaration=ruleClosureDeclaration 
	 { $current=$iv_ruleClosureDeclaration.current; } 
	 EOF 
;

// Rule ClosureDeclaration
ruleClosureDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClosureDeclarationAccess().getLeftCurlyBracketKeyword_0());
    }
(	otherlv_1='|' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getClosureDeclarationAccess().getVerticalLineKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClosureDeclarationAccess().getFormalParametersClosureParameterParserRuleCall_1_1_0()); 
	    }
		lv_formalParameters_2_0=ruleClosureParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClosureDeclarationRule());
	        }
       		add(
       			$current, 
       			"formalParameters",
        		lv_formalParameters_2_0, 
        		"ClosureParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getClosureDeclarationAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClosureDeclarationAccess().getFormalParametersClosureParameterParserRuleCall_1_2_1_0()); 
	    }
		lv_formalParameters_4_0=ruleClosureParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClosureDeclarationRule());
	        }
       		add(
       			$current, 
       			"formalParameters",
        		lv_formalParameters_4_0, 
        		"ClosureParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='|' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getClosureDeclarationAccess().getVerticalLineKeyword_1_3());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getClosureDeclarationAccess().getStatementsStatementParserRuleCall_2_0()); 
	    }
		lv_statements_6_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClosureDeclarationRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_6_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getClosureDeclarationAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleClosureParameter
entryRuleClosureParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClosureParameterRule()); }
	 iv_ruleClosureParameter=ruleClosureParameter 
	 { $current=$iv_ruleClosureParameter.current; } 
	 EOF 
;

// Rule ClosureParameter
ruleClosureParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getClosureParameterAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClosureParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleMethodCall
entryRuleMethodCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodCallRule()); }
	 iv_ruleMethodCall=ruleMethodCall 
	 { $current=$iv_ruleMethodCall.current; } 
	 EOF 
;

// Rule MethodCall
ruleMethodCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMethodCallAccess().getPrimaryExpressionParserRuleCall_0()); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMethodCallAccess().getBinaryExprLeftAction_1_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodCallAccess().getBinaryOpBinaryOpEnumRuleCall_1_0_1_0()); 
	    }
		lv_binaryOp_2_0=ruleBinaryOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodCallRule());
	        }
       		set(
       			$current, 
       			"binaryOp",
        		lv_binaryOp_2_0, 
        		"BinaryOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodCallAccess().getRightExpressionParserRuleCall_1_0_2_0()); 
	    }
		lv_right_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodCallRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((((
))=>(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMethodCallAccess().getMethodCallReceptorAction_1_1_0_0(),
            $current);
    }
))	otherlv_5='.' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMethodCallAccess().getFullStopKeyword_1_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodCallAccess().getMethodNameEStringParserRuleCall_1_1_2_0()); 
	    }
		lv_methodName_6_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodCallRule());
	        }
       		set(
       			$current, 
       			"methodName",
        		lv_methodName_6_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_withParameters_7_0=	'(' 
    {
        newLeafNode(lv_withParameters_7_0, grammarAccess.getMethodCallAccess().getWithParametersLeftParenthesisKeyword_1_1_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodCallRule());
	        }
       		setWithLastConsumed($current, "withParameters", true, "(");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodCallAccess().getParametersExpressionParserRuleCall_1_1_3_1_0()); 
	    }
		lv_parameters_8_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodCallRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_8_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMethodCallAccess().getCommaKeyword_1_1_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodCallAccess().getParametersExpressionParserRuleCall_1_1_3_2_1_0()); 
	    }
		lv_parameters_10_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodCallRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_10_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getMethodCallAccess().getRightParenthesisKeyword_1_1_3_3());
    }
)?)+
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMethodCallAccess().getKeywordMethodCallReceptorAction_1_2_0(),
            $current);
    }
)	otherlv_13='.' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getMethodCallAccess().getFullStopKeyword_1_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodCallAccess().getParametersKeywordParameterParserRuleCall_1_2_2_0()); 
	    }
		lv_parameters_14_0=ruleKeywordParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodCallRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_14_0, 
        		"KeywordParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)+))?)
;





// Entry rule entryRuleKeywordParameter
entryRuleKeywordParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeywordParameterRule()); }
	 iv_ruleKeywordParameter=ruleKeywordParameter 
	 { $current=$iv_ruleKeywordParameter.current; } 
	 EOF 
;

// Rule KeywordParameter
ruleKeywordParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_keyword_0_0=RULE_KEYWORD_ID
		{
			newLeafNode(lv_keyword_0_0, grammarAccess.getKeywordParameterAccess().getKeywordKEYWORD_IDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getKeywordParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"keyword",
        		lv_keyword_0_0, 
        		"KEYWORD_ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getKeywordParameterAccess().getValueExpressionParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKeywordParameterRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMatchTraceExpression
entryRuleMatchTraceExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMatchTraceExpressionRule()); }
	 iv_ruleMatchTraceExpression=ruleMatchTraceExpression 
	 { $current=$iv_ruleMatchTraceExpression.current; } 
	 EOF 
;

// Rule MatchTraceExpression
ruleMatchTraceExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='match' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMatchTraceExpressionAccess().getMatchKeyword_0());
    }
(this_ID_1=RULE_ID
    { 
    newLeafNode(this_ID_1, grammarAccess.getMatchTraceExpressionAccess().getIDTerminalRuleCall_1_0()); 
    }
	otherlv_2='!' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMatchTraceExpressionAccess().getExclamationMarkKeyword_1_1());
    }
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMatchTraceExpressionRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getMatchTraceExpressionAccess().getTraceTraceDefinitionCrossReference_2_0()); 
	}

)
)	otherlv_4='with' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMatchTraceExpressionAccess().getWithKeyword_3());
    }
	otherlv_5='[' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMatchTraceExpressionAccess().getLeftSquareBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMatchTraceExpressionAccess().getTraceExprTraceExprLanguageParserRuleCall_5_0()); 
	    }
		lv_traceExpr_6_0=ruleTraceExprLanguage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMatchTraceExpressionRule());
	        }
       		set(
       			$current, 
       			"traceExpr",
        		lv_traceExpr_6_0, 
        		"TraceExprLanguage");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMatchTraceExpressionAccess().getRightSquareBracketKeyword_6());
    }
)
;





// Entry rule entryRuleTraceExprLanguage
entryRuleTraceExprLanguage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTraceExprLanguageRule()); }
	 iv_ruleTraceExprLanguage=ruleTraceExprLanguage 
	 { $current=$iv_ruleTraceExprLanguage.current; } 
	 EOF 
;

// Rule TraceExprLanguage
ruleTraceExprLanguage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTraceExprLanguageRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getTraceExprLanguageAccess().getTraceVarTraceElementCrossReference_0_0()); 
	}

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTraceExprLanguageAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTraceExprLanguageAccess().getExprExpressionParserRuleCall_2_0()); 
	    }
		lv_expr_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTraceExprLanguageRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePutTraceExpression
entryRulePutTraceExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPutTraceExpressionRule()); }
	 iv_rulePutTraceExpression=rulePutTraceExpression 
	 { $current=$iv_rulePutTraceExpression.current; } 
	 EOF 
;

// Rule PutTraceExpression
rulePutTraceExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='put' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPutTraceExpressionAccess().getPutKeyword_0());
    }
(this_ID_1=RULE_ID
    { 
    newLeafNode(this_ID_1, grammarAccess.getPutTraceExpressionAccess().getIDTerminalRuleCall_1_0()); 
    }
	otherlv_2='!' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPutTraceExpressionAccess().getExclamationMarkKeyword_1_1());
    }
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPutTraceExpressionRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getPutTraceExpressionAccess().getTraceTraceDefinitionCrossReference_2_0()); 
	}

)
)	otherlv_4='with' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPutTraceExpressionAccess().getWithKeyword_3());
    }
	otherlv_5='[' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getPutTraceExpressionAccess().getLeftSquareBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPutTraceExpressionAccess().getParametersPutTraceParameterParserRuleCall_5_0()); 
	    }
		lv_parameters_6_0=rulePutTraceParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPutTraceExpressionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_6_0, 
        		"PutTraceParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getPutTraceExpressionAccess().getCommaKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPutTraceExpressionAccess().getParametersPutTraceParameterParserRuleCall_6_1_0()); 
	    }
		lv_parameters_8_0=rulePutTraceParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPutTraceExpressionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_8_0, 
        		"PutTraceParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))+	otherlv_9=']' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getPutTraceExpressionAccess().getRightSquareBracketKeyword_7());
    }
)
;





// Entry rule entryRulePutTraceParameter
entryRulePutTraceParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPutTraceParameterRule()); }
	 iv_rulePutTraceParameter=rulePutTraceParameter 
	 { $current=$iv_rulePutTraceParameter.current; } 
	 EOF 
;

// Rule PutTraceParameter
rulePutTraceParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPutTraceParameterRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getPutTraceParameterAccess().getTraceVarTraceElementCrossReference_0_0()); 
	}

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPutTraceParameterAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPutTraceParameterAccess().getValueExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPutTraceParameterRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNumLiteral
entryRuleNumLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumLiteralRule()); }
	 iv_ruleNumLiteral=ruleNumLiteral 
	 { $current=$iv_ruleNumLiteral.current; } 
	 EOF 
;

// Rule NumLiteral
ruleNumLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumLiteralAccess().getValueEIntParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleKoanRule
entryRuleKoanRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getKoanRuleRule()); }
	 iv_ruleKoanRule=ruleKoanRule 
	 { $current=$iv_ruleKoanRule.current; } 
	 EOF 
;

// Rule KoanRule
ruleKoanRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='rule' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getKoanRuleAccess().getRuleKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getKoanRuleAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKoanRuleRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getKoanRuleAccess().getMatcherMatcherParserRuleCall_2_0()); 
	    }
		lv_matcher_2_0=ruleMatcher		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKoanRuleRule());
	        }
       		set(
       			$current, 
       			"matcher",
        		lv_matcher_2_0, 
        		"Matcher");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getKoanRuleAccess().getStatementsStatementParserRuleCall_3_0()); 
	    }
		lv_statements_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getKoanRuleRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_3_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4='end' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getKoanRuleAccess().getEndKeyword_4());
    }
)
;





// Entry rule entryRuleMatcher
entryRuleMatcher returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMatcherRule()); }
	 iv_ruleMatcher=ruleMatcher 
	 { $current=$iv_ruleMatcher.current; } 
	 EOF 
;

// Rule Matcher
ruleMatcher returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getMatcherAccess().getForAllMatcherParserRuleCall()); 
    }
    this_ForAllMatcher_0=ruleForAllMatcher
    { 
        $current = $this_ForAllMatcher_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleForAllMatcher
entryRuleForAllMatcher returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForAllMatcherRule()); }
	 iv_ruleForAllMatcher=ruleForAllMatcher 
	 { $current=$iv_ruleForAllMatcher.current; } 
	 EOF 
;

// Rule ForAllMatcher
ruleForAllMatcher returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='forAll' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForAllMatcherAccess().getForAllKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getForAllMatcherAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getForAllMatcherRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getForAllMatcherAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAllMatcherAccess().getTypeClassUseParserRuleCall_3_0()); 
	    }
		lv_type_3_0=ruleClassUse		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForAllMatcherRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"ClassUse");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForAllMatcherAccess().getChildMatcherParserRuleCall_4_0()); 
	    }
		lv_child_4_0=ruleMatcher		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForAllMatcherRule());
	        }
       		set(
       			$current, 
       			"child",
        		lv_child_4_0, 
        		"Matcher");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIntRule()); } 
	 iv_ruleEInt=ruleEInt 
	 { $current=$iv_ruleEInt.current.getText(); }  
	 EOF 
;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Rule BinaryOp
ruleBinaryOp returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getBinaryOpAccess().getADDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBinaryOpAccess().getADDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getBinaryOpAccess().getSUBEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBinaryOpAccess().getSUBEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='*' 
	{
        $current = grammarAccess.getBinaryOpAccess().getMULEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getBinaryOpAccess().getMULEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='/' 
	{
        $current = grammarAccess.getBinaryOpAccess().getDIVEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getBinaryOpAccess().getDIVEnumLiteralDeclaration_3()); 
    }
));



RULE_KEYWORD_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* ':';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


