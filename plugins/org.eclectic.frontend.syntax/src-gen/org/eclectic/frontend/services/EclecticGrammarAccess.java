/*
* generated by Xtext
*/

package org.eclectic.frontend.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclectic.frontend.syntax.services.ExpressionsGrammarAccess;

@Singleton
public class EclecticGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class EclecticTransformationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EclecticTransformationDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEclecticKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInModelsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInModelsTransformationDefinitionParameterParserRuleCall_3_0 = (RuleCall)cInModelsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInModelsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInModelsTransformationDefinitionParameterParserRuleCall_4_1_0 = (RuleCall)cInModelsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOutModelsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOutModelsTransformationDefinitionParameterParserRuleCall_8_0 = (RuleCall)cOutModelsAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cOutModelsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cOutModelsTransformationDefinitionParameterParserRuleCall_9_1_0 = (RuleCall)cOutModelsAssignment_9_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cTransformationsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cTransformationsMemberLanguageTransformationDefinitionParserRuleCall_11_0 = (RuleCall)cTransformationsAssignment_11.eContents().get(0);
		
		//EclecticTransformationDefinition returns core::EclecticTransformationDefinition:
		//	"eclectic" name=ID "(" inModels+=TransformationDefinitionParameter ("," inModels+=TransformationDefinitionParameter)*
		//	")" "->" "(" outModels+=TransformationDefinitionParameter ("," outModels+=TransformationDefinitionParameter)* ")"
		//	transformations+=MemberLanguageTransformationDefinition+;
		public ParserRule getRule() { return rule; }

		//"eclectic" name=ID "(" inModels+=TransformationDefinitionParameter ("," inModels+=TransformationDefinitionParameter)*
		//")" "->" "(" outModels+=TransformationDefinitionParameter ("," outModels+=TransformationDefinitionParameter)* ")"
		//transformations+=MemberLanguageTransformationDefinition+
		public Group getGroup() { return cGroup; }

		//"eclectic"
		public Keyword getEclecticKeyword_0() { return cEclecticKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//inModels+=TransformationDefinitionParameter
		public Assignment getInModelsAssignment_3() { return cInModelsAssignment_3; }

		//TransformationDefinitionParameter
		public RuleCall getInModelsTransformationDefinitionParameterParserRuleCall_3_0() { return cInModelsTransformationDefinitionParameterParserRuleCall_3_0; }

		//("," inModels+=TransformationDefinitionParameter)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//inModels+=TransformationDefinitionParameter
		public Assignment getInModelsAssignment_4_1() { return cInModelsAssignment_4_1; }

		//TransformationDefinitionParameter
		public RuleCall getInModelsTransformationDefinitionParameterParserRuleCall_4_1_0() { return cInModelsTransformationDefinitionParameterParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_6() { return cHyphenMinusGreaterThanSignKeyword_6; }

		//"("
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }

		//outModels+=TransformationDefinitionParameter
		public Assignment getOutModelsAssignment_8() { return cOutModelsAssignment_8; }

		//TransformationDefinitionParameter
		public RuleCall getOutModelsTransformationDefinitionParameterParserRuleCall_8_0() { return cOutModelsTransformationDefinitionParameterParserRuleCall_8_0; }

		//("," outModels+=TransformationDefinitionParameter)*
		public Group getGroup_9() { return cGroup_9; }

		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }

		//outModels+=TransformationDefinitionParameter
		public Assignment getOutModelsAssignment_9_1() { return cOutModelsAssignment_9_1; }

		//TransformationDefinitionParameter
		public RuleCall getOutModelsTransformationDefinitionParameterParserRuleCall_9_1_0() { return cOutModelsTransformationDefinitionParameterParserRuleCall_9_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }

		//transformations+=MemberLanguageTransformationDefinition+
		public Assignment getTransformationsAssignment_11() { return cTransformationsAssignment_11; }

		//MemberLanguageTransformationDefinition
		public RuleCall getTransformationsMemberLanguageTransformationDefinitionParserRuleCall_11_0() { return cTransformationsMemberLanguageTransformationDefinitionParserRuleCall_11_0; }
	}

	public class MemberLanguageTransformationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MemberLanguageTransformationDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMappingTransformationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNavigationLibraryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cQoolTransformationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTaoTransformationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAttributionTransformationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPatternSpecificationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//MemberLanguageTransformationDefinition returns core::TransformationDefinition:
		//	MappingTransformation | NavigationLibrary | QoolTransformation | TaoTransformation | AttributionTransformation |
		//	PatternSpecification;
		public ParserRule getRule() { return rule; }

		//MappingTransformation | NavigationLibrary | QoolTransformation | TaoTransformation | AttributionTransformation |
		//PatternSpecification
		public Alternatives getAlternatives() { return cAlternatives; }

		//MappingTransformation
		public RuleCall getMappingTransformationParserRuleCall_0() { return cMappingTransformationParserRuleCall_0; }

		//NavigationLibrary
		public RuleCall getNavigationLibraryParserRuleCall_1() { return cNavigationLibraryParserRuleCall_1; }

		//QoolTransformation
		public RuleCall getQoolTransformationParserRuleCall_2() { return cQoolTransformationParserRuleCall_2; }

		//TaoTransformation
		public RuleCall getTaoTransformationParserRuleCall_3() { return cTaoTransformationParserRuleCall_3; }

		//AttributionTransformation
		public RuleCall getAttributionTransformationParserRuleCall_4() { return cAttributionTransformationParserRuleCall_4; }

		//PatternSpecification
		public RuleCall getPatternSpecificationParserRuleCall_5() { return cPatternSpecificationParserRuleCall_5; }
	}

	public class MappingTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMappingsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInModelsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInModelsTransformationDefinitionParameterParserRuleCall_3_0 = (RuleCall)cInModelsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOutModelsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOutModelsTransformationDefinitionParameterParserRuleCall_7_0 = (RuleCall)cOutModelsAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cAnnotationsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_9_0 = (RuleCall)cAnnotationsAssignment_9.eContents().get(0);
		private final Assignment cUsesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cUsesUsesStatementsParserRuleCall_10_0 = (RuleCall)cUsesAssignment_10.eContents().get(0);
		private final Assignment cRequiresAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cRequiresRequireDeclarationParserRuleCall_11_0 = (RuleCall)cRequiresAssignment_11.eContents().get(0);
		private final Assignment cDelegatesAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cDelegatesDelegateParserRuleCall_12_0 = (RuleCall)cDelegatesAssignment_12.eContents().get(0);
		private final Assignment cContextsAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cContextsContextParserRuleCall_13_0 = (RuleCall)cContextsAssignment_13.eContents().get(0);
		private final Keyword cEndKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		////
		//// Begin-of Mappings
		////
		//MappingTransformation returns mappings::MappingTransformation:
		//	"mappings" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
		//	//'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//	"(" inModels+=TransformationDefinitionParameter ")" "->" "(" outModels+=TransformationDefinitionParameter ")"
		//	annotations+=Annotation* uses+=UsesStatements* requires+=RequireDeclaration* delegates+=Delegate* contexts+=Context+
		//	"end";
		public ParserRule getRule() { return rule; }

		//"mappings" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
		////'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//"(" inModels+=TransformationDefinitionParameter ")" "->" "(" outModels+=TransformationDefinitionParameter ")"
		//annotations+=Annotation* uses+=UsesStatements* requires+=RequireDeclaration* delegates+=Delegate* contexts+=Context+
		//"end"
		public Group getGroup() { return cGroup; }

		//"mappings"
		public Keyword getMappingsKeyword_0() { return cMappingsKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//// '(' left=[core::TransformationDefinitionParameter|EString] ')'
		////'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//inModels+=TransformationDefinitionParameter
		public Assignment getInModelsAssignment_3() { return cInModelsAssignment_3; }

		//TransformationDefinitionParameter
		public RuleCall getInModelsTransformationDefinitionParameterParserRuleCall_3_0() { return cInModelsTransformationDefinitionParameterParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//outModels+=TransformationDefinitionParameter
		public Assignment getOutModelsAssignment_7() { return cOutModelsAssignment_7; }

		//TransformationDefinitionParameter
		public RuleCall getOutModelsTransformationDefinitionParameterParserRuleCall_7_0() { return cOutModelsTransformationDefinitionParameterParserRuleCall_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_9() { return cAnnotationsAssignment_9; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_9_0() { return cAnnotationsAnnotationParserRuleCall_9_0; }

		//uses+=UsesStatements*
		public Assignment getUsesAssignment_10() { return cUsesAssignment_10; }

		//UsesStatements
		public RuleCall getUsesUsesStatementsParserRuleCall_10_0() { return cUsesUsesStatementsParserRuleCall_10_0; }

		//requires+=RequireDeclaration*
		public Assignment getRequiresAssignment_11() { return cRequiresAssignment_11; }

		//RequireDeclaration
		public RuleCall getRequiresRequireDeclarationParserRuleCall_11_0() { return cRequiresRequireDeclarationParserRuleCall_11_0; }

		//delegates+=Delegate*
		public Assignment getDelegatesAssignment_12() { return cDelegatesAssignment_12; }

		//Delegate
		public RuleCall getDelegatesDelegateParserRuleCall_12_0() { return cDelegatesDelegateParserRuleCall_12_0; }

		//contexts+=Context+
		public Assignment getContextsAssignment_13() { return cContextsAssignment_13; }

		//Context
		public RuleCall getContextsContextParserRuleCall_13_0() { return cContextsContextParserRuleCall_13_0; }

		//"end"
		public Keyword getEndKeyword_14() { return cEndKeyword_14; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMetamodelModelAnnotationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOptimizationsAnnotationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// @common
		//Annotation returns core::Annotation:
		//	MetamodelModelAnnotation | OptimizationsAnnotation;
		public ParserRule getRule() { return rule; }

		//MetamodelModelAnnotation | OptimizationsAnnotation
		public Alternatives getAlternatives() { return cAlternatives; }

		//MetamodelModelAnnotation
		public RuleCall getMetamodelModelAnnotationParserRuleCall_0() { return cMetamodelModelAnnotationParserRuleCall_0; }

		//OptimizationsAnnotation
		public RuleCall getOptimizationsAnnotationParserRuleCall_1() { return cOptimizationsAnnotationParserRuleCall_1; }
	}

	public class OptimizationsAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OptimizationsAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptimizationsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEnabledAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cEnabledEnabledKeyword_2_0 = (Keyword)cEnabledAssignment_2.eContents().get(0);
		
		//OptimizationsAnnotation returns core::OptimizationsAnnotation:
		//	"optimizations" ":" enabled?="enabled";
		public ParserRule getRule() { return rule; }

		//"optimizations" ":" enabled?="enabled"
		public Group getGroup() { return cGroup; }

		//"optimizations"
		public Keyword getOptimizationsKeyword_0() { return cOptimizationsKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//enabled?="enabled"
		public Assignment getEnabledAssignment_2() { return cEnabledAssignment_2; }

		//"enabled"
		public Keyword getEnabledEnabledKeyword_2_0() { return cEnabledEnabledKeyword_2_0; }
	}

	public class MetamodelModelAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetamodelModelAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotatedElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAnnotatedElementRepresentModelCrossReference_0_0 = (CrossReference)cAnnotatedElementAssignment_0.eContents().get(0);
		private final RuleCall cAnnotatedElementRepresentModelIDTerminalRuleCall_0_0_1 = (RuleCall)cAnnotatedElementRepresentModelCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMetamodelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMetamodelSTRINGTerminalRuleCall_2_0 = (RuleCall)cMetamodelAssignment_2.eContents().get(0);
		
		//MetamodelModelAnnotation returns core::MetamodelModelAnnotation:
		//	annotatedElement=[core::RepresentModel] ":" metamodel=STRING;
		public ParserRule getRule() { return rule; }

		//annotatedElement=[core::RepresentModel] ":" metamodel=STRING
		public Group getGroup() { return cGroup; }

		//annotatedElement=[core::RepresentModel]
		public Assignment getAnnotatedElementAssignment_0() { return cAnnotatedElementAssignment_0; }

		//[core::RepresentModel]
		public CrossReference getAnnotatedElementRepresentModelCrossReference_0_0() { return cAnnotatedElementRepresentModelCrossReference_0_0; }

		//ID
		public RuleCall getAnnotatedElementRepresentModelIDTerminalRuleCall_0_0_1() { return cAnnotatedElementRepresentModelIDTerminalRuleCall_0_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//metamodel=STRING
		public Assignment getMetamodelAssignment_2() { return cMetamodelAssignment_2; }

		//STRING
		public RuleCall getMetamodelSTRINGTerminalRuleCall_2_0() { return cMetamodelSTRINGTerminalRuleCall_2_0; }
	}

	public class UsesStatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UsesStatements");
		private final RuleCall cUseDeclarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UsesStatements returns core::UseDeclaration: // TODO: Allow several declarations together
		//	UseDeclaration;
		public ParserRule getRule() { return rule; }

		//// TODO: Allow several declarations together
		//UseDeclaration
		public RuleCall getUseDeclarationParserRuleCall() { return cUseDeclarationParserRuleCall; }
	}

	public class UseDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UseDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModuleEStringParserRuleCall_1_0 = (RuleCall)cModuleAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAsEStringParserRuleCall_2_1_0 = (RuleCall)cAsAssignment_2_1.eContents().get(0);
		
		//UseDeclaration returns core::UseDeclaration:
		//	"uses" module=EString ("as" ^as=EString)?;
		public ParserRule getRule() { return rule; }

		//"uses" module=EString ("as" ^as=EString)?
		public Group getGroup() { return cGroup; }

		//"uses"
		public Keyword getUsesKeyword_0() { return cUsesKeyword_0; }

		//module=EString
		public Assignment getModuleAssignment_1() { return cModuleAssignment_1; }

		//EString
		public RuleCall getModuleEStringParserRuleCall_1_0() { return cModuleEStringParserRuleCall_1_0; }

		//("as" ^as=EString)?
		public Group getGroup_2() { return cGroup_2; }

		//"as"
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//^as=EString
		public Assignment getAsAssignment_2_1() { return cAsAssignment_2_1; }

		//EString
		public RuleCall getAsEStringParserRuleCall_2_1_0() { return cAsEStringParserRuleCall_2_1_0; }
	}

	public class RequireDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequireDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersRequireModelParameterParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParametersRequireModelParameterParserRuleCall_2_2_1_0 = (RuleCall)cParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefaultAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefaultEStringParserRuleCall_3_1_0 = (RuleCall)cDefaultAssignment_3_1.eContents().get(0);
		
		//RequireDeclaration returns core::RequireDeclaration:
		//	"require" name=EString ("(" parameters+=RequireModelParameter ("," parameters+=RequireModelParameter)* ")")? ("="
		//	default=EString)?;
		public ParserRule getRule() { return rule; }

		//"require" name=EString ("(" parameters+=RequireModelParameter ("," parameters+=RequireModelParameter)* ")")? ("="
		//default=EString)?
		public Group getGroup() { return cGroup; }

		//"require"
		public Keyword getRequireKeyword_0() { return cRequireKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//("(" parameters+=RequireModelParameter ("," parameters+=RequireModelParameter)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//parameters+=RequireModelParameter
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//RequireModelParameter
		public RuleCall getParametersRequireModelParameterParserRuleCall_2_1_0() { return cParametersRequireModelParameterParserRuleCall_2_1_0; }

		//("," parameters+=RequireModelParameter)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//parameters+=RequireModelParameter
		public Assignment getParametersAssignment_2_2_1() { return cParametersAssignment_2_2_1; }

		//RequireModelParameter
		public RuleCall getParametersRequireModelParameterParserRuleCall_2_2_1_0() { return cParametersRequireModelParameterParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//("=" default=EString)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//default=EString
		public Assignment getDefaultAssignment_3_1() { return cDefaultAssignment_3_1; }

		//EString
		public RuleCall getDefaultEStringParserRuleCall_3_1_0() { return cDefaultEStringParserRuleCall_3_1_0; }
	}

	public class RequireParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequireParameter");
		private final RuleCall cRequireModelParameterParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//RequireParameter returns core::RequireParameter:
		//	RequireModelParameter;
		public ParserRule getRule() { return rule; }

		//RequireModelParameter
		public RuleCall getRequireModelParameterParserRuleCall() { return cRequireModelParameterParserRuleCall; }
	}

	public class RequireModelParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequireModelParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cFormalParameterNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFormalParameterNameEStringParserRuleCall_0_0_0 = (RuleCall)cFormalParameterNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cModelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModelRepresentModelCrossReference_1_0 = (CrossReference)cModelAssignment_1.eContents().get(0);
		private final RuleCall cModelRepresentModelIDTerminalRuleCall_1_0_1 = (RuleCall)cModelRepresentModelCrossReference_1_0.eContents().get(1);
		
		//RequireModelParameter returns core::RequireModelParameter:
		//	(formalParameterName=EString "=")? model=[core::RepresentModel];
		public ParserRule getRule() { return rule; }

		//(formalParameterName=EString "=")? model=[core::RepresentModel]
		public Group getGroup() { return cGroup; }

		//(formalParameterName=EString "=")?
		public Group getGroup_0() { return cGroup_0; }

		//formalParameterName=EString
		public Assignment getFormalParameterNameAssignment_0_0() { return cFormalParameterNameAssignment_0_0; }

		//EString
		public RuleCall getFormalParameterNameEStringParserRuleCall_0_0_0() { return cFormalParameterNameEStringParserRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//model=[core::RepresentModel]
		public Assignment getModelAssignment_1() { return cModelAssignment_1; }

		//[core::RepresentModel]
		public CrossReference getModelRepresentModelCrossReference_1_0() { return cModelRepresentModelCrossReference_1_0; }

		//ID
		public RuleCall getModelRepresentModelIDTerminalRuleCall_1_0_1() { return cModelRepresentModelIDTerminalRuleCall_1_0_1; }
	}

	public class TransformationDefinitionParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransformationDefinitionParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransformationDefinitionParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TransformationDefinitionParameter returns core::TransformationDefinitionParameter:
		//	{core::TransformationDefinitionParameter} name=EString;
		public ParserRule getRule() { return rule; }

		//{core::TransformationDefinitionParameter} name=EString
		public Group getGroup() { return cGroup; }

		//{core::TransformationDefinitionParameter}
		public Action getTransformationDefinitionParameterAction_0() { return cTransformationDefinitionParameterAction_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class DelegateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Delegate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsTagParserRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Keyword cDelegateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLeftAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLeftMatchedElementParserRuleCall_3_0 = (RuleCall)cLeftAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLeftAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLeftMatchedElementParserRuleCall_4_1_0 = (RuleCall)cLeftAssignment_4_1.eContents().get(0);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cModuleAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final CrossReference cModuleUseDeclarationCrossReference_6_0_0 = (CrossReference)cModuleAssignment_6_0.eContents().get(0);
		private final RuleCall cModuleUseDeclarationIDTerminalRuleCall_6_0_0_1 = (RuleCall)cModuleUseDeclarationCrossReference_6_0_0.eContents().get(1);
		private final Assignment cIsExternalAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Keyword cIsExternalExclamationMarkKeyword_6_1_0 = (Keyword)cIsExternalAssignment_6_1.eContents().get(0);
		private final Assignment cLinkNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLinkNameEStringParserRuleCall_7_0 = (RuleCall)cLinkNameAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cFullStopKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cFeatureNameAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cFeatureNameEStringParserRuleCall_8_1_0 = (RuleCall)cFeatureNameAssignment_8_1.eContents().get(0);
		
		/// *
		//ClassUse returns core::ClassUse :
		//	model=[core::RepresentModel] "!" className=ID	
		//;
		// * / // Using Expressions as superlanguage makes that [a] does not work because of conflicts
		//// end-of-common
		//Delegate returns mappings::Delegate:
		//	tags+=Tag* "delegate" "from" left+=MatchedElement ("," left+=MatchedElement)* "to" (module=[core::UseDeclaration]
		//	isExternal?="!") linkName=EString ("." featureName=EString)?;
		public ParserRule getRule() { return rule; }

		//tags+=Tag* "delegate" "from" left+=MatchedElement ("," left+=MatchedElement)* "to" (module=[core::UseDeclaration]
		//isExternal?="!") linkName=EString ("." featureName=EString)?
		public Group getGroup() { return cGroup; }

		//tags+=Tag*
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }

		//Tag
		public RuleCall getTagsTagParserRuleCall_0_0() { return cTagsTagParserRuleCall_0_0; }

		//"delegate"
		public Keyword getDelegateKeyword_1() { return cDelegateKeyword_1; }

		//"from"
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }

		//left+=MatchedElement
		public Assignment getLeftAssignment_3() { return cLeftAssignment_3; }

		//MatchedElement
		public RuleCall getLeftMatchedElementParserRuleCall_3_0() { return cLeftMatchedElementParserRuleCall_3_0; }

		//("," left+=MatchedElement)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//left+=MatchedElement
		public Assignment getLeftAssignment_4_1() { return cLeftAssignment_4_1; }

		//MatchedElement
		public RuleCall getLeftMatchedElementParserRuleCall_4_1_0() { return cLeftMatchedElementParserRuleCall_4_1_0; }

		//"to"
		public Keyword getToKeyword_5() { return cToKeyword_5; }

		//module=[core::UseDeclaration] isExternal?="!"
		public Group getGroup_6() { return cGroup_6; }

		//module=[core::UseDeclaration]
		public Assignment getModuleAssignment_6_0() { return cModuleAssignment_6_0; }

		//[core::UseDeclaration]
		public CrossReference getModuleUseDeclarationCrossReference_6_0_0() { return cModuleUseDeclarationCrossReference_6_0_0; }

		//ID
		public RuleCall getModuleUseDeclarationIDTerminalRuleCall_6_0_0_1() { return cModuleUseDeclarationIDTerminalRuleCall_6_0_0_1; }

		//isExternal?="!"
		public Assignment getIsExternalAssignment_6_1() { return cIsExternalAssignment_6_1; }

		//"!"
		public Keyword getIsExternalExclamationMarkKeyword_6_1_0() { return cIsExternalExclamationMarkKeyword_6_1_0; }

		//linkName=EString
		public Assignment getLinkNameAssignment_7() { return cLinkNameAssignment_7; }

		//EString
		public RuleCall getLinkNameEStringParserRuleCall_7_0() { return cLinkNameEStringParserRuleCall_7_0; }

		//("." featureName=EString)?
		public Group getGroup_8() { return cGroup_8; }

		//"."
		public Keyword getFullStopKeyword_8_0() { return cFullStopKeyword_8_0; }

		//featureName=EString
		public Assignment getFeatureNameAssignment_8_1() { return cFeatureNameAssignment_8_1; }

		//EString
		public RuleCall getFeatureNameEStringParserRuleCall_8_1_0() { return cFeatureNameEStringParserRuleCall_8_1_0; }
	}

	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Context");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsTagParserRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftMatchedElementParserRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLeftAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLeftMatchedElementParserRuleCall_3_1_0 = (RuleCall)cLeftAssignment_3_1.eContents().get(0);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRightAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRightMatchedElementParserRuleCall_5_0 = (RuleCall)cRightAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cRightAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cRightMatchedElementParserRuleCall_6_1_0 = (RuleCall)cRightAssignment_6_1.eContents().get(0);
		private final Assignment cModifiersAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cModifiersC2CModifierParserRuleCall_7_0 = (RuleCall)cModifiersAssignment_7.eContents().get(0);
		private final Assignment cMappingsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final Alternatives cMappingsAlternatives_8_0 = (Alternatives)cMappingsAssignment_8.eContents().get(0);
		private final RuleCall cMappingsAttributeMappingParserRuleCall_8_0_0 = (RuleCall)cMappingsAlternatives_8_0.eContents().get(0);
		private final RuleCall cMappingsReference2ReferenceParserRuleCall_8_0_1 = (RuleCall)cMappingsAlternatives_8_0.eContents().get(1);
		private final Keyword cEndKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Context returns mappings::Context:
		//	tags+=Tag* "from" left+=MatchedElement ("," left+=MatchedElement)* "to" right+=MatchedElement (","
		//	right+=MatchedElement)* modifiers+=C2CModifier* // (mappings += (Attribute2Attribute | AttributeIsString | Reference2Reference) )*
		//	mappings+=(AttributeMapping | Reference2Reference)* "end";
		public ParserRule getRule() { return rule; }

		//tags+=Tag* "from" left+=MatchedElement ("," left+=MatchedElement)* "to" right+=MatchedElement (","
		//right+=MatchedElement)* modifiers+=C2CModifier* // (mappings += (Attribute2Attribute | AttributeIsString | Reference2Reference) )*
		//mappings+=(AttributeMapping | Reference2Reference)* "end"
		public Group getGroup() { return cGroup; }

		//tags+=Tag*
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }

		//Tag
		public RuleCall getTagsTagParserRuleCall_0_0() { return cTagsTagParserRuleCall_0_0; }

		//"from"
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }

		//left+=MatchedElement
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }

		//MatchedElement
		public RuleCall getLeftMatchedElementParserRuleCall_2_0() { return cLeftMatchedElementParserRuleCall_2_0; }

		//("," left+=MatchedElement)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//left+=MatchedElement
		public Assignment getLeftAssignment_3_1() { return cLeftAssignment_3_1; }

		//MatchedElement
		public RuleCall getLeftMatchedElementParserRuleCall_3_1_0() { return cLeftMatchedElementParserRuleCall_3_1_0; }

		//"to"
		public Keyword getToKeyword_4() { return cToKeyword_4; }

		//right+=MatchedElement
		public Assignment getRightAssignment_5() { return cRightAssignment_5; }

		//MatchedElement
		public RuleCall getRightMatchedElementParserRuleCall_5_0() { return cRightMatchedElementParserRuleCall_5_0; }

		//("," right+=MatchedElement)*
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//right+=MatchedElement
		public Assignment getRightAssignment_6_1() { return cRightAssignment_6_1; }

		//MatchedElement
		public RuleCall getRightMatchedElementParserRuleCall_6_1_0() { return cRightMatchedElementParserRuleCall_6_1_0; }

		//modifiers+=C2CModifier*
		public Assignment getModifiersAssignment_7() { return cModifiersAssignment_7; }

		//C2CModifier
		public RuleCall getModifiersC2CModifierParserRuleCall_7_0() { return cModifiersC2CModifierParserRuleCall_7_0; }

		//mappings+=(AttributeMapping | Reference2Reference)*
		public Assignment getMappingsAssignment_8() { return cMappingsAssignment_8; }

		//AttributeMapping | Reference2Reference
		public Alternatives getMappingsAlternatives_8_0() { return cMappingsAlternatives_8_0; }

		//AttributeMapping
		public RuleCall getMappingsAttributeMappingParserRuleCall_8_0_0() { return cMappingsAttributeMappingParserRuleCall_8_0_0; }

		//Reference2Reference
		public RuleCall getMappingsReference2ReferenceParserRuleCall_8_0_1() { return cMappingsReference2ReferenceParserRuleCall_8_0_1; }

		//"end"
		public Keyword getEndKeyword_9() { return cEndKeyword_9; }
	}

	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Tag returns mappings::Tag:
		//	"[" name=EString "]";
		public ParserRule getRule() { return rule; }

		//"[" name=EString "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class MatchedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MatchedElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cModelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModelRepresentModelCrossReference_1_0 = (CrossReference)cModelAssignment_1.eContents().get(0);
		private final RuleCall cModelRepresentModelIDTerminalRuleCall_1_0_1 = (RuleCall)cModelRepresentModelCrossReference_1_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClassNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassNameIDTerminalRuleCall_3_0 = (RuleCall)cClassNameAssignment_3.eContents().get(0);
		private final Assignment cAnnotationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnnotationsSingleAnnotationParserRuleCall_4_0 = (RuleCall)cAnnotationsAssignment_4.eContents().get(0);
		private final Assignment cStrictTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cStrictTypeExclamationMarkKeyword_5_0 = (Keyword)cStrictTypeAssignment_5.eContents().get(0);
		
		//MatchedElement returns mappings::MatchedElement:
		//	(name=ID ":")? model=[core::RepresentModel] "!" className=ID annotations+=SingleAnnotation? strictType?="!"?;
		public ParserRule getRule() { return rule; }

		//(name=ID ":")? model=[core::RepresentModel] "!" className=ID annotations+=SingleAnnotation? strictType?="!"?
		public Group getGroup() { return cGroup; }

		//(name=ID ":")?
		public Group getGroup_0() { return cGroup_0; }

		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//model=[core::RepresentModel]
		public Assignment getModelAssignment_1() { return cModelAssignment_1; }

		//[core::RepresentModel]
		public CrossReference getModelRepresentModelCrossReference_1_0() { return cModelRepresentModelCrossReference_1_0; }

		//ID
		public RuleCall getModelRepresentModelIDTerminalRuleCall_1_0_1() { return cModelRepresentModelIDTerminalRuleCall_1_0_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }

		//className=ID
		public Assignment getClassNameAssignment_3() { return cClassNameAssignment_3; }

		//ID
		public RuleCall getClassNameIDTerminalRuleCall_3_0() { return cClassNameIDTerminalRuleCall_3_0; }

		//annotations+=SingleAnnotation?
		public Assignment getAnnotationsAssignment_4() { return cAnnotationsAssignment_4; }

		//SingleAnnotation
		public RuleCall getAnnotationsSingleAnnotationParserRuleCall_4_0() { return cAnnotationsSingleAnnotationParserRuleCall_4_0; }

		//strictType?="!"?
		public Assignment getStrictTypeAssignment_5() { return cStrictTypeAssignment_5; }

		//"!"
		public Keyword getStrictTypeExclamationMarkKeyword_5_0() { return cStrictTypeExclamationMarkKeyword_5_0; }
	}

	public class SingleAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleAnnotation");
		private final RuleCall cPotencyAnnotationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SingleAnnotation returns core::SingleAnnotation:
		//	PotencyAnnotation;
		public ParserRule getRule() { return rule; }

		//PotencyAnnotation
		public RuleCall getPotencyAnnotationParserRuleCall() { return cPotencyAnnotationParserRuleCall; }
	}

	public class PotencyAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PotencyAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//// copied from expressions
		//PotencyAnnotation returns core::PotencyAnnotation:
		//	("@" | "^") value=INT;
		public ParserRule getRule() { return rule; }

		//("@" | "^") value=INT
		public Group getGroup() { return cGroup; }

		//"@" | "^"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"@"
		public Keyword getCommercialAtKeyword_0_0() { return cCommercialAtKeyword_0_0; }

		//"^"
		public Keyword getCircumflexAccentKeyword_0_1() { return cCircumflexAccentKeyword_0_1; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}

	public class C2CModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "C2CModifier");
		private final RuleCall cLinkedByParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//C2CModifier returns mappings::C2CModifier:
		//	LinkedBy;
		public ParserRule getRule() { return rule; }

		//LinkedBy
		public RuleCall getLinkedByParserRuleCall() { return cLinkedByParserRuleCall; }
	}

	public class LinkedByElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LinkedBy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeAttributeRefParserRuleCall_1_0 = (RuleCall)cAttributeAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLinkedElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cLinkedElementMatchedElementCrossReference_3_0 = (CrossReference)cLinkedElementAssignment_3.eContents().get(0);
		private final RuleCall cLinkedElementMatchedElementIDTerminalRuleCall_3_0_1 = (RuleCall)cLinkedElementMatchedElementCrossReference_3_0.eContents().get(1);
		
		//// linking cd.originalCompilationUnit = cu
		//LinkedBy returns mappings::LinkedBy:
		//	"linking" attribute=AttributeRef "=" linkedElement=[mappings::MatchedElement];
		public ParserRule getRule() { return rule; }

		//"linking" attribute=AttributeRef "=" linkedElement=[mappings::MatchedElement]
		public Group getGroup() { return cGroup; }

		//"linking"
		public Keyword getLinkingKeyword_0() { return cLinkingKeyword_0; }

		//attribute=AttributeRef
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }

		//AttributeRef
		public RuleCall getAttributeAttributeRefParserRuleCall_1_0() { return cAttributeAttributeRefParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//linkedElement=[mappings::MatchedElement]
		public Assignment getLinkedElementAssignment_3() { return cLinkedElementAssignment_3; }

		//[mappings::MatchedElement]
		public CrossReference getLinkedElementMatchedElementCrossReference_3_0() { return cLinkedElementMatchedElementCrossReference_3_0; }

		//ID
		public RuleCall getLinkedElementMatchedElementIDTerminalRuleCall_3_0_1() { return cLinkedElementMatchedElementIDTerminalRuleCall_3_0_1; }
	}

	public class AttributeMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftAttributeRefParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLeftAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLeftAttributeRefParserRuleCall_1_1_0 = (RuleCall)cLeftAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightPartAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightPartAttributeRightPartParserRuleCall_3_0 = (RuleCall)cRightPartAssignment_3.eContents().get(0);
		
		//AttributeMapping returns mappings::AttributeMapping:
		//	left+=AttributeRef ("," left+=AttributeRef)* "=" rightPart=AttributeRightPart;
		public ParserRule getRule() { return rule; }

		//left+=AttributeRef ("," left+=AttributeRef)* "=" rightPart=AttributeRightPart
		public Group getGroup() { return cGroup; }

		//left+=AttributeRef
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//AttributeRef
		public RuleCall getLeftAttributeRefParserRuleCall_0_0() { return cLeftAttributeRefParserRuleCall_0_0; }

		//("," left+=AttributeRef)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//left+=AttributeRef
		public Assignment getLeftAssignment_1_1() { return cLeftAssignment_1_1; }

		//AttributeRef
		public RuleCall getLeftAttributeRefParserRuleCall_1_1_0() { return cLeftAttributeRefParserRuleCall_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//rightPart=AttributeRightPart
		public Assignment getRightPartAssignment_3() { return cRightPartAssignment_3; }

		//AttributeRightPart
		public RuleCall getRightPartAttributeRightPartParserRuleCall_3_0() { return cRightPartAttributeRightPartParserRuleCall_3_0; }
	}

	public class AttributeRightPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeRightPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeIsStringParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeIsBooleanParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAttributeIsDoubleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAttributeIsIntegerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAttribute2AttributeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAttributeIsResolveLinkParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//AttributeRightPart returns mappings::AttributeRightPart:
		//	AttributeIsString | AttributeIsBoolean | AttributeIsDouble | AttributeIsInteger | Attribute2Attribute |
		//	AttributeIsResolveLink;
		public ParserRule getRule() { return rule; }

		//AttributeIsString | AttributeIsBoolean | AttributeIsDouble | AttributeIsInteger | Attribute2Attribute |
		//AttributeIsResolveLink
		public Alternatives getAlternatives() { return cAlternatives; }

		//AttributeIsString
		public RuleCall getAttributeIsStringParserRuleCall_0() { return cAttributeIsStringParserRuleCall_0; }

		//AttributeIsBoolean
		public RuleCall getAttributeIsBooleanParserRuleCall_1() { return cAttributeIsBooleanParserRuleCall_1; }

		//AttributeIsDouble
		public RuleCall getAttributeIsDoubleParserRuleCall_2() { return cAttributeIsDoubleParserRuleCall_2; }

		//AttributeIsInteger
		public RuleCall getAttributeIsIntegerParserRuleCall_3() { return cAttributeIsIntegerParserRuleCall_3; }

		//Attribute2Attribute
		public RuleCall getAttribute2AttributeParserRuleCall_4() { return cAttribute2AttributeParserRuleCall_4; }

		//AttributeIsResolveLink
		public RuleCall getAttributeIsResolveLinkParserRuleCall_5() { return cAttributeIsResolveLinkParserRuleCall_5; }
	}

	public class Attribute2AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute2Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRightAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRightAttributeRefParserRuleCall_0_0 = (RuleCall)cRightAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAttributeRefParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		private final Assignment cConverterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConverterConverterParserRuleCall_2_0 = (RuleCall)cConverterAssignment_2.eContents().get(0);
		
		//Attribute2Attribute returns mappings::Attribute2Attribute:
		//	right+=AttributeRef ("," right+=AttributeRef)* converter=Converter?;
		public ParserRule getRule() { return rule; }

		//right+=AttributeRef ("," right+=AttributeRef)* converter=Converter?
		public Group getGroup() { return cGroup; }

		//right+=AttributeRef
		public Assignment getRightAssignment_0() { return cRightAssignment_0; }

		//AttributeRef
		public RuleCall getRightAttributeRefParserRuleCall_0_0() { return cRightAttributeRefParserRuleCall_0_0; }

		//("," right+=AttributeRef)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//right+=AttributeRef
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AttributeRef
		public RuleCall getRightAttributeRefParserRuleCall_1_1_0() { return cRightAttributeRefParserRuleCall_1_1_0; }

		//converter=Converter?
		public Assignment getConverterAssignment_2() { return cConverterAssignment_2; }

		//Converter
		public RuleCall getConverterConverterParserRuleCall_2_0() { return cConverterConverterParserRuleCall_2_0; }
	}

	public class AttributeIsStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeIsString");
		private final Assignment cStrValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStrValueStrictStringParserRuleCall_0 = (RuleCall)cStrValueAssignment.eContents().get(0);
		
		//AttributeIsString returns mappings::AttributeIsString:
		//	strValue=StrictString;
		public ParserRule getRule() { return rule; }

		//strValue=StrictString
		public Assignment getStrValueAssignment() { return cStrValueAssignment; }

		//StrictString
		public RuleCall getStrValueStrictStringParserRuleCall_0() { return cStrValueStrictStringParserRuleCall_0; }
	}

	public class AttributeIsBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeIsBoolean");
		private final Assignment cBoolValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBoolValueEBooleanParserRuleCall_0 = (RuleCall)cBoolValueAssignment.eContents().get(0);
		
		//AttributeIsBoolean returns mappings::AttributeIsBoolean:
		//	boolValue=EBoolean;
		public ParserRule getRule() { return rule; }

		//boolValue=EBoolean
		public Assignment getBoolValueAssignment() { return cBoolValueAssignment; }

		//EBoolean
		public RuleCall getBoolValueEBooleanParserRuleCall_0() { return cBoolValueEBooleanParserRuleCall_0; }
	}

	public class AttributeIsDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeIsDouble");
		private final Assignment cDoubleValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDoubleValueEDoubleParserRuleCall_0 = (RuleCall)cDoubleValueAssignment.eContents().get(0);
		
		//AttributeIsDouble returns mappings::AttributeIsDouble:
		//	doubleValue=EDouble;
		public ParserRule getRule() { return rule; }

		//doubleValue=EDouble
		public Assignment getDoubleValueAssignment() { return cDoubleValueAssignment; }

		//EDouble
		public RuleCall getDoubleValueEDoubleParserRuleCall_0() { return cDoubleValueEDoubleParserRuleCall_0; }
	}

	public class AttributeIsIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeIsInteger");
		private final Assignment cIntValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIntValueEIntParserRuleCall_0 = (RuleCall)cIntValueAssignment.eContents().get(0);
		
		//AttributeIsInteger returns mappings::AttributeIsInteger:
		//	intValue=EInt;
		public ParserRule getRule() { return rule; }

		//intValue=EInt
		public Assignment getIntValueAssignment() { return cIntValueAssignment; }

		//EInt
		public RuleCall getIntValueEIntParserRuleCall_0() { return cIntValueEIntParserRuleCall_0; }
	}

	public class AttributeIsResolveLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeIsResolveLink");
		private final Assignment cResolveLinkAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cResolveLinkResolveLinkInMappingParserRuleCall_0 = (RuleCall)cResolveLinkAssignment.eContents().get(0);
		
		//AttributeIsResolveLink returns mappings::AttributeIsResolveLink:
		//	resolveLink=ResolveLinkInMapping;
		public ParserRule getRule() { return rule; }

		//resolveLink=ResolveLinkInMapping
		public Assignment getResolveLinkAssignment() { return cResolveLinkAssignment; }

		//ResolveLinkInMapping
		public RuleCall getResolveLinkResolveLinkInMappingParserRuleCall_0() { return cResolveLinkResolveLinkInMappingParserRuleCall_0; }
	}

	public class ResolveLinkInMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResolveLinkInMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModuleAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cModuleUseDeclarationCrossReference_0_0 = (CrossReference)cModuleAssignment_0.eContents().get(0);
		private final RuleCall cModuleUseDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cModuleUseDeclarationCrossReference_0_0.eContents().get(1);
		private final Assignment cIsExternalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsExternalExclamationMarkKeyword_1_0 = (Keyword)cIsExternalAssignment_1.eContents().get(0);
		private final Assignment cLinkNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLinkNameEStringParserRuleCall_2_0 = (RuleCall)cLinkNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFullStopKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFeatureNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFeatureNameEStringParserRuleCall_3_1_0 = (RuleCall)cFeatureNameAssignment_3_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExprResolveLinkInMappingVarRefParserRuleCall_5_0 = (RuleCall)cExprAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ResolveLinkInMapping returns core::ResolveLink:
		//	module=[core::UseDeclaration] isExternal?="!" linkName=EString ("." featureName=EString)? "["
		//	expr=ResolveLinkInMappingVarRef "]";
		public ParserRule getRule() { return rule; }

		//module=[core::UseDeclaration] isExternal?="!" linkName=EString ("." featureName=EString)? "["
		//expr=ResolveLinkInMappingVarRef "]"
		public Group getGroup() { return cGroup; }

		//module=[core::UseDeclaration]
		public Assignment getModuleAssignment_0() { return cModuleAssignment_0; }

		//[core::UseDeclaration]
		public CrossReference getModuleUseDeclarationCrossReference_0_0() { return cModuleUseDeclarationCrossReference_0_0; }

		//ID
		public RuleCall getModuleUseDeclarationIDTerminalRuleCall_0_0_1() { return cModuleUseDeclarationIDTerminalRuleCall_0_0_1; }

		//isExternal?="!"
		public Assignment getIsExternalAssignment_1() { return cIsExternalAssignment_1; }

		//"!"
		public Keyword getIsExternalExclamationMarkKeyword_1_0() { return cIsExternalExclamationMarkKeyword_1_0; }

		//linkName=EString
		public Assignment getLinkNameAssignment_2() { return cLinkNameAssignment_2; }

		//EString
		public RuleCall getLinkNameEStringParserRuleCall_2_0() { return cLinkNameEStringParserRuleCall_2_0; }

		//("." featureName=EString)?
		public Group getGroup_3() { return cGroup_3; }

		//"."
		public Keyword getFullStopKeyword_3_0() { return cFullStopKeyword_3_0; }

		//featureName=EString
		public Assignment getFeatureNameAssignment_3_1() { return cFeatureNameAssignment_3_1; }

		//EString
		public RuleCall getFeatureNameEStringParserRuleCall_3_1_0() { return cFeatureNameEStringParserRuleCall_3_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//expr=ResolveLinkInMappingVarRef
		public Assignment getExprAssignment_5() { return cExprAssignment_5; }

		//ResolveLinkInMappingVarRef
		public RuleCall getExprResolveLinkInMappingVarRefParserRuleCall_5_0() { return cExprResolveLinkInMappingVarRefParserRuleCall_5_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}

	public class ResolveLinkInMappingVarRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResolveLinkInMappingVarRef");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_0 = (CrossReference)cVariableAssignment.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_0_1 = (RuleCall)cVariableVariableCrossReference_0.eContents().get(1);
		
		//ResolveLinkInMappingVarRef returns core::VariableReference:
		//	variable=[core::Variable];
		public ParserRule getRule() { return rule; }

		//variable=[core::Variable]
		public Assignment getVariableAssignment() { return cVariableAssignment; }

		//[core::Variable]
		public CrossReference getVariableVariableCrossReference_0() { return cVariableVariableCrossReference_0; }

		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_0_1() { return cVariableVariableIDTerminalRuleCall_0_1; }
	}

	public class AttributeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cReferredElementAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cReferredElementMatchedElementCrossReference_0_0_0 = (CrossReference)cReferredElementAssignment_0_0.eContents().get(0);
		private final RuleCall cReferredElementMatchedElementIDTerminalRuleCall_0_0_0_1 = (RuleCall)cReferredElementMatchedElementCrossReference_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFeatureNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatureNameEStringParserRuleCall_1_0 = (RuleCall)cFeatureNameAssignment_1.eContents().get(0);
		private final Assignment cMultivaluedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cMultivaluedAsteriskKeyword_2_0 = (Keyword)cMultivaluedAssignment_2.eContents().get(0);
		
		//AttributeRef returns mappings::AttributeRef:
		//	(referredElement=[mappings::MatchedElement] ".")? featureName=EString multivalued?="*"?;
		public ParserRule getRule() { return rule; }

		//(referredElement=[mappings::MatchedElement] ".")? featureName=EString multivalued?="*"?
		public Group getGroup() { return cGroup; }

		//(referredElement=[mappings::MatchedElement] ".")?
		public Group getGroup_0() { return cGroup_0; }

		//referredElement=[mappings::MatchedElement]
		public Assignment getReferredElementAssignment_0_0() { return cReferredElementAssignment_0_0; }

		//[mappings::MatchedElement]
		public CrossReference getReferredElementMatchedElementCrossReference_0_0_0() { return cReferredElementMatchedElementCrossReference_0_0_0; }

		//ID
		public RuleCall getReferredElementMatchedElementIDTerminalRuleCall_0_0_0_1() { return cReferredElementMatchedElementIDTerminalRuleCall_0_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//featureName=EString
		public Assignment getFeatureNameAssignment_1() { return cFeatureNameAssignment_1; }

		//EString
		public RuleCall getFeatureNameEStringParserRuleCall_1_0() { return cFeatureNameEStringParserRuleCall_1_0; }

		//multivalued?="*"?
		public Assignment getMultivaluedAssignment_2() { return cMultivaluedAssignment_2; }

		//"*"
		public Keyword getMultivaluedAsteriskKeyword_2_0() { return cMultivaluedAsteriskKeyword_2_0; }
	}

	public class Reference2ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference2Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftReferenceRefParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLeftAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLeftReferenceRefParserRuleCall_1_1_0 = (RuleCall)cLeftAssignment_1_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightReferenceRefParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRightAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRightReferenceRefParserRuleCall_4_1_0 = (RuleCall)cRightAssignment_4_1.eContents().get(0);
		private final Assignment cConverterAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConverterConverterParserRuleCall_5_0 = (RuleCall)cConverterAssignment_5.eContents().get(0);
		
		//Reference2Reference returns mappings::Reference2Reference:
		//	left+=ReferenceRef ("," left+=ReferenceRef)* "<-" right+=ReferenceRef ("," right+=ReferenceRef)* converter=Converter?;
		public ParserRule getRule() { return rule; }

		//left+=ReferenceRef ("," left+=ReferenceRef)* "<-" right+=ReferenceRef ("," right+=ReferenceRef)* converter=Converter?
		public Group getGroup() { return cGroup; }

		//left+=ReferenceRef
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//ReferenceRef
		public RuleCall getLeftReferenceRefParserRuleCall_0_0() { return cLeftReferenceRefParserRuleCall_0_0; }

		//("," left+=ReferenceRef)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//left+=ReferenceRef
		public Assignment getLeftAssignment_1_1() { return cLeftAssignment_1_1; }

		//ReferenceRef
		public RuleCall getLeftReferenceRefParserRuleCall_1_1_0() { return cLeftReferenceRefParserRuleCall_1_1_0; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_2() { return cLessThanSignHyphenMinusKeyword_2; }

		//right+=ReferenceRef
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }

		//ReferenceRef
		public RuleCall getRightReferenceRefParserRuleCall_3_0() { return cRightReferenceRefParserRuleCall_3_0; }

		//("," right+=ReferenceRef)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//right+=ReferenceRef
		public Assignment getRightAssignment_4_1() { return cRightAssignment_4_1; }

		//ReferenceRef
		public RuleCall getRightReferenceRefParserRuleCall_4_1_0() { return cRightReferenceRefParserRuleCall_4_1_0; }

		//converter=Converter?
		public Assignment getConverterAssignment_5() { return cConverterAssignment_5; }

		//Converter
		public RuleCall getConverterConverterParserRuleCall_5_0() { return cConverterConverterParserRuleCall_5_0; }
	}

	public class ReferenceRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cReferredElementAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cReferredElementMatchedElementCrossReference_0_0_0 = (CrossReference)cReferredElementAssignment_0_0.eContents().get(0);
		private final RuleCall cReferredElementMatchedElementIDTerminalRuleCall_0_0_0_1 = (RuleCall)cReferredElementMatchedElementCrossReference_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFeatureNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatureNameEStringParserRuleCall_1_0 = (RuleCall)cFeatureNameAssignment_1.eContents().get(0);
		private final Assignment cMultivaluedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cMultivaluedAsteriskKeyword_2_0 = (Keyword)cMultivaluedAssignment_2.eContents().get(0);
		
		//ReferenceRef returns mappings::ReferenceRef:
		//	(referredElement=[mappings::MatchedElement] ".")? featureName=EString multivalued?="*"?;
		public ParserRule getRule() { return rule; }

		//(referredElement=[mappings::MatchedElement] ".")? featureName=EString multivalued?="*"?
		public Group getGroup() { return cGroup; }

		//(referredElement=[mappings::MatchedElement] ".")?
		public Group getGroup_0() { return cGroup_0; }

		//referredElement=[mappings::MatchedElement]
		public Assignment getReferredElementAssignment_0_0() { return cReferredElementAssignment_0_0; }

		//[mappings::MatchedElement]
		public CrossReference getReferredElementMatchedElementCrossReference_0_0_0() { return cReferredElementMatchedElementCrossReference_0_0_0; }

		//ID
		public RuleCall getReferredElementMatchedElementIDTerminalRuleCall_0_0_0_1() { return cReferredElementMatchedElementIDTerminalRuleCall_0_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//featureName=EString
		public Assignment getFeatureNameAssignment_1() { return cFeatureNameAssignment_1; }

		//EString
		public RuleCall getFeatureNameEStringParserRuleCall_1_0() { return cFeatureNameEStringParserRuleCall_1_0; }

		//multivalued?="*"?
		public Assignment getMultivaluedAssignment_2() { return cMultivaluedAssignment_2; }

		//"*"
		public Keyword getMultivaluedAsteriskKeyword_2_0() { return cMultivaluedAsteriskKeyword_2_0; }
	}

	public class ConverterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Converter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConvertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cModuleAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cModuleUseDeclarationCrossReference_1_0_0 = (CrossReference)cModuleAssignment_1_0.eContents().get(0);
		private final RuleCall cModuleUseDeclarationIDTerminalRuleCall_1_0_0_1 = (RuleCall)cModuleUseDeclarationCrossReference_1_0_0.eContents().get(1);
		private final Assignment cIsExternalAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cIsExternalFullStopKeyword_1_1_0 = (Keyword)cIsExternalAssignment_1_1.eContents().get(0);
		private final Assignment cConverterNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConverterNameEStringParserRuleCall_2_0 = (RuleCall)cConverterNameAssignment_2.eContents().get(0);
		
		//Converter returns mappings::Converter:
		//	"convert" (module=[core::UseDeclaration] isExternal?=".")? converterName=EString;
		public ParserRule getRule() { return rule; }

		//"convert" (module=[core::UseDeclaration] isExternal?=".")? converterName=EString
		public Group getGroup() { return cGroup; }

		//"convert"
		public Keyword getConvertKeyword_0() { return cConvertKeyword_0; }

		//(module=[core::UseDeclaration] isExternal?=".")?
		public Group getGroup_1() { return cGroup_1; }

		//module=[core::UseDeclaration]
		public Assignment getModuleAssignment_1_0() { return cModuleAssignment_1_0; }

		//[core::UseDeclaration]
		public CrossReference getModuleUseDeclarationCrossReference_1_0_0() { return cModuleUseDeclarationCrossReference_1_0_0; }

		//ID
		public RuleCall getModuleUseDeclarationIDTerminalRuleCall_1_0_0_1() { return cModuleUseDeclarationIDTerminalRuleCall_1_0_0_1; }

		//isExternal?="."
		public Assignment getIsExternalAssignment_1_1() { return cIsExternalAssignment_1_1; }

		//"."
		public Keyword getIsExternalFullStopKeyword_1_1_0() { return cIsExternalFullStopKeyword_1_1_0; }

		//converterName=EString
		public Assignment getConverterNameAssignment_2() { return cConverterNameAssignment_2; }

		//EString
		public RuleCall getConverterNameEStringParserRuleCall_2_0() { return cConverterNameEStringParserRuleCall_2_0; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Not sure if this has be factorized somewhere...
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//EDouble returns ecore::EDouble:
		//	INT "." INT;
		public ParserRule getRule() { return rule; }

		//INT "." INT
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class StrictStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StrictString");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//StrictString returns ecore::EString:
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class PatternSpecificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PatternSpecification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPatternsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInModelsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInModelsTransformationDefinitionParameterParserRuleCall_3_0 = (RuleCall)cInModelsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cPatternsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPatternsPatternParserRuleCall_5_0 = (RuleCall)cPatternsAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///// 
		///// Begin-of PATTERNS
		/////
		//PatternSpecification returns pat::PatternSpecification:
		//	"patterns" name=EString "(" inModels+=TransformationDefinitionParameter ")" patterns+=Pattern* "end";
		public ParserRule getRule() { return rule; }

		//"patterns" name=EString "(" inModels+=TransformationDefinitionParameter ")" patterns+=Pattern* "end"
		public Group getGroup() { return cGroup; }

		//"patterns"
		public Keyword getPatternsKeyword_0() { return cPatternsKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//inModels+=TransformationDefinitionParameter
		public Assignment getInModelsAssignment_3() { return cInModelsAssignment_3; }

		//TransformationDefinitionParameter
		public RuleCall getInModelsTransformationDefinitionParameterParserRuleCall_3_0() { return cInModelsTransformationDefinitionParameterParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//patterns+=Pattern*
		public Assignment getPatternsAssignment_5() { return cPatternsAssignment_5; }

		//Pattern
		public RuleCall getPatternsPatternParserRuleCall_5_0() { return cPatternsPatternParserRuleCall_5_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}

	public class PatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOutputVariablesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOutputVariablesPOutputVariableParserRuleCall_4_0 = (RuleCall)cOutputVariablesAssignment_4.eContents().get(0);
		private final Assignment cOutputVariablesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOutputVariablesPOutputVariableParserRuleCall_5_0 = (RuleCall)cOutputVariablesAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cObjectsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cObjectsPObjectParserRuleCall_7_0 = (RuleCall)cObjectsAssignment_7.eContents().get(0);
		private final Keyword cEndKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//// TODO: Add parameters to the pattern: // ('(' formalParameters+=MethodParameter (',' formalParameters+=MethodParameter)* ')')?
		//Pattern returns pat::Pattern:
		//	"def" name=EString "->" "(" outputVariables+=POutputVariable outputVariables+=POutputVariable* ")" objects+=PObject+
		//	"end";
		public ParserRule getRule() { return rule; }

		//"def" name=EString "->" "(" outputVariables+=POutputVariable outputVariables+=POutputVariable* ")" objects+=PObject+
		//"end"
		public Group getGroup() { return cGroup; }

		//"def"
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//outputVariables+=POutputVariable
		public Assignment getOutputVariablesAssignment_4() { return cOutputVariablesAssignment_4; }

		//POutputVariable
		public RuleCall getOutputVariablesPOutputVariableParserRuleCall_4_0() { return cOutputVariablesPOutputVariableParserRuleCall_4_0; }

		//outputVariables+=POutputVariable*
		public Assignment getOutputVariablesAssignment_5() { return cOutputVariablesAssignment_5; }

		//POutputVariable
		public RuleCall getOutputVariablesPOutputVariableParserRuleCall_5_0() { return cOutputVariablesPOutputVariableParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//objects+=PObject+
		public Assignment getObjectsAssignment_7() { return cObjectsAssignment_7; }

		//PObject
		public RuleCall getObjectsPObjectParserRuleCall_7_0() { return cObjectsPObjectParserRuleCall_7_0; }

		//"end"
		public Keyword getEndKeyword_8() { return cEndKeyword_8; }
	}

	public class POutputVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "POutputVariable");
		private final Assignment cObjectAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cObjectPObjectCrossReference_0 = (CrossReference)cObjectAssignment.eContents().get(0);
		private final RuleCall cObjectPObjectIDTerminalRuleCall_0_1 = (RuleCall)cObjectPObjectCrossReference_0.eContents().get(1);
		
		//POutputVariable returns pat::POutputVariable:
		//	object=[pat::PObject];
		public ParserRule getRule() { return rule; }

		//object=[pat::PObject]
		public Assignment getObjectAssignment() { return cObjectAssignment; }

		//[pat::PObject]
		public CrossReference getObjectPObjectCrossReference_0() { return cObjectPObjectCrossReference_0; }

		//ID
		public RuleCall getObjectPObjectIDTerminalRuleCall_0_1() { return cObjectPObjectIDTerminalRuleCall_0_1; }
	}

	public class PObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeClassUseParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cFeaturesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cFeaturesPFeatureParserRuleCall_4_0_0 = (RuleCall)cFeaturesAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cFeaturesAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cFeaturesPFeatureParserRuleCall_4_1_1_0 = (RuleCall)cFeaturesAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PObject returns pat::PObject:
		//	name=ID ":" type=ClassUse "{" (features+=PFeature ("," features+=PFeature)*)? "}";
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=ClassUse "{" (features+=PFeature ("," features+=PFeature)*)? "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=ClassUse
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//ClassUse
		public RuleCall getTypeClassUseParserRuleCall_2_0() { return cTypeClassUseParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(features+=PFeature ("," features+=PFeature)*)?
		public Group getGroup_4() { return cGroup_4; }

		//features+=PFeature
		public Assignment getFeaturesAssignment_4_0() { return cFeaturesAssignment_4_0; }

		//PFeature
		public RuleCall getFeaturesPFeatureParserRuleCall_4_0_0() { return cFeaturesPFeatureParserRuleCall_4_0_0; }

		//("," features+=PFeature)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//features+=PFeature
		public Assignment getFeaturesAssignment_4_1_1() { return cFeaturesAssignment_4_1_1; }

		//PFeature
		public RuleCall getFeaturesPFeatureParserRuleCall_4_1_1_0() { return cFeaturesPFeatureParserRuleCall_4_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class PFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPAttributeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PFeature returns pat::PFeature:
		//	PAttribute | PReference;
		public ParserRule getRule() { return rule; }

		//PAttribute | PReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//PAttribute
		public RuleCall getPAttributeParserRuleCall_0() { return cPAttributeParserRuleCall_0; }

		//PReference
		public RuleCall getPReferenceParserRuleCall_1() { return cPReferenceParserRuleCall_1; }
	}

	public class PReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuePObjectParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//PReference returns pat::PReference:
		//	name=ID "=" value+=PObject;
		public ParserRule getRule() { return rule; }

		//name=ID "=" value+=PObject
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value+=PObject
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//PObject
		public RuleCall getValuePObjectParserRuleCall_2_0() { return cValuePObjectParserRuleCall_2_0; }
	}

	public class PAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//PAttribute returns pat::PAttribute:
		//	name=ID "=" value=Expression;
		public ParserRule getRule() { return rule; }

		//name=ID "=" value=Expression
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}

	public class NavigationLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NavigationLibrary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNavigationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInModelsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInModelsTransformationDefinitionParameterParserRuleCall_3_0 = (RuleCall)cInModelsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMethodsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMethodsMethodDefinitionParserRuleCall_5_0 = (RuleCall)cMethodsAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		///// 
		///// End-of PATTERNS
		/////
		/////
		///// Begin-of Methods / Imperative
		/////
		//NavigationLibrary returns imperative::ImperativeTransformation:
		//	"navigation" name=EString "(" inModels+=TransformationDefinitionParameter ")" methods+=MethodDefinition* "end";
		public ParserRule getRule() { return rule; }

		//"navigation" name=EString "(" inModels+=TransformationDefinitionParameter ")" methods+=MethodDefinition* "end"
		public Group getGroup() { return cGroup; }

		//"navigation"
		public Keyword getNavigationKeyword_0() { return cNavigationKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//inModels+=TransformationDefinitionParameter
		public Assignment getInModelsAssignment_3() { return cInModelsAssignment_3; }

		//TransformationDefinitionParameter
		public RuleCall getInModelsTransformationDefinitionParameterParserRuleCall_3_0() { return cInModelsTransformationDefinitionParameterParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//methods+=MethodDefinition*
		public Assignment getMethodsAssignment_5() { return cMethodsAssignment_5; }

		//MethodDefinition
		public RuleCall getMethodsMethodDefinitionParserRuleCall_5_0() { return cMethodsMethodDefinitionParserRuleCall_5_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}

	public class MethodDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeClassUseParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFormalParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFormalParametersMethodParameterParserRuleCall_4_1_0 = (RuleCall)cFormalParametersAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cFormalParametersAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cFormalParametersMethodParameterParserRuleCall_4_2_1_0 = (RuleCall)cFormalParametersAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//MethodDefinition returns imperative::MethodDefinition:
		//	"def" type=ClassUse "." name=EString ("(" formalParameters+=MethodParameter ("," formalParameters+=MethodParameter)*
		//	")")? statements+=Statement+ "end";
		public ParserRule getRule() { return rule; }

		//"def" type=ClassUse "." name=EString ("(" formalParameters+=MethodParameter ("," formalParameters+=MethodParameter)*
		//")")? statements+=Statement+ "end"
		public Group getGroup() { return cGroup; }

		//"def"
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }

		//type=ClassUse
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ClassUse
		public RuleCall getTypeClassUseParserRuleCall_1_0() { return cTypeClassUseParserRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }

		//("(" formalParameters+=MethodParameter ("," formalParameters+=MethodParameter)* ")")?
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//formalParameters+=MethodParameter
		public Assignment getFormalParametersAssignment_4_1() { return cFormalParametersAssignment_4_1; }

		//MethodParameter
		public RuleCall getFormalParametersMethodParameterParserRuleCall_4_1_0() { return cFormalParametersMethodParameterParserRuleCall_4_1_0; }

		//("," formalParameters+=MethodParameter)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }

		//formalParameters+=MethodParameter
		public Assignment getFormalParametersAssignment_4_2_1() { return cFormalParametersAssignment_4_2_1; }

		//MethodParameter
		public RuleCall getFormalParametersMethodParameterParserRuleCall_4_2_1_0() { return cFormalParametersMethodParameterParserRuleCall_4_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }

		//statements+=Statement+
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_5_0() { return cStatementsStatementParserRuleCall_5_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}

	public class MethodParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodParameter");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//MethodParameter returns imperative::MethodParameter:
		//	name=EString;
		public ParserRule getRule() { return rule; }

		//name=EString
		public Assignment getNameAssignment() { return cNameAssignment; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0() { return cNameEStringParserRuleCall_0; }
	}

	public class QoolTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QoolTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cQoolKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cScriptingKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInModelsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInModelsTransformationDefinitionParameterParserRuleCall_3_0 = (RuleCall)cInModelsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInModelsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInModelsTransformationDefinitionParameterParserRuleCall_4_1_0 = (RuleCall)cInModelsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOutModelsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOutModelsTransformationDefinitionParameterParserRuleCall_8_0 = (RuleCall)cOutModelsAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cInModelsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cInModelsTransformationDefinitionParameterParserRuleCall_9_1_0 = (RuleCall)cInModelsAssignment_9_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cAnnotationsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_11_0 = (RuleCall)cAnnotationsAssignment_11.eContents().get(0);
		private final Assignment cInlineModelsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cInlineModelsInlineModelParserRuleCall_12_0 = (RuleCall)cInlineModelsAssignment_12.eContents().get(0);
		private final Assignment cQueuesAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cQueuesQoolQueueParserRuleCall_13_0 = (RuleCall)cQueuesAssignment_13.eContents().get(0);
		private final Assignment cSegmentsAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cSegmentsSegmentParserRuleCall_14_0 = (RuleCall)cSegmentsAssignment_14.eContents().get(0);
		private final Keyword cEndKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		/////
		///// End-of Methods / Imperative
		/////
		///// 
		///// Begin-of Qool
		/////
		//QoolTransformation returns qool::QoolTransformation:
		//	("qool" | "scripting") name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
		//	//'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//	"(" inModels+=TransformationDefinitionParameter ("," inModels+=TransformationDefinitionParameter)* ")" "->" "("
		//	outModels+=TransformationDefinitionParameter? ("," inModels+=TransformationDefinitionParameter)* ")"
		//	annotations+=Annotation* // like this to resolve a reference: it is not the case
		//	//'(' right=[core::TransformationDefinitionParameter|EString] ')'
		//	// ('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		//	//('inModels' '{' inModels+=TransformationDefinitionParameter ( "," inModels+=TransformationDefinitionParameter)* '}' )?
		//	// ('outModels' '{' outModels+=TransformationDefinitionParameter ( "," outModels+=TransformationDefinitionParameter)* '}' )?
		//	// (traceInterface = TraceInterface)
		//	inlineModels+=InlineModel* queues+=QoolQueue* segments+=Segment+ "end";
		public ParserRule getRule() { return rule; }

		//("qool" | "scripting") name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
		////'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//"(" inModels+=TransformationDefinitionParameter ("," inModels+=TransformationDefinitionParameter)* ")" "->" "("
		//outModels+=TransformationDefinitionParameter? ("," inModels+=TransformationDefinitionParameter)* ")"
		//annotations+=Annotation* // like this to resolve a reference: it is not the case
		////'(' right=[core::TransformationDefinitionParameter|EString] ')'
		//// ('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		////('inModels' '{' inModels+=TransformationDefinitionParameter ( "," inModels+=TransformationDefinitionParameter)* '}' )?
		//// ('outModels' '{' outModels+=TransformationDefinitionParameter ( "," outModels+=TransformationDefinitionParameter)* '}' )?
		//// (traceInterface = TraceInterface)
		//inlineModels+=InlineModel* queues+=QoolQueue* segments+=Segment+ "end"
		public Group getGroup() { return cGroup; }

		//"qool" | "scripting"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"qool"
		public Keyword getQoolKeyword_0_0() { return cQoolKeyword_0_0; }

		//"scripting"
		public Keyword getScriptingKeyword_0_1() { return cScriptingKeyword_0_1; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//// '(' left=[core::TransformationDefinitionParameter|EString] ')'
		////'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//inModels+=TransformationDefinitionParameter
		public Assignment getInModelsAssignment_3() { return cInModelsAssignment_3; }

		//TransformationDefinitionParameter
		public RuleCall getInModelsTransformationDefinitionParameterParserRuleCall_3_0() { return cInModelsTransformationDefinitionParameterParserRuleCall_3_0; }

		//("," inModels+=TransformationDefinitionParameter)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//inModels+=TransformationDefinitionParameter
		public Assignment getInModelsAssignment_4_1() { return cInModelsAssignment_4_1; }

		//TransformationDefinitionParameter
		public RuleCall getInModelsTransformationDefinitionParameterParserRuleCall_4_1_0() { return cInModelsTransformationDefinitionParameterParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_6() { return cHyphenMinusGreaterThanSignKeyword_6; }

		//"("
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }

		//outModels+=TransformationDefinitionParameter?
		public Assignment getOutModelsAssignment_8() { return cOutModelsAssignment_8; }

		//TransformationDefinitionParameter
		public RuleCall getOutModelsTransformationDefinitionParameterParserRuleCall_8_0() { return cOutModelsTransformationDefinitionParameterParserRuleCall_8_0; }

		//("," inModels+=TransformationDefinitionParameter)*
		public Group getGroup_9() { return cGroup_9; }

		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }

		//inModels+=TransformationDefinitionParameter
		public Assignment getInModelsAssignment_9_1() { return cInModelsAssignment_9_1; }

		//TransformationDefinitionParameter
		public RuleCall getInModelsTransformationDefinitionParameterParserRuleCall_9_1_0() { return cInModelsTransformationDefinitionParameterParserRuleCall_9_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_11() { return cAnnotationsAssignment_11; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_11_0() { return cAnnotationsAnnotationParserRuleCall_11_0; }

		//inlineModels+=InlineModel*
		public Assignment getInlineModelsAssignment_12() { return cInlineModelsAssignment_12; }

		//InlineModel
		public RuleCall getInlineModelsInlineModelParserRuleCall_12_0() { return cInlineModelsInlineModelParserRuleCall_12_0; }

		//queues+=QoolQueue*
		public Assignment getQueuesAssignment_13() { return cQueuesAssignment_13; }

		//QoolQueue
		public RuleCall getQueuesQoolQueueParserRuleCall_13_0() { return cQueuesQoolQueueParserRuleCall_13_0; }

		//segments+=Segment+
		public Assignment getSegmentsAssignment_14() { return cSegmentsAssignment_14; }

		//Segment
		public RuleCall getSegmentsSegmentParserRuleCall_14_0() { return cSegmentsSegmentParserRuleCall_14_0; }

		//"end"
		public Keyword getEndKeyword_15() { return cEndKeyword_15; }
	}

	public class InlineModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InlineModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cClassesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassesInlineClassParserRuleCall_2_0 = (RuleCall)cClassesAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InlineModel returns core::InlineModel:
		//	"model" name=EString classes+=InlineClass+ "end";
		public ParserRule getRule() { return rule; }

		//"model" name=EString classes+=InlineClass+ "end"
		public Group getGroup() { return cGroup; }

		//"model"
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//classes+=InlineClass+
		public Assignment getClassesAssignment_2() { return cClassesAssignment_2; }

		//InlineClass
		public RuleCall getClassesInlineClassParserRuleCall_2_0() { return cClassesInlineClassParserRuleCall_2_0; }

		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}

	public class InlineClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InlineClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cFeaturesAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cFeaturesInlineReferenceInlineParserRuleCall_2_0_1_0 = (RuleCall)cFeaturesAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0_2_0 = (Keyword)cGroup_2_0_2.eContents().get(0);
		private final Assignment cFeaturesAssignment_2_0_2_1 = (Assignment)cGroup_2_0_2.eContents().get(1);
		private final RuleCall cFeaturesInlineReferenceInlineParserRuleCall_2_0_2_1_0 = (RuleCall)cFeaturesAssignment_2_0_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cFeaturesAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cFeaturesInlineFeatureExpandedParserRuleCall_2_1_0_0 = (RuleCall)cFeaturesAssignment_2_1_0.eContents().get(0);
		private final Assignment cFeaturesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cFeaturesInlineFeatureExpandedParserRuleCall_2_1_1_0 = (RuleCall)cFeaturesAssignment_2_1_1.eContents().get(0);
		private final Keyword cEndKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//InlineClass returns core::InlineClass:
		//	"class" name=EString ("{" features+=InlineReferenceInline (";" features+=InlineReferenceInline)* "}" |
		//	features+=InlineFeatureExpanded features+=InlineFeatureExpanded* "end");
		public ParserRule getRule() { return rule; }

		//"class" name=EString ("{" features+=InlineReferenceInline (";" features+=InlineReferenceInline)* "}" |
		//features+=InlineFeatureExpanded features+=InlineFeatureExpanded* "end")
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{" features+=InlineReferenceInline (";" features+=InlineReferenceInline)* "}" | features+=InlineFeatureExpanded
		//features+=InlineFeatureExpanded* "end"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"{" features+=InlineReferenceInline (";" features+=InlineReferenceInline)* "}"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0_0() { return cLeftCurlyBracketKeyword_2_0_0; }

		//features+=InlineReferenceInline
		public Assignment getFeaturesAssignment_2_0_1() { return cFeaturesAssignment_2_0_1; }

		//InlineReferenceInline
		public RuleCall getFeaturesInlineReferenceInlineParserRuleCall_2_0_1_0() { return cFeaturesInlineReferenceInlineParserRuleCall_2_0_1_0; }

		//(";" features+=InlineReferenceInline)*
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }

		//";"
		public Keyword getSemicolonKeyword_2_0_2_0() { return cSemicolonKeyword_2_0_2_0; }

		//features+=InlineReferenceInline
		public Assignment getFeaturesAssignment_2_0_2_1() { return cFeaturesAssignment_2_0_2_1; }

		//InlineReferenceInline
		public RuleCall getFeaturesInlineReferenceInlineParserRuleCall_2_0_2_1_0() { return cFeaturesInlineReferenceInlineParserRuleCall_2_0_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_0_3() { return cRightCurlyBracketKeyword_2_0_3; }

		//features+=InlineFeatureExpanded features+=InlineFeatureExpanded* "end"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//features+=InlineFeatureExpanded
		public Assignment getFeaturesAssignment_2_1_0() { return cFeaturesAssignment_2_1_0; }

		//InlineFeatureExpanded
		public RuleCall getFeaturesInlineFeatureExpandedParserRuleCall_2_1_0_0() { return cFeaturesInlineFeatureExpandedParserRuleCall_2_1_0_0; }

		//features+=InlineFeatureExpanded*
		public Assignment getFeaturesAssignment_2_1_1() { return cFeaturesAssignment_2_1_1; }

		//InlineFeatureExpanded
		public RuleCall getFeaturesInlineFeatureExpandedParserRuleCall_2_1_1_0() { return cFeaturesInlineFeatureExpandedParserRuleCall_2_1_1_0; }

		//"end"
		public Keyword getEndKeyword_2_1_2() { return cEndKeyword_2_1_2; }
	}

	public class InlineReferenceInlineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InlineReferenceInline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeExpressionParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//InlineReferenceInline returns core::InlineReference:
		//	name=EString ":" type=TypeExpression;
		public ParserRule getRule() { return rule; }

		//name=EString ":" type=TypeExpression
		public Group getGroup() { return cGroup; }

		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=TypeExpression
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//TypeExpression
		public RuleCall getTypeTypeExpressionParserRuleCall_2_0() { return cTypeTypeExpressionParserRuleCall_2_0; }
	}

	public class InlineFeatureExpandedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InlineFeatureExpanded");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInlineAttributeExpandedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInlineReferenceExpandedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InlineFeatureExpanded returns core::InlineFeature:
		//	InlineAttributeExpanded | InlineReferenceExpanded;
		public ParserRule getRule() { return rule; }

		//InlineAttributeExpanded | InlineReferenceExpanded
		public Alternatives getAlternatives() { return cAlternatives; }

		//InlineAttributeExpanded
		public RuleCall getInlineAttributeExpandedParserRuleCall_0() { return cInlineAttributeExpandedParserRuleCall_0; }

		//InlineReferenceExpanded
		public RuleCall getInlineReferenceExpandedParserRuleCall_1() { return cInlineReferenceExpandedParserRuleCall_1; }
	}

	public class InlineAttributeExpandedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InlineAttributeExpanded");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeExpressionParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cMultivaluedAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cMultivaluedAsteriskKeyword_4_0 = (Keyword)cMultivaluedAssignment_4.eContents().get(0);
		
		//InlineAttributeExpanded returns core::InlineAttribute:
		//	"att" name=EString ":" type=TypeExpression multivalued?="*"?;
		public ParserRule getRule() { return rule; }

		//"att" name=EString ":" type=TypeExpression multivalued?="*"?
		public Group getGroup() { return cGroup; }

		//"att"
		public Keyword getAttKeyword_0() { return cAttKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=TypeExpression
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeExpression
		public RuleCall getTypeTypeExpressionParserRuleCall_3_0() { return cTypeTypeExpressionParserRuleCall_3_0; }

		//multivalued?="*"?
		public Assignment getMultivaluedAssignment_4() { return cMultivaluedAssignment_4; }

		//"*"
		public Keyword getMultivaluedAsteriskKeyword_4_0() { return cMultivaluedAsteriskKeyword_4_0; }
	}

	public class InlineReferenceExpandedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InlineReferenceExpanded");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeExpressionParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cMultivaluedAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cMultivaluedAsteriskKeyword_4_0 = (Keyword)cMultivaluedAssignment_4.eContents().get(0);
		
		//InlineReferenceExpanded returns core::InlineReference:
		//	"ref" name=EString ":" type=TypeExpression multivalued?="*"?;
		public ParserRule getRule() { return rule; }

		//"ref" name=EString ":" type=TypeExpression multivalued?="*"?
		public Group getGroup() { return cGroup; }

		//"ref"
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=TypeExpression
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeExpression
		public RuleCall getTypeTypeExpressionParserRuleCall_3_0() { return cTypeTypeExpressionParserRuleCall_3_0; }

		//multivalued?="*"?
		public Assignment getMultivaluedAssignment_4() { return cMultivaluedAssignment_4; }

		//"*"
		public Keyword getMultivaluedAsteriskKeyword_4_0() { return cMultivaluedAsteriskKeyword_4_0; }
	}

	public class QoolQueueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QoolQueue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalQueueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModelElementQueueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// -- Queue 
		//QoolQueue returns qool::QoolQueue:
		//	LocalQueue | ModelElementQueue;
		public ParserRule getRule() { return rule; }

		//LocalQueue | ModelElementQueue
		public Alternatives getAlternatives() { return cAlternatives; }

		//LocalQueue
		public RuleCall getLocalQueueParserRuleCall_0() { return cLocalQueueParserRuleCall_0; }

		//ModelElementQueue
		public RuleCall getModelElementQueueParserRuleCall_1() { return cModelElementQueueParserRuleCall_1; }
	}

	public class LocalQueueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalQueue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLocalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cQueueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cType_Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cType_TypeExpressionParserRuleCall_4_0 = (RuleCall)cType_Assignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWithKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOptimizationsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOptimizationsQueueOptimizationParserRuleCall_5_1_0 = (RuleCall)cOptimizationsAssignment_5_1.eContents().get(0);
		
		//LocalQueue returns qool::LocalQueue:
		//	"local" "queue" name=ID ":" type_=TypeExpression ("with" optimizations+=QueueOptimization+)?;
		public ParserRule getRule() { return rule; }

		//"local" "queue" name=ID ":" type_=TypeExpression ("with" optimizations+=QueueOptimization+)?
		public Group getGroup() { return cGroup; }

		//"local"
		public Keyword getLocalKeyword_0() { return cLocalKeyword_0; }

		//"queue"
		public Keyword getQueueKeyword_1() { return cQueueKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//type_=TypeExpression
		public Assignment getType_Assignment_4() { return cType_Assignment_4; }

		//TypeExpression
		public RuleCall getType_TypeExpressionParserRuleCall_4_0() { return cType_TypeExpressionParserRuleCall_4_0; }

		//("with" optimizations+=QueueOptimization+)?
		public Group getGroup_5() { return cGroup_5; }

		//"with"
		public Keyword getWithKeyword_5_0() { return cWithKeyword_5_0; }

		//optimizations+=QueueOptimization+
		public Assignment getOptimizationsAssignment_5_1() { return cOptimizationsAssignment_5_1; }

		//QueueOptimization
		public RuleCall getOptimizationsQueueOptimizationParserRuleCall_5_1_0() { return cOptimizationsQueueOptimizationParserRuleCall_5_1_0; }
	}

	public class ModelElementQueueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelElementQueue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cQueueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cClass_Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClass_ClassUseParserRuleCall_4_0 = (RuleCall)cClass_Assignment_4.eContents().get(0);
		
		//ModelElementQueue returns qool::ModelElementQueue:
		//	"model" "queue" name=ID ":" class_=ClassUse;
		public ParserRule getRule() { return rule; }

		//"model" "queue" name=ID ":" class_=ClassUse
		public Group getGroup() { return cGroup; }

		//"model"
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }

		//"queue"
		public Keyword getQueueKeyword_1() { return cQueueKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//class_=ClassUse
		public Assignment getClass_Assignment_4() { return cClass_Assignment_4; }

		//ClassUse
		public RuleCall getClass_ClassUseParserRuleCall_4_0() { return cClass_ClassUseParserRuleCall_4_0; }
	}

	public class QueueOptimizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QueueOptimization");
		private final RuleCall cAccessByFeatureOptimizationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//QueueOptimization returns qool::QueueOptimization:
		//	AccessByFeatureOptimization;
		public ParserRule getRule() { return rule; }

		//AccessByFeatureOptimization
		public RuleCall getAccessByFeatureOptimizationParserRuleCall() { return cAccessByFeatureOptimizationParserRuleCall; }
	}

	public class AccessByFeatureOptimizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AccessByFeatureOptimization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAccessByKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeatureNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatureNameEStringParserRuleCall_1_0 = (RuleCall)cFeatureNameAssignment_1.eContents().get(0);
		private final Assignment cForceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cForceExclamationMarkKeyword_2_0 = (Keyword)cForceAssignment_2.eContents().get(0);
		
		//AccessByFeatureOptimization returns qool::AccessByFeatureOptimization:
		//	"access-by" featureName=EString force?="!"?;
		public ParserRule getRule() { return rule; }

		//"access-by" featureName=EString force?="!"?
		public Group getGroup() { return cGroup; }

		//"access-by"
		public Keyword getAccessByKeyword_0() { return cAccessByKeyword_0; }

		//featureName=EString
		public Assignment getFeatureNameAssignment_1() { return cFeatureNameAssignment_1; }

		//EString
		public RuleCall getFeatureNameEStringParserRuleCall_1_0() { return cFeatureNameEStringParserRuleCall_1_0; }

		//force?="!"?
		public Assignment getForceAssignment_2() { return cForceAssignment_2; }

		//"!"
		public Keyword getForceExclamationMarkKeyword_2_0() { return cForceExclamationMarkKeyword_2_0; }
	}

	public class SegmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Segment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSegmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsQoolStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// -- Segments and expressions
		//Segment returns qool::Segment:
		//	"segment" name=EString statements+=QoolStatement+ "end";
		public ParserRule getRule() { return rule; }

		//"segment" name=EString statements+=QoolStatement+ "end"
		public Group getGroup() { return cGroup; }

		//"segment"
		public Keyword getSegmentKeyword_0() { return cSegmentKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//statements+=QoolStatement+
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//QoolStatement
		public RuleCall getStatementsQoolStatementParserRuleCall_2_0() { return cStatementsQoolStatementParserRuleCall_2_0; }

		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}

	public class QoolStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QoolStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefineVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPutTraceExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPropertyWriteParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForAllStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEmitStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//// redefine
		//QoolStatement returns core::Statement:
		//	DefineVariable // | ForEachStatement
		//	| Expression | PutTraceExpression | PropertyWrite | ForAllStatement | EmitStatement;
		public ParserRule getRule() { return rule; }

		//DefineVariable // | ForEachStatement
		//| Expression | PutTraceExpression | PropertyWrite | ForAllStatement | EmitStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//DefineVariable
		public RuleCall getDefineVariableParserRuleCall_0() { return cDefineVariableParserRuleCall_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//PutTraceExpression
		public RuleCall getPutTraceExpressionParserRuleCall_2() { return cPutTraceExpressionParserRuleCall_2; }

		//PropertyWrite
		public RuleCall getPropertyWriteParserRuleCall_3() { return cPropertyWriteParserRuleCall_3; }

		//ForAllStatement
		public RuleCall getForAllStatementParserRuleCall_4() { return cForAllStatementParserRuleCall_4; }

		//EmitStatement
		public RuleCall getEmitStatementParserRuleCall_5() { return cEmitStatementParserRuleCall_5; }
	}

	public class ClosureDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClosureDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFormalParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFormalParametersClosureParameterParserRuleCall_1_1_0 = (RuleCall)cFormalParametersAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cFormalParametersAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cFormalParametersClosureParameterParserRuleCall_1_2_1_0 = (RuleCall)cFormalParametersAssignment_1_2_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsQoolStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Redefined for qool... (I need to restrict better what can be done in each language!!)	
		//ClosureDeclaration returns core::ClosureDeclaration:
		//	"{" ("|" formalParameters+=ClosureParameter ("," formalParameters+=ClosureParameter)* "|")? statements+=QoolStatement+
		//	"}";
		public ParserRule getRule() { return rule; }

		//"{" ("|" formalParameters+=ClosureParameter ("," formalParameters+=ClosureParameter)* "|")? statements+=QoolStatement+
		//"}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//("|" formalParameters+=ClosureParameter ("," formalParameters+=ClosureParameter)* "|")?
		public Group getGroup_1() { return cGroup_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }

		//formalParameters+=ClosureParameter
		public Assignment getFormalParametersAssignment_1_1() { return cFormalParametersAssignment_1_1; }

		//ClosureParameter
		public RuleCall getFormalParametersClosureParameterParserRuleCall_1_1_0() { return cFormalParametersClosureParameterParserRuleCall_1_1_0; }

		//("," formalParameters+=ClosureParameter)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//formalParameters+=ClosureParameter
		public Assignment getFormalParametersAssignment_1_2_1() { return cFormalParametersAssignment_1_2_1; }

		//ClosureParameter
		public RuleCall getFormalParametersClosureParameterParserRuleCall_1_2_1_0() { return cFormalParametersClosureParameterParserRuleCall_1_2_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_3() { return cVerticalLineKeyword_1_3; }

		//statements+=QoolStatement+
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//QoolStatement
		public RuleCall getStatementsQoolStatementParserRuleCall_2_0() { return cStatementsQoolStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cModelReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cParenthesizedExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMatchTraceExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cClosureDeclarationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMatchExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cInvokeTransformationParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cIfExprParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cCopierParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//// redefine
		//PrimaryExpression returns core::Expression:
		//	Literal // Facilities
		//	| VariableReference | ModelReference | ParenthesizedExpression | MatchTraceExpression | ClosureDeclaration | // <-- added for qool
		//	MatchExpression | InvokeTransformation | IfExpr | Copier;
		public ParserRule getRule() { return rule; }

		//Literal // Facilities
		//| VariableReference | ModelReference | ParenthesizedExpression | MatchTraceExpression | ClosureDeclaration | // <-- added for qool
		//MatchExpression | InvokeTransformation | IfExpr | Copier
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_1() { return cVariableReferenceParserRuleCall_1; }

		//ModelReference
		public RuleCall getModelReferenceParserRuleCall_2() { return cModelReferenceParserRuleCall_2; }

		//ParenthesizedExpression
		public RuleCall getParenthesizedExpressionParserRuleCall_3() { return cParenthesizedExpressionParserRuleCall_3; }

		//MatchTraceExpression
		public RuleCall getMatchTraceExpressionParserRuleCall_4() { return cMatchTraceExpressionParserRuleCall_4; }

		//ClosureDeclaration
		public RuleCall getClosureDeclarationParserRuleCall_5() { return cClosureDeclarationParserRuleCall_5; }

		//// <-- added for qool
		//MatchExpression
		public RuleCall getMatchExpressionParserRuleCall_6() { return cMatchExpressionParserRuleCall_6; }

		//InvokeTransformation
		public RuleCall getInvokeTransformationParserRuleCall_7() { return cInvokeTransformationParserRuleCall_7; }

		//IfExpr
		public RuleCall getIfExprParserRuleCall_8() { return cIfExprParserRuleCall_8; }

		//Copier
		public RuleCall getCopierParserRuleCall_9() { return cCopierParserRuleCall_9; }
	}

	public class InvokeTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InvokeTransformation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInvokeExternalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInvokeInternalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InvokeTransformation returns qool::InvokeTransformation:
		//	InvokeExternal | InvokeInternal;
		public ParserRule getRule() { return rule; }

		//InvokeExternal | InvokeInternal
		public Alternatives getAlternatives() { return cAlternatives; }

		//InvokeExternal
		public RuleCall getInvokeExternalParserRuleCall_0() { return cInvokeExternalParserRuleCall_0; }

		//InvokeInternal
		public RuleCall getInvokeInternalParserRuleCall_1() { return cInvokeInternalParserRuleCall_1; }
	}

	public class InvokeInternalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InvokeInternal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvokeInternalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTransformationNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTransformationNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cTransformationNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cSourceModelsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cSourceModelsInvocationParameterParserRuleCall_3_0_0 = (RuleCall)cSourceModelsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cSourceModelsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cSourceModelsInvocationParameterParserRuleCall_3_1_1_0 = (RuleCall)cSourceModelsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cTargetModelsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cTargetModelsInvocationParameterParserRuleCall_7_0_0 = (RuleCall)cTargetModelsAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cTargetModelsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cTargetModelsInvocationParameterParserRuleCall_7_1_1_0 = (RuleCall)cTargetModelsAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cInputViewFilterKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cInputViewFilterAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final CrossReference cInputViewFilterDefineVariableCrossReference_9_1_0 = (CrossReference)cInputViewFilterAssignment_9_1.eContents().get(0);
		private final RuleCall cInputViewFilterDefineVariableIDTerminalRuleCall_9_1_0_1 = (RuleCall)cInputViewFilterDefineVariableCrossReference_9_1_0.eContents().get(1);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cEntrypointKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cEntryPointNameAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cEntryPointNameIDTerminalRuleCall_10_1_0 = (RuleCall)cEntryPointNameAssignment_10_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Assignment cEntryPointParametersAssignment_10_3 = (Assignment)cGroup_10.eContents().get(3);
		private final RuleCall cEntryPointParametersExpressionParserRuleCall_10_3_0 = (RuleCall)cEntryPointParametersAssignment_10_3.eContents().get(0);
		private final Group cGroup_10_4 = (Group)cGroup_10.eContents().get(4);
		private final Keyword cCommaKeyword_10_4_0 = (Keyword)cGroup_10_4.eContents().get(0);
		private final Assignment cEntryPointParametersAssignment_10_4_1 = (Assignment)cGroup_10_4.eContents().get(1);
		private final RuleCall cEntryPointParametersExpressionParserRuleCall_10_4_1_0 = (RuleCall)cEntryPointParametersAssignment_10_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_5 = (Keyword)cGroup_10.eContents().get(5);
		
		//InvokeInternal returns qool::InvokeInternal:
		//	"invoke-internal" transformationName=QualifiedName "(" (sourceModels+=InvocationParameter (","
		//	sourceModels+=InvocationParameter)*)? ")" "->" "(" (targetModels+=InvocationParameter (","
		//	targetModels+=InvocationParameter)*)? ")" ("input-view-filter" inputViewFilter=[core::DefineVariable])? ("entrypoint"
		//	entryPointName=ID "(" entryPointParameters+=Expression? ("," entryPointParameters+=Expression)* ")")?;
		public ParserRule getRule() { return rule; }

		//"invoke-internal" transformationName=QualifiedName "(" (sourceModels+=InvocationParameter (","
		//sourceModels+=InvocationParameter)*)? ")" "->" "(" (targetModels+=InvocationParameter (","
		//targetModels+=InvocationParameter)*)? ")" ("input-view-filter" inputViewFilter=[core::DefineVariable])? ("entrypoint"
		//entryPointName=ID "(" entryPointParameters+=Expression? ("," entryPointParameters+=Expression)* ")")?
		public Group getGroup() { return cGroup; }

		//"invoke-internal"
		public Keyword getInvokeInternalKeyword_0() { return cInvokeInternalKeyword_0; }

		//transformationName=QualifiedName
		public Assignment getTransformationNameAssignment_1() { return cTransformationNameAssignment_1; }

		//QualifiedName
		public RuleCall getTransformationNameQualifiedNameParserRuleCall_1_0() { return cTransformationNameQualifiedNameParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(sourceModels+=InvocationParameter ("," sourceModels+=InvocationParameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//sourceModels+=InvocationParameter
		public Assignment getSourceModelsAssignment_3_0() { return cSourceModelsAssignment_3_0; }

		//InvocationParameter
		public RuleCall getSourceModelsInvocationParameterParserRuleCall_3_0_0() { return cSourceModelsInvocationParameterParserRuleCall_3_0_0; }

		//("," sourceModels+=InvocationParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//sourceModels+=InvocationParameter
		public Assignment getSourceModelsAssignment_3_1_1() { return cSourceModelsAssignment_3_1_1; }

		//InvocationParameter
		public RuleCall getSourceModelsInvocationParameterParserRuleCall_3_1_1_0() { return cSourceModelsInvocationParameterParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//(targetModels+=InvocationParameter ("," targetModels+=InvocationParameter)*)?
		public Group getGroup_7() { return cGroup_7; }

		//targetModels+=InvocationParameter
		public Assignment getTargetModelsAssignment_7_0() { return cTargetModelsAssignment_7_0; }

		//InvocationParameter
		public RuleCall getTargetModelsInvocationParameterParserRuleCall_7_0_0() { return cTargetModelsInvocationParameterParserRuleCall_7_0_0; }

		//("," targetModels+=InvocationParameter)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//","
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }

		//targetModels+=InvocationParameter
		public Assignment getTargetModelsAssignment_7_1_1() { return cTargetModelsAssignment_7_1_1; }

		//InvocationParameter
		public RuleCall getTargetModelsInvocationParameterParserRuleCall_7_1_1_0() { return cTargetModelsInvocationParameterParserRuleCall_7_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//("input-view-filter" inputViewFilter=[core::DefineVariable])?
		public Group getGroup_9() { return cGroup_9; }

		//"input-view-filter"
		public Keyword getInputViewFilterKeyword_9_0() { return cInputViewFilterKeyword_9_0; }

		//inputViewFilter=[core::DefineVariable]
		public Assignment getInputViewFilterAssignment_9_1() { return cInputViewFilterAssignment_9_1; }

		//[core::DefineVariable]
		public CrossReference getInputViewFilterDefineVariableCrossReference_9_1_0() { return cInputViewFilterDefineVariableCrossReference_9_1_0; }

		//ID
		public RuleCall getInputViewFilterDefineVariableIDTerminalRuleCall_9_1_0_1() { return cInputViewFilterDefineVariableIDTerminalRuleCall_9_1_0_1; }

		//("entrypoint" entryPointName=ID "(" entryPointParameters+=Expression? ("," entryPointParameters+=Expression)* ")")?
		public Group getGroup_10() { return cGroup_10; }

		//"entrypoint"
		public Keyword getEntrypointKeyword_10_0() { return cEntrypointKeyword_10_0; }

		//entryPointName=ID
		public Assignment getEntryPointNameAssignment_10_1() { return cEntryPointNameAssignment_10_1; }

		//ID
		public RuleCall getEntryPointNameIDTerminalRuleCall_10_1_0() { return cEntryPointNameIDTerminalRuleCall_10_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_10_2() { return cLeftParenthesisKeyword_10_2; }

		//entryPointParameters+=Expression?
		public Assignment getEntryPointParametersAssignment_10_3() { return cEntryPointParametersAssignment_10_3; }

		//Expression
		public RuleCall getEntryPointParametersExpressionParserRuleCall_10_3_0() { return cEntryPointParametersExpressionParserRuleCall_10_3_0; }

		//("," entryPointParameters+=Expression)*
		public Group getGroup_10_4() { return cGroup_10_4; }

		//","
		public Keyword getCommaKeyword_10_4_0() { return cCommaKeyword_10_4_0; }

		//entryPointParameters+=Expression
		public Assignment getEntryPointParametersAssignment_10_4_1() { return cEntryPointParametersAssignment_10_4_1; }

		//Expression
		public RuleCall getEntryPointParametersExpressionParserRuleCall_10_4_1_0() { return cEntryPointParametersExpressionParserRuleCall_10_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10_5() { return cRightParenthesisKeyword_10_5; }
	}

	public class NamedInvocationParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedInvocationParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFormalNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFormalNameEStringParserRuleCall_0_0 = (RuleCall)cFormalNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActualParameterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActualParameterExpressionParserRuleCall_2_0 = (RuleCall)cActualParameterAssignment_2.eContents().get(0);
		
		//NamedInvocationParameter returns qool::NamedInvocationParameter:
		//	formalName=EString "=" actualParameter=Expression;
		public ParserRule getRule() { return rule; }

		//formalName=EString "=" actualParameter=Expression
		public Group getGroup() { return cGroup; }

		//formalName=EString
		public Assignment getFormalNameAssignment_0() { return cFormalNameAssignment_0; }

		//EString
		public RuleCall getFormalNameEStringParserRuleCall_0_0() { return cFormalNameEStringParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//actualParameter=Expression
		public Assignment getActualParameterAssignment_2() { return cActualParameterAssignment_2; }

		//Expression
		public RuleCall getActualParameterExpressionParserRuleCall_2_0() { return cActualParameterExpressionParserRuleCall_2_0; }
	}

	public class InvokeExternalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InvokeExternal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvokeExternalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTransformationNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTransformationNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cTransformationNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cSourceModelsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cSourceModelsInvocationParameterParserRuleCall_3_0_0 = (RuleCall)cSourceModelsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cSourceModelsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cSourceModelsInvocationParameterParserRuleCall_3_1_1_0 = (RuleCall)cSourceModelsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cTargetModelsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cTargetModelsInvocationParameterParserRuleCall_7_0_0 = (RuleCall)cTargetModelsAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cTargetModelsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cTargetModelsInvocationParameterParserRuleCall_7_1_1_0 = (RuleCall)cTargetModelsAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cPlusSignKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cParametersAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cParametersNamedInvocationParameterParserRuleCall_9_2_0 = (RuleCall)cParametersAssignment_9_2.eContents().get(0);
		private final Group cGroup_9_3 = (Group)cGroup_9.eContents().get(3);
		private final Keyword cCommaKeyword_9_3_0 = (Keyword)cGroup_9_3.eContents().get(0);
		private final Assignment cParametersAssignment_9_3_1 = (Assignment)cGroup_9_3.eContents().get(1);
		private final RuleCall cParametersNamedInvocationParameterParserRuleCall_9_3_1_0 = (RuleCall)cParametersAssignment_9_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		private final Alternatives cAlternatives_10 = (Alternatives)cGroup.eContents().get(10);
		private final Group cGroup_10_0 = (Group)cAlternatives_10.eContents().get(0);
		private final Keyword cEntrypointKeyword_10_0_0 = (Keyword)cGroup_10_0.eContents().get(0);
		private final Assignment cEntryPointNameAssignment_10_0_1 = (Assignment)cGroup_10_0.eContents().get(1);
		private final RuleCall cEntryPointNameIDTerminalRuleCall_10_0_1_0 = (RuleCall)cEntryPointNameAssignment_10_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_10_0_2 = (Keyword)cGroup_10_0.eContents().get(2);
		private final Assignment cEntryPointParametersAssignment_10_0_3 = (Assignment)cGroup_10_0.eContents().get(3);
		private final RuleCall cEntryPointParametersExpressionParserRuleCall_10_0_3_0 = (RuleCall)cEntryPointParametersAssignment_10_0_3.eContents().get(0);
		private final Group cGroup_10_0_4 = (Group)cGroup_10_0.eContents().get(4);
		private final Keyword cCommaKeyword_10_0_4_0 = (Keyword)cGroup_10_0_4.eContents().get(0);
		private final Assignment cEntryPointParametersAssignment_10_0_4_1 = (Assignment)cGroup_10_0_4.eContents().get(1);
		private final RuleCall cEntryPointParametersExpressionParserRuleCall_10_0_4_1_0 = (RuleCall)cEntryPointParametersAssignment_10_0_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_0_5 = (Keyword)cGroup_10_0.eContents().get(5);
		private final Group cGroup_10_1 = (Group)cAlternatives_10.eContents().get(1);
		private final Keyword cInputViewFilterKeyword_10_1_0 = (Keyword)cGroup_10_1.eContents().get(0);
		private final Assignment cInputViewFilterAssignment_10_1_1 = (Assignment)cGroup_10_1.eContents().get(1);
		private final CrossReference cInputViewFilterDefineVariableCrossReference_10_1_1_0 = (CrossReference)cInputViewFilterAssignment_10_1_1.eContents().get(0);
		private final RuleCall cInputViewFilterDefineVariableIDTerminalRuleCall_10_1_1_0_1 = (RuleCall)cInputViewFilterDefineVariableCrossReference_10_1_1_0.eContents().get(1);
		private final Group cGroup_10_1_2 = (Group)cGroup_10_1.eContents().get(2);
		private final Keyword cOutputElementKeyword_10_1_2_0 = (Keyword)cGroup_10_1_2.eContents().get(0);
		private final Assignment cOutputResolutionSourceElementAssignment_10_1_2_1 = (Assignment)cGroup_10_1_2.eContents().get(1);
		private final RuleCall cOutputResolutionSourceElementExpressionParserRuleCall_10_1_2_1_0 = (RuleCall)cOutputResolutionSourceElementAssignment_10_1_2_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_10_1_2_2 = (Keyword)cGroup_10_1_2.eContents().get(2);
		private final Assignment cQueueNameAssignment_10_1_2_3 = (Assignment)cGroup_10_1_2.eContents().get(3);
		private final RuleCall cQueueNameEStringParserRuleCall_10_1_2_3_0 = (RuleCall)cQueueNameAssignment_10_1_2_3.eContents().get(0);
		private final Keyword cFullStopKeyword_10_1_2_4 = (Keyword)cGroup_10_1_2.eContents().get(4);
		private final Assignment cTraceAttributeNameAssignment_10_1_2_5 = (Assignment)cGroup_10_1_2.eContents().get(5);
		private final RuleCall cTraceAttributeNameEStringParserRuleCall_10_1_2_5_0 = (RuleCall)cTraceAttributeNameAssignment_10_1_2_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_10_1_2_6 = (Keyword)cGroup_10_1_2.eContents().get(6);
		
		//InvokeExternal returns qool::InvokeExternal:
		//	"invoke-external" transformationName=QualifiedName "(" (sourceModels+=InvocationParameter (","
		//	sourceModels+=InvocationParameter)*)? ")" "->" "(" (targetModels+=InvocationParameter (","
		//	targetModels+=InvocationParameter)*)? ")" ("+" "(" parameters+=NamedInvocationParameter (","
		//	parameters+=NamedInvocationParameter)* ")")? (("entrypoint" entryPointName=ID "(" entryPointParameters+=Expression?
		//	("," entryPointParameters+=Expression)* ")")? | "input-view-filter" inputViewFilter=[core::DefineVariable]
		//	("output-element" outputResolutionSourceElement=Expression "[" queueName=EString "." traceAttributeName=EString
		//	"]")?);
		public ParserRule getRule() { return rule; }

		//"invoke-external" transformationName=QualifiedName "(" (sourceModels+=InvocationParameter (","
		//sourceModels+=InvocationParameter)*)? ")" "->" "(" (targetModels+=InvocationParameter (","
		//targetModels+=InvocationParameter)*)? ")" ("+" "(" parameters+=NamedInvocationParameter (","
		//parameters+=NamedInvocationParameter)* ")")? (("entrypoint" entryPointName=ID "(" entryPointParameters+=Expression?
		//("," entryPointParameters+=Expression)* ")")? | "input-view-filter" inputViewFilter=[core::DefineVariable]
		//("output-element" outputResolutionSourceElement=Expression "[" queueName=EString "." traceAttributeName=EString "]")?)
		public Group getGroup() { return cGroup; }

		//"invoke-external"
		public Keyword getInvokeExternalKeyword_0() { return cInvokeExternalKeyword_0; }

		//transformationName=QualifiedName
		public Assignment getTransformationNameAssignment_1() { return cTransformationNameAssignment_1; }

		//QualifiedName
		public RuleCall getTransformationNameQualifiedNameParserRuleCall_1_0() { return cTransformationNameQualifiedNameParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(sourceModels+=InvocationParameter ("," sourceModels+=InvocationParameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//sourceModels+=InvocationParameter
		public Assignment getSourceModelsAssignment_3_0() { return cSourceModelsAssignment_3_0; }

		//InvocationParameter
		public RuleCall getSourceModelsInvocationParameterParserRuleCall_3_0_0() { return cSourceModelsInvocationParameterParserRuleCall_3_0_0; }

		//("," sourceModels+=InvocationParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//sourceModels+=InvocationParameter
		public Assignment getSourceModelsAssignment_3_1_1() { return cSourceModelsAssignment_3_1_1; }

		//InvocationParameter
		public RuleCall getSourceModelsInvocationParameterParserRuleCall_3_1_1_0() { return cSourceModelsInvocationParameterParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//(targetModels+=InvocationParameter ("," targetModels+=InvocationParameter)*)?
		public Group getGroup_7() { return cGroup_7; }

		//targetModels+=InvocationParameter
		public Assignment getTargetModelsAssignment_7_0() { return cTargetModelsAssignment_7_0; }

		//InvocationParameter
		public RuleCall getTargetModelsInvocationParameterParserRuleCall_7_0_0() { return cTargetModelsInvocationParameterParserRuleCall_7_0_0; }

		//("," targetModels+=InvocationParameter)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//","
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }

		//targetModels+=InvocationParameter
		public Assignment getTargetModelsAssignment_7_1_1() { return cTargetModelsAssignment_7_1_1; }

		//InvocationParameter
		public RuleCall getTargetModelsInvocationParameterParserRuleCall_7_1_1_0() { return cTargetModelsInvocationParameterParserRuleCall_7_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//("+" "(" parameters+=NamedInvocationParameter ("," parameters+=NamedInvocationParameter)* ")")?
		public Group getGroup_9() { return cGroup_9; }

		//"+"
		public Keyword getPlusSignKeyword_9_0() { return cPlusSignKeyword_9_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_9_1() { return cLeftParenthesisKeyword_9_1; }

		//parameters+=NamedInvocationParameter
		public Assignment getParametersAssignment_9_2() { return cParametersAssignment_9_2; }

		//NamedInvocationParameter
		public RuleCall getParametersNamedInvocationParameterParserRuleCall_9_2_0() { return cParametersNamedInvocationParameterParserRuleCall_9_2_0; }

		//("," parameters+=NamedInvocationParameter)*
		public Group getGroup_9_3() { return cGroup_9_3; }

		//","
		public Keyword getCommaKeyword_9_3_0() { return cCommaKeyword_9_3_0; }

		//parameters+=NamedInvocationParameter
		public Assignment getParametersAssignment_9_3_1() { return cParametersAssignment_9_3_1; }

		//NamedInvocationParameter
		public RuleCall getParametersNamedInvocationParameterParserRuleCall_9_3_1_0() { return cParametersNamedInvocationParameterParserRuleCall_9_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9_4() { return cRightParenthesisKeyword_9_4; }

		//("entrypoint" entryPointName=ID "(" entryPointParameters+=Expression? ("," entryPointParameters+=Expression)* ")")? |
		//"input-view-filter" inputViewFilter=[core::DefineVariable] ("output-element" outputResolutionSourceElement=Expression
		//"[" queueName=EString "." traceAttributeName=EString "]")?
		public Alternatives getAlternatives_10() { return cAlternatives_10; }

		//("entrypoint" entryPointName=ID "(" entryPointParameters+=Expression? ("," entryPointParameters+=Expression)* ")")?
		public Group getGroup_10_0() { return cGroup_10_0; }

		//"entrypoint"
		public Keyword getEntrypointKeyword_10_0_0() { return cEntrypointKeyword_10_0_0; }

		//entryPointName=ID
		public Assignment getEntryPointNameAssignment_10_0_1() { return cEntryPointNameAssignment_10_0_1; }

		//ID
		public RuleCall getEntryPointNameIDTerminalRuleCall_10_0_1_0() { return cEntryPointNameIDTerminalRuleCall_10_0_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_10_0_2() { return cLeftParenthesisKeyword_10_0_2; }

		//entryPointParameters+=Expression?
		public Assignment getEntryPointParametersAssignment_10_0_3() { return cEntryPointParametersAssignment_10_0_3; }

		//Expression
		public RuleCall getEntryPointParametersExpressionParserRuleCall_10_0_3_0() { return cEntryPointParametersExpressionParserRuleCall_10_0_3_0; }

		//("," entryPointParameters+=Expression)*
		public Group getGroup_10_0_4() { return cGroup_10_0_4; }

		//","
		public Keyword getCommaKeyword_10_0_4_0() { return cCommaKeyword_10_0_4_0; }

		//entryPointParameters+=Expression
		public Assignment getEntryPointParametersAssignment_10_0_4_1() { return cEntryPointParametersAssignment_10_0_4_1; }

		//Expression
		public RuleCall getEntryPointParametersExpressionParserRuleCall_10_0_4_1_0() { return cEntryPointParametersExpressionParserRuleCall_10_0_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10_0_5() { return cRightParenthesisKeyword_10_0_5; }

		//"input-view-filter" inputViewFilter=[core::DefineVariable] ("output-element" outputResolutionSourceElement=Expression
		//"[" queueName=EString "." traceAttributeName=EString "]")?
		public Group getGroup_10_1() { return cGroup_10_1; }

		//"input-view-filter"
		public Keyword getInputViewFilterKeyword_10_1_0() { return cInputViewFilterKeyword_10_1_0; }

		//inputViewFilter=[core::DefineVariable]
		public Assignment getInputViewFilterAssignment_10_1_1() { return cInputViewFilterAssignment_10_1_1; }

		//[core::DefineVariable]
		public CrossReference getInputViewFilterDefineVariableCrossReference_10_1_1_0() { return cInputViewFilterDefineVariableCrossReference_10_1_1_0; }

		//ID
		public RuleCall getInputViewFilterDefineVariableIDTerminalRuleCall_10_1_1_0_1() { return cInputViewFilterDefineVariableIDTerminalRuleCall_10_1_1_0_1; }

		//("output-element" outputResolutionSourceElement=Expression "[" queueName=EString "." traceAttributeName=EString "]")?
		public Group getGroup_10_1_2() { return cGroup_10_1_2; }

		//"output-element"
		public Keyword getOutputElementKeyword_10_1_2_0() { return cOutputElementKeyword_10_1_2_0; }

		//outputResolutionSourceElement=Expression
		public Assignment getOutputResolutionSourceElementAssignment_10_1_2_1() { return cOutputResolutionSourceElementAssignment_10_1_2_1; }

		//Expression
		public RuleCall getOutputResolutionSourceElementExpressionParserRuleCall_10_1_2_1_0() { return cOutputResolutionSourceElementExpressionParserRuleCall_10_1_2_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_10_1_2_2() { return cLeftSquareBracketKeyword_10_1_2_2; }

		//queueName=EString
		public Assignment getQueueNameAssignment_10_1_2_3() { return cQueueNameAssignment_10_1_2_3; }

		//EString
		public RuleCall getQueueNameEStringParserRuleCall_10_1_2_3_0() { return cQueueNameEStringParserRuleCall_10_1_2_3_0; }

		//"."
		public Keyword getFullStopKeyword_10_1_2_4() { return cFullStopKeyword_10_1_2_4; }

		//traceAttributeName=EString
		public Assignment getTraceAttributeNameAssignment_10_1_2_5() { return cTraceAttributeNameAssignment_10_1_2_5; }

		//EString
		public RuleCall getTraceAttributeNameEStringParserRuleCall_10_1_2_5_0() { return cTraceAttributeNameEStringParserRuleCall_10_1_2_5_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_10_1_2_6() { return cRightSquareBracketKeyword_10_1_2_6; }
	}

	public class InvocationParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InvocationParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCalleeModelNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCalleeModelNameIDTerminalRuleCall_0_0 = (RuleCall)cCalleeModelNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cModelTransformationDefinitionParameterCrossReference_2_0 = (CrossReference)cModelAssignment_2.eContents().get(0);
		private final RuleCall cModelTransformationDefinitionParameterIDTerminalRuleCall_2_0_1 = (RuleCall)cModelTransformationDefinitionParameterCrossReference_2_0.eContents().get(1);
		
		//InvocationParameter returns qool::InvocationParameter:
		//	calleeModelName=ID "=" model=[core::TransformationDefinitionParameter];
		public ParserRule getRule() { return rule; }

		//calleeModelName=ID "=" model=[core::TransformationDefinitionParameter]
		public Group getGroup() { return cGroup; }

		//calleeModelName=ID
		public Assignment getCalleeModelNameAssignment_0() { return cCalleeModelNameAssignment_0; }

		//ID
		public RuleCall getCalleeModelNameIDTerminalRuleCall_0_0() { return cCalleeModelNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//model=[core::TransformationDefinitionParameter]
		public Assignment getModelAssignment_2() { return cModelAssignment_2; }

		//[core::TransformationDefinitionParameter]
		public CrossReference getModelTransformationDefinitionParameterCrossReference_2_0() { return cModelTransformationDefinitionParameterCrossReference_2_0; }

		//ID
		public RuleCall getModelTransformationDefinitionParameterIDTerminalRuleCall_2_0_1() { return cModelTransformationDefinitionParameterIDTerminalRuleCall_2_0_1; }
	}

	public class ForAllStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForAllStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cQueueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cQueueQoolQueueCrossReference_3_0 = (CrossReference)cQueueAssignment_3.eContents().get(0);
		private final RuleCall cQueueQoolQueueIDTerminalRuleCall_3_0_1 = (RuleCall)cQueueQoolQueueCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWhereKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cConditionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_4_1_0 = (RuleCall)cConditionAssignment_4_1.eContents().get(0);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsQoolStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ForAllStatement returns qool::ForAllStatement:
		//	"forall" name=ID "from" queue=[qool::QoolQueue] ("where" condition=Expression)? statements+=QoolStatement+ "end";
		public ParserRule getRule() { return rule; }

		//"forall" name=ID "from" queue=[qool::QoolQueue] ("where" condition=Expression)? statements+=QoolStatement+ "end"
		public Group getGroup() { return cGroup; }

		//"forall"
		public Keyword getForallKeyword_0() { return cForallKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"from"
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }

		//queue=[qool::QoolQueue]
		public Assignment getQueueAssignment_3() { return cQueueAssignment_3; }

		//[qool::QoolQueue]
		public CrossReference getQueueQoolQueueCrossReference_3_0() { return cQueueQoolQueueCrossReference_3_0; }

		//ID
		public RuleCall getQueueQoolQueueIDTerminalRuleCall_3_0_1() { return cQueueQoolQueueIDTerminalRuleCall_3_0_1; }

		//("where" condition=Expression)?
		public Group getGroup_4() { return cGroup_4; }

		//"where"
		public Keyword getWhereKeyword_4_0() { return cWhereKeyword_4_0; }

		//condition=Expression
		public Assignment getConditionAssignment_4_1() { return cConditionAssignment_4_1; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_4_1_0() { return cConditionExpressionParserRuleCall_4_1_0; }

		//statements+=QoolStatement+
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }

		//QoolStatement
		public RuleCall getStatementsQoolStatementParserRuleCall_5_0() { return cStatementsQoolStatementParserRuleCall_5_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}

	public class EmitStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EmitStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEmitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cQueueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cQueueQoolQueueCrossReference_3_0 = (CrossReference)cQueueAssignment_3.eContents().get(0);
		private final RuleCall cQueueQoolQueueIDTerminalRuleCall_3_0_1 = (RuleCall)cQueueQoolQueueCrossReference_3_0.eContents().get(1);
		
		//EmitStatement returns qool::EmitStatement:
		//	"emit" value=Expression "to" queue=[qool::QoolQueue];
		public ParserRule getRule() { return rule; }

		//"emit" value=Expression "to" queue=[qool::QoolQueue]
		public Group getGroup() { return cGroup; }

		//"emit"
		public Keyword getEmitKeyword_0() { return cEmitKeyword_0; }

		//value=Expression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0() { return cValueExpressionParserRuleCall_1_0; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//queue=[qool::QoolQueue]
		public Assignment getQueueAssignment_3() { return cQueueAssignment_3; }

		//[qool::QoolQueue]
		public CrossReference getQueueQoolQueueCrossReference_3_0() { return cQueueQoolQueueCrossReference_3_0; }

		//ID
		public RuleCall getQueueQoolQueueIDTerminalRuleCall_3_0_1() { return cQueueQoolQueueIDTerminalRuleCall_3_0_1; }
	}

	public class MatchExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MatchExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQueueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cQueueQoolQueueCrossReference_0_0 = (CrossReference)cQueueAssignment_0.eContents().get(0);
		private final RuleCall cQueueQoolQueueIDTerminalRuleCall_0_0_1 = (RuleCall)cQueueQoolQueueCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPredicatesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicatesPredicateParserRuleCall_2_0 = (RuleCall)cPredicatesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPredicatesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPredicatesPredicateParserRuleCall_3_1_0 = (RuleCall)cPredicatesAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MatchExpression returns qool::MatchExpression:
		//	queue=[qool::QoolQueue] "[" predicates+=Predicate ("," predicates+=Predicate)* "]";
		public ParserRule getRule() { return rule; }

		//queue=[qool::QoolQueue] "[" predicates+=Predicate ("," predicates+=Predicate)* "]"
		public Group getGroup() { return cGroup; }

		//queue=[qool::QoolQueue]
		public Assignment getQueueAssignment_0() { return cQueueAssignment_0; }

		//[qool::QoolQueue]
		public CrossReference getQueueQoolQueueCrossReference_0_0() { return cQueueQoolQueueCrossReference_0_0; }

		//ID
		public RuleCall getQueueQoolQueueIDTerminalRuleCall_0_0_1() { return cQueueQoolQueueIDTerminalRuleCall_0_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//predicates+=Predicate
		public Assignment getPredicatesAssignment_2() { return cPredicatesAssignment_2; }

		//Predicate
		public RuleCall getPredicatesPredicateParserRuleCall_2_0() { return cPredicatesPredicateParserRuleCall_2_0; }

		//("," predicates+=Predicate)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//predicates+=Predicate
		public Assignment getPredicatesAssignment_3_1() { return cPredicatesAssignment_3_1; }

		//Predicate
		public RuleCall getPredicatesPredicateParserRuleCall_3_1_0() { return cPredicatesPredicateParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Predicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cKindOfPredicateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyEqualsPredicateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Predicate returns qool::MatchPredicate:
		//	KindOfPredicate | PropertyEqualsPredicate;
		public ParserRule getRule() { return rule; }

		//KindOfPredicate | PropertyEqualsPredicate
		public Alternatives getAlternatives() { return cAlternatives; }

		//KindOfPredicate
		public RuleCall getKindOfPredicateParserRuleCall_0() { return cKindOfPredicateParserRuleCall_0; }

		//PropertyEqualsPredicate
		public RuleCall getPropertyEqualsPredicateParserRuleCall_1() { return cPropertyEqualsPredicateParserRuleCall_1; }
	}

	public class KindOfPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KindOfPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKindOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClass_Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClass_ClassUseParserRuleCall_2_0 = (RuleCall)cClass_Assignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//KindOfPredicate returns qool::KindOfPredicate:
		//	"#kindOf" "(" class_=ClassUse ")";
		public ParserRule getRule() { return rule; }

		//"#kindOf" "(" class_=ClassUse ")"
		public Group getGroup() { return cGroup; }

		//"#kindOf"
		public Keyword getKindOfKeyword_0() { return cKindOfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//class_=ClassUse
		public Assignment getClass_Assignment_2() { return cClass_Assignment_2; }

		//ClassUse
		public RuleCall getClass_ClassUseParserRuleCall_2_0() { return cClass_ClassUseParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class PropertyEqualsPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyEqualsPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertyNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyNameEStringParserRuleCall_2_0 = (RuleCall)cPropertyNameAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueExpressionParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PropertyEqualsPredicate returns qool::PropertyEqualsPredicate:
		//	"#p" "(" propertyName=EString "," value=Expression ")";
		public ParserRule getRule() { return rule; }

		//"#p" "(" propertyName=EString "," value=Expression ")"
		public Group getGroup() { return cGroup; }

		//"#p"
		public Keyword getPKeyword_0() { return cPKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//propertyName=EString
		public Assignment getPropertyNameAssignment_2() { return cPropertyNameAssignment_2; }

		//EString
		public RuleCall getPropertyNameEStringParserRuleCall_2_0() { return cPropertyNameEStringParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//value=Expression
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_4_0() { return cValueExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class CopierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Copier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCopyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cObjectsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObjectsExpressionParserRuleCall_2_0 = (RuleCall)cObjectsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cObjectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cObjectsExpressionParserRuleCall_3_1_0 = (RuleCall)cObjectsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cModelKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCopyInModelAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cCopyInModelTransformationDefinitionParameterCrossReference_6_0 = (CrossReference)cCopyInModelAssignment_6.eContents().get(0);
		private final RuleCall cCopyInModelTransformationDefinitionParameterIDTerminalRuleCall_6_0_1 = (RuleCall)cCopyInModelTransformationDefinitionParameterCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cCallbacksAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cCallbacksCopierCallbackDefinitionParserRuleCall_7_1_0 = (RuleCall)cCallbacksAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cCallbacksAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cCallbacksCopierCallbackDefinitionParserRuleCall_7_2_1_0 = (RuleCall)cCallbacksAssignment_7_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//// Begin-of Facilities
		//Copier returns facilities::Copier:
		//	"copy" "(" objects+=Expression ("," objects+=Expression)* ")" "model"
		//	copyInModel=[core::TransformationDefinitionParameter] ("{" callbacks+=CopierCallbackDefinition (","
		//	callbacks+=CopierCallbackDefinition)* "}")?;
		public ParserRule getRule() { return rule; }

		//"copy" "(" objects+=Expression ("," objects+=Expression)* ")" "model"
		//copyInModel=[core::TransformationDefinitionParameter] ("{" callbacks+=CopierCallbackDefinition (","
		//callbacks+=CopierCallbackDefinition)* "}")?
		public Group getGroup() { return cGroup; }

		//"copy"
		public Keyword getCopyKeyword_0() { return cCopyKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//objects+=Expression
		public Assignment getObjectsAssignment_2() { return cObjectsAssignment_2; }

		//Expression
		public RuleCall getObjectsExpressionParserRuleCall_2_0() { return cObjectsExpressionParserRuleCall_2_0; }

		//("," objects+=Expression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//objects+=Expression
		public Assignment getObjectsAssignment_3_1() { return cObjectsAssignment_3_1; }

		//Expression
		public RuleCall getObjectsExpressionParserRuleCall_3_1_0() { return cObjectsExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"model"
		public Keyword getModelKeyword_5() { return cModelKeyword_5; }

		//copyInModel=[core::TransformationDefinitionParameter]
		public Assignment getCopyInModelAssignment_6() { return cCopyInModelAssignment_6; }

		//[core::TransformationDefinitionParameter]
		public CrossReference getCopyInModelTransformationDefinitionParameterCrossReference_6_0() { return cCopyInModelTransformationDefinitionParameterCrossReference_6_0; }

		//ID
		public RuleCall getCopyInModelTransformationDefinitionParameterIDTerminalRuleCall_6_0_1() { return cCopyInModelTransformationDefinitionParameterIDTerminalRuleCall_6_0_1; }

		//("{" callbacks+=CopierCallbackDefinition ("," callbacks+=CopierCallbackDefinition)* "}")?
		public Group getGroup_7() { return cGroup_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_0() { return cLeftCurlyBracketKeyword_7_0; }

		//callbacks+=CopierCallbackDefinition
		public Assignment getCallbacksAssignment_7_1() { return cCallbacksAssignment_7_1; }

		//CopierCallbackDefinition
		public RuleCall getCallbacksCopierCallbackDefinitionParserRuleCall_7_1_0() { return cCallbacksCopierCallbackDefinitionParserRuleCall_7_1_0; }

		//("," callbacks+=CopierCallbackDefinition)*
		public Group getGroup_7_2() { return cGroup_7_2; }

		//","
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }

		//callbacks+=CopierCallbackDefinition
		public Assignment getCallbacksAssignment_7_2_1() { return cCallbacksAssignment_7_2_1; }

		//CopierCallbackDefinition
		public RuleCall getCallbacksCopierCallbackDefinitionParserRuleCall_7_2_1_0() { return cCallbacksCopierCallbackDefinitionParserRuleCall_7_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}

	public class CopierCallbackDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CopierCallbackDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cWithKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cStopAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cStopStopKeyword_0_1_0 = (Keyword)cStopAssignment_0_1.eContents().get(0);
		private final Assignment cTriggerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTriggerExpressionParserRuleCall_1_0 = (RuleCall)cTriggerAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionExpressionParserRuleCall_3_0 = (RuleCall)cActionAssignment_3.eContents().get(0);
		
		//CopierCallbackDefinition returns facilities::CopierCallbackDefinition:
		//	("with" | stop?="stop") trigger=Expression "->" action=Expression;
		public ParserRule getRule() { return rule; }

		//("with" | stop?="stop") trigger=Expression "->" action=Expression
		public Group getGroup() { return cGroup; }

		//"with" | stop?="stop"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"with"
		public Keyword getWithKeyword_0_0() { return cWithKeyword_0_0; }

		//stop?="stop"
		public Assignment getStopAssignment_0_1() { return cStopAssignment_0_1; }

		//"stop"
		public Keyword getStopStopKeyword_0_1_0() { return cStopStopKeyword_0_1_0; }

		//trigger=Expression
		public Assignment getTriggerAssignment_1() { return cTriggerAssignment_1; }

		//Expression
		public RuleCall getTriggerExpressionParserRuleCall_1_0() { return cTriggerExpressionParserRuleCall_1_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }

		//action=Expression
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }

		//Expression
		public RuleCall getActionExpressionParserRuleCall_3_0() { return cActionExpressionParserRuleCall_3_0; }
	}

	public class TaoTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TaoTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInModelsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInModelsTransformationDefinitionParameterParserRuleCall_3_0 = (RuleCall)cInModelsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInModelsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInModelsTransformationDefinitionParameterParserRuleCall_4_1_0 = (RuleCall)cInModelsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOutModelsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOutModelsTransformationDefinitionParameterParserRuleCall_8_0 = (RuleCall)cOutModelsAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cOutModelsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cOutModelsTransformationDefinitionParameterParserRuleCall_9_1_0 = (RuleCall)cOutModelsAssignment_9_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cUsesAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cUsesUsesStatementsParserRuleCall_11_0 = (RuleCall)cUsesAssignment_11.eContents().get(0);
		private final Assignment cTemplatesAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cTemplatesTemplateParserRuleCall_12_0 = (RuleCall)cTemplatesAssignment_12.eContents().get(0);
		private final Keyword cEndKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//// End-of facilities
		/////
		///// End-of Qool
		/////
		/////
		///// Being-of TAO
		/////
		//TaoTransformation returns tao::TaoTransformation:
		//	"tao" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
		//	//'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//	"(" inModels+=TransformationDefinitionParameter ("," inModels+=TransformationDefinitionParameter)* ")" "->" "("
		//	outModels+=TransformationDefinitionParameter ("," outModels+=TransformationDefinitionParameter)* ")"
		//	uses+=UsesStatements* templates+=Template+ "end";
		public ParserRule getRule() { return rule; }

		//"tao" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
		////'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//"(" inModels+=TransformationDefinitionParameter ("," inModels+=TransformationDefinitionParameter)* ")" "->" "("
		//outModels+=TransformationDefinitionParameter ("," outModels+=TransformationDefinitionParameter)* ")"
		//uses+=UsesStatements* templates+=Template+ "end"
		public Group getGroup() { return cGroup; }

		//"tao"
		public Keyword getTaoKeyword_0() { return cTaoKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//// '(' left=[core::TransformationDefinitionParameter|EString] ')'
		////'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//inModels+=TransformationDefinitionParameter
		public Assignment getInModelsAssignment_3() { return cInModelsAssignment_3; }

		//TransformationDefinitionParameter
		public RuleCall getInModelsTransformationDefinitionParameterParserRuleCall_3_0() { return cInModelsTransformationDefinitionParameterParserRuleCall_3_0; }

		//("," inModels+=TransformationDefinitionParameter)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//inModels+=TransformationDefinitionParameter
		public Assignment getInModelsAssignment_4_1() { return cInModelsAssignment_4_1; }

		//TransformationDefinitionParameter
		public RuleCall getInModelsTransformationDefinitionParameterParserRuleCall_4_1_0() { return cInModelsTransformationDefinitionParameterParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_6() { return cHyphenMinusGreaterThanSignKeyword_6; }

		//"("
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }

		//outModels+=TransformationDefinitionParameter
		public Assignment getOutModelsAssignment_8() { return cOutModelsAssignment_8; }

		//TransformationDefinitionParameter
		public RuleCall getOutModelsTransformationDefinitionParameterParserRuleCall_8_0() { return cOutModelsTransformationDefinitionParameterParserRuleCall_8_0; }

		//("," outModels+=TransformationDefinitionParameter)*
		public Group getGroup_9() { return cGroup_9; }

		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }

		//outModels+=TransformationDefinitionParameter
		public Assignment getOutModelsAssignment_9_1() { return cOutModelsAssignment_9_1; }

		//TransformationDefinitionParameter
		public RuleCall getOutModelsTransformationDefinitionParameterParserRuleCall_9_1_0() { return cOutModelsTransformationDefinitionParameterParserRuleCall_9_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }

		//uses+=UsesStatements*
		public Assignment getUsesAssignment_11() { return cUsesAssignment_11; }

		//UsesStatements
		public RuleCall getUsesUsesStatementsParserRuleCall_11_0() { return cUsesUsesStatementsParserRuleCall_11_0; }

		//templates+=Template+
		public Assignment getTemplatesAssignment_12() { return cTemplatesAssignment_12; }

		//Template
		public RuleCall getTemplatesTemplateParserRuleCall_12_0() { return cTemplatesTemplateParserRuleCall_12_0; }

		//"end"
		public Keyword getEndKeyword_13() { return cEndKeyword_13; }
	}

	public class TemplateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Template");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTemplateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersTemplateParameterParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParametersTemplateParameterParserRuleCall_4_1_0 = (RuleCall)cParametersAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRootsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRootsTemplateRootObjectParserRuleCall_6_0 = (RuleCall)cRootsAssignment_6.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// @common
		//Template returns tao::Template:
		//	"template" name=ID "(" parameters+=TemplateParameter ("," parameters+=TemplateParameter)* ")"
		//	roots+=TemplateRootObject "end";
		public ParserRule getRule() { return rule; }

		//"template" name=ID "(" parameters+=TemplateParameter ("," parameters+=TemplateParameter)* ")" roots+=TemplateRootObject
		//"end"
		public Group getGroup() { return cGroup; }

		//"template"
		public Keyword getTemplateKeyword_0() { return cTemplateKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//parameters+=TemplateParameter
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }

		//TemplateParameter
		public RuleCall getParametersTemplateParameterParserRuleCall_3_0() { return cParametersTemplateParameterParserRuleCall_3_0; }

		//("," parameters+=TemplateParameter)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//parameters+=TemplateParameter
		public Assignment getParametersAssignment_4_1() { return cParametersAssignment_4_1; }

		//TemplateParameter
		public RuleCall getParametersTemplateParameterParserRuleCall_4_1_0() { return cParametersTemplateParameterParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//roots+=TemplateRootObject
		public Assignment getRootsAssignment_6() { return cRootsAssignment_6; }

		//TemplateRootObject
		public RuleCall getRootsTemplateRootObjectParserRuleCall_6_0() { return cRootsTemplateRootObjectParserRuleCall_6_0; }

		//"end"
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }
	}

	public class TemplateParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeClassUseParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//TemplateParameter returns tao::TemplateParameter:
		//	name=ID ":" type=ClassUse;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=ClassUse
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=ClassUse
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//ClassUse
		public RuleCall getTypeClassUseParserRuleCall_2_0() { return cTypeClassUseParserRuleCall_2_0; }
	}

	public class TaoExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TaoExpression");
		private final RuleCall cWithResolveMethodCallParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// To avoid conflicts, because Statement is not actually used
		////Statement returns core::Statement: 
		////	DefineVariable
		////;
		//// "redefine" Expression
		//TaoExpression returns core::Expression:
		//	WithResolveMethodCall;
		public ParserRule getRule() { return rule; }

		//WithResolveMethodCall
		public RuleCall getWithResolveMethodCallParserRuleCall() { return cWithResolveMethodCallParserRuleCall; }
	}

	public class TemplateRootObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateRootObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeClassUseParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAssigmentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAssigmentsAssignmentParserRuleCall_3_0 = (RuleCall)cAssigmentsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TemplateRootObject returns tao::TemplateRootObject:
		//	(name=ID ":")? // 	ObjectInstantiation
		//	//  Duplicated!
		//	type=ClassUse "{" assigments+=Assignment* "}";
		public ParserRule getRule() { return rule; }

		//(name=ID ":")? // 	ObjectInstantiation
		////  Duplicated!
		//type=ClassUse "{" assigments+=Assignment* "}"
		public Group getGroup() { return cGroup; }

		//(name=ID ":")?
		public Group getGroup_0() { return cGroup_0; }

		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//type=ClassUse
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ClassUse
		public RuleCall getTypeClassUseParserRuleCall_1_0() { return cTypeClassUseParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//assigments+=Assignment*
		public Assignment getAssigmentsAssignment_3() { return cAssigmentsAssignment_3; }

		//Assignment
		public RuleCall getAssigmentsAssignmentParserRuleCall_3_0() { return cAssigmentsAssignmentParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ObjectInstantiationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectInstantiation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeClassUseParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAssigmentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAssigmentsAssignmentParserRuleCall_3_0 = (RuleCall)cAssigmentsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ObjectInstantiation returns tao::ObjectInstantiation:
		//	(name=ID ":")? type=ClassUse "{" assigments+=Assignment* "}";
		public ParserRule getRule() { return rule; }

		//(name=ID ":")? type=ClassUse "{" assigments+=Assignment* "}"
		public Group getGroup() { return cGroup; }

		//(name=ID ":")?
		public Group getGroup_0() { return cGroup_0; }

		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//type=ClassUse
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ClassUse
		public RuleCall getTypeClassUseParserRuleCall_1_0() { return cTypeClassUseParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//assigments+=Assignment*
		public Assignment getAssigmentsAssignment_3() { return cAssigmentsAssignment_3; }

		//Assignment
		public RuleCall getAssigmentsAssignmentParserRuleCall_3_0() { return cAssigmentsAssignmentParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeAssigmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectSyntaxParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInvocationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Assignment returns tao::Assignment:
		//	AttributeAssigment | ObjectSyntax | Invocation;
		public ParserRule getRule() { return rule; }

		//AttributeAssigment | ObjectSyntax | Invocation
		public Alternatives getAlternatives() { return cAlternatives; }

		//AttributeAssigment
		public RuleCall getAttributeAssigmentParserRuleCall_0() { return cAttributeAssigmentParserRuleCall_0; }

		//ObjectSyntax
		public RuleCall getObjectSyntaxParserRuleCall_1() { return cObjectSyntaxParserRuleCall_1; }

		//Invocation
		public RuleCall getInvocationParserRuleCall_2() { return cInvocationParserRuleCall_2; }
	}

	public class AttributeAssigmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeAssigment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetFeatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetFeatureIDTerminalRuleCall_0_0 = (RuleCall)cTargetFeatureAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprSourceExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//AttributeAssigment returns tao::AttributeAssigment:
		//	targetFeature=ID "=" expr=SourceExpression;
		public ParserRule getRule() { return rule; }

		//targetFeature=ID "=" expr=SourceExpression
		public Group getGroup() { return cGroup; }

		//targetFeature=ID
		public Assignment getTargetFeatureAssignment_0() { return cTargetFeatureAssignment_0; }

		//ID
		public RuleCall getTargetFeatureIDTerminalRuleCall_0_0() { return cTargetFeatureIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expr=SourceExpression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//SourceExpression
		public RuleCall getExprSourceExpressionParserRuleCall_2_0() { return cExprSourceExpressionParserRuleCall_2_0; }
	}

	public class SourceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SourceExpression");
		private final RuleCall cWithOptionalVariableExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////	| NormalExpression 
		//SourceExpression returns tao::SourceExpression:
		//	WithOptionalVariableExpression;
		public ParserRule getRule() { return rule; }

		//WithOptionalVariableExpression
		public RuleCall getWithOptionalVariableExpressionParserRuleCall() { return cWithOptionalVariableExpressionParserRuleCall; }
	}

	public class WithOptionalVariableExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WithOptionalVariableExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVariableObjectSourceVariableParserRuleCall_0_0_0 = (RuleCall)cVariableAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprTaoExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//WithOptionalVariableExpression returns tao::WithOptionalVariableExpression:
		//	(variable=ObjectSourceVariable ":")? expr= // receptor=[core::Variable] "." sourceFeature=ID
		//	TaoExpression;
		public ParserRule getRule() { return rule; }

		//(variable=ObjectSourceVariable ":")? expr= // receptor=[core::Variable] "." sourceFeature=ID
		//TaoExpression
		public Group getGroup() { return cGroup; }

		//(variable=ObjectSourceVariable ":")?
		public Group getGroup_0() { return cGroup_0; }

		//variable=ObjectSourceVariable
		public Assignment getVariableAssignment_0_0() { return cVariableAssignment_0_0; }

		//ObjectSourceVariable
		public RuleCall getVariableObjectSourceVariableParserRuleCall_0_0_0() { return cVariableObjectSourceVariableParserRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//expr= // receptor=[core::Variable] "." sourceFeature=ID
		//TaoExpression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//// receptor=[core::Variable] "." sourceFeature=ID
		//TaoExpression
		public RuleCall getExprTaoExpressionParserRuleCall_1_0() { return cExprTaoExpressionParserRuleCall_1_0; }
	}

	public class ObjectSourceVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectSourceVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ObjectSourceVariable returns tao::ObjectSourceVariable:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ObjectSyntaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectSyntax");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetFeatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetFeatureIDTerminalRuleCall_0_0 = (RuleCall)cTargetFeatureAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFromKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprSourceExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		private final Assignment cMultivaluedAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final Keyword cMultivaluedAsteriskKeyword_2_2_0 = (Keyword)cMultivaluedAssignment_2_2.eContents().get(0);
		private final Keyword cToKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cObjectAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectObjectInstantiationParserRuleCall_3_0 = (RuleCall)cObjectAssignment_3.eContents().get(0);
		
		//ObjectSyntax returns tao::ObjectSyntax:
		//	targetFeature=ID "=" ("from" expr=SourceExpression multivalued?="*"? "to")? object=ObjectInstantiation;
		public ParserRule getRule() { return rule; }

		//targetFeature=ID "=" ("from" expr=SourceExpression multivalued?="*"? "to")? object=ObjectInstantiation
		public Group getGroup() { return cGroup; }

		//targetFeature=ID
		public Assignment getTargetFeatureAssignment_0() { return cTargetFeatureAssignment_0; }

		//ID
		public RuleCall getTargetFeatureIDTerminalRuleCall_0_0() { return cTargetFeatureIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//("from" expr=SourceExpression multivalued?="*"? "to")?
		public Group getGroup_2() { return cGroup_2; }

		//"from"
		public Keyword getFromKeyword_2_0() { return cFromKeyword_2_0; }

		//expr=SourceExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }

		//SourceExpression
		public RuleCall getExprSourceExpressionParserRuleCall_2_1_0() { return cExprSourceExpressionParserRuleCall_2_1_0; }

		//multivalued?="*"?
		public Assignment getMultivaluedAssignment_2_2() { return cMultivaluedAssignment_2_2; }

		//"*"
		public Keyword getMultivaluedAsteriskKeyword_2_2_0() { return cMultivaluedAsteriskKeyword_2_2_0; }

		//"to"
		public Keyword getToKeyword_2_3() { return cToKeyword_2_3; }

		//object=ObjectInstantiation
		public Assignment getObjectAssignment_3() { return cObjectAssignment_3; }

		//ObjectInstantiation
		public RuleCall getObjectObjectInstantiationParserRuleCall_3_0() { return cObjectObjectInstantiationParserRuleCall_3_0; }
	}

	public class InvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Invocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetFeatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetFeatureIDTerminalRuleCall_0_0 = (RuleCall)cTargetFeatureAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTemplateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTemplateTemplateCrossReference_2_0 = (CrossReference)cTemplateAssignment_2.eContents().get(0);
		private final RuleCall cTemplateTemplateIDTerminalRuleCall_2_0_1 = (RuleCall)cTemplateTemplateCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprSourceExpressionParserRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		private final Assignment cMultivaluedAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cMultivaluedAsteriskKeyword_5_0 = (Keyword)cMultivaluedAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Invocation returns tao::Invocation:
		//	targetFeature=ID "=" template=[tao::Template] "(" expr=SourceExpression multivalued?="*"? ")";
		public ParserRule getRule() { return rule; }

		//targetFeature=ID "=" template=[tao::Template] "(" expr=SourceExpression multivalued?="*"? ")"
		public Group getGroup() { return cGroup; }

		//targetFeature=ID
		public Assignment getTargetFeatureAssignment_0() { return cTargetFeatureAssignment_0; }

		//ID
		public RuleCall getTargetFeatureIDTerminalRuleCall_0_0() { return cTargetFeatureIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//template=[tao::Template]
		public Assignment getTemplateAssignment_2() { return cTemplateAssignment_2; }

		//[tao::Template]
		public CrossReference getTemplateTemplateCrossReference_2_0() { return cTemplateTemplateCrossReference_2_0; }

		//ID
		public RuleCall getTemplateTemplateIDTerminalRuleCall_2_0_1() { return cTemplateTemplateIDTerminalRuleCall_2_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//expr=SourceExpression
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }

		//SourceExpression
		public RuleCall getExprSourceExpressionParserRuleCall_4_0() { return cExprSourceExpressionParserRuleCall_4_0; }

		//multivalued?="*"?
		public Assignment getMultivaluedAssignment_5() { return cMultivaluedAssignment_5; }

		//"*"
		public Keyword getMultivaluedAsteriskKeyword_5_0() { return cMultivaluedAsteriskKeyword_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class AttributionTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributionTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInModelsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInModelsTransformationDefinitionParameterParserRuleCall_3_0 = (RuleCall)cInModelsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInModelsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInModelsTransformationDefinitionParameterParserRuleCall_4_1_0 = (RuleCall)cInModelsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOutModelsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOutModelsTransformationDefinitionParameterParserRuleCall_8_0 = (RuleCall)cOutModelsAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cInModelsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cInModelsTransformationDefinitionParameterParserRuleCall_9_1_0 = (RuleCall)cInModelsAssignment_9_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cAnnotationsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_11_0 = (RuleCall)cAnnotationsAssignment_11.eContents().get(0);
		private final Assignment cUsesAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cUsesUsesStatementsParserRuleCall_12_0 = (RuleCall)cUsesAssignment_12.eContents().get(0);
		private final Assignment cAttributesAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cAttributesAttributeDclParserRuleCall_13_0 = (RuleCall)cAttributesAssignment_13.eContents().get(0);
		private final Assignment cRulesAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cRulesAttributionRuleParserRuleCall_14_0 = (RuleCall)cRulesAssignment_14.eContents().get(0);
		private final Keyword cEndKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		/////
		///// End-of TAO
		/////
		/////
		///// Begin-of Attribute
		/////
		//AttributionTransformation returns attr::AttributionTransformation:
		//	"attribution" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
		//	//'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//	"(" inModels+=TransformationDefinitionParameter ("," inModels+=TransformationDefinitionParameter)* ")" "->" "("
		//	outModels+=TransformationDefinitionParameter? ("," inModels+=TransformationDefinitionParameter)* ")"
		//	annotations+=Annotation* // like this to resolve a reference: it is not the case
		//	//'(' right=[core::TransformationDefinitionParameter|EString] ')'
		//	// ('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		//	//('inModels' '{' inModels+=TransformationDefinitionParameter ( "," inModels+=TransformationDefinitionParameter)* '}' )?
		//	// ('outModels' '{' outModels+=TransformationDefinitionParameter ( "," outModels+=TransformationDefinitionParameter)* '}' )?
		//	// (traceInterface = TraceInterface)
		//	uses+=UsesStatements* attributes+=AttributeDcl* rules+=AttributionRule+ "end";
		public ParserRule getRule() { return rule; }

		//"attribution" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
		////'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//"(" inModels+=TransformationDefinitionParameter ("," inModels+=TransformationDefinitionParameter)* ")" "->" "("
		//outModels+=TransformationDefinitionParameter? ("," inModels+=TransformationDefinitionParameter)* ")"
		//annotations+=Annotation* // like this to resolve a reference: it is not the case
		////'(' right=[core::TransformationDefinitionParameter|EString] ')'
		//// ('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		////('inModels' '{' inModels+=TransformationDefinitionParameter ( "," inModels+=TransformationDefinitionParameter)* '}' )?
		//// ('outModels' '{' outModels+=TransformationDefinitionParameter ( "," outModels+=TransformationDefinitionParameter)* '}' )?
		//// (traceInterface = TraceInterface)
		//uses+=UsesStatements* attributes+=AttributeDcl* rules+=AttributionRule+ "end"
		public Group getGroup() { return cGroup; }

		//"attribution"
		public Keyword getAttributionKeyword_0() { return cAttributionKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//// '(' left=[core::TransformationDefinitionParameter|EString] ')'
		////'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//inModels+=TransformationDefinitionParameter
		public Assignment getInModelsAssignment_3() { return cInModelsAssignment_3; }

		//TransformationDefinitionParameter
		public RuleCall getInModelsTransformationDefinitionParameterParserRuleCall_3_0() { return cInModelsTransformationDefinitionParameterParserRuleCall_3_0; }

		//("," inModels+=TransformationDefinitionParameter)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//inModels+=TransformationDefinitionParameter
		public Assignment getInModelsAssignment_4_1() { return cInModelsAssignment_4_1; }

		//TransformationDefinitionParameter
		public RuleCall getInModelsTransformationDefinitionParameterParserRuleCall_4_1_0() { return cInModelsTransformationDefinitionParameterParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_6() { return cHyphenMinusGreaterThanSignKeyword_6; }

		//"("
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }

		//outModels+=TransformationDefinitionParameter?
		public Assignment getOutModelsAssignment_8() { return cOutModelsAssignment_8; }

		//TransformationDefinitionParameter
		public RuleCall getOutModelsTransformationDefinitionParameterParserRuleCall_8_0() { return cOutModelsTransformationDefinitionParameterParserRuleCall_8_0; }

		//("," inModels+=TransformationDefinitionParameter)*
		public Group getGroup_9() { return cGroup_9; }

		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }

		//inModels+=TransformationDefinitionParameter
		public Assignment getInModelsAssignment_9_1() { return cInModelsAssignment_9_1; }

		//TransformationDefinitionParameter
		public RuleCall getInModelsTransformationDefinitionParameterParserRuleCall_9_1_0() { return cInModelsTransformationDefinitionParameterParserRuleCall_9_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_11() { return cAnnotationsAssignment_11; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_11_0() { return cAnnotationsAnnotationParserRuleCall_11_0; }

		//uses+=UsesStatements*
		public Assignment getUsesAssignment_12() { return cUsesAssignment_12; }

		//UsesStatements
		public RuleCall getUsesUsesStatementsParserRuleCall_12_0() { return cUsesUsesStatementsParserRuleCall_12_0; }

		//attributes+=AttributeDcl*
		public Assignment getAttributesAssignment_13() { return cAttributesAssignment_13; }

		//AttributeDcl
		public RuleCall getAttributesAttributeDclParserRuleCall_13_0() { return cAttributesAttributeDclParserRuleCall_13_0; }

		//rules+=AttributionRule+
		public Assignment getRulesAssignment_14() { return cRulesAssignment_14; }

		//AttributionRule
		public RuleCall getRulesAttributionRuleParserRuleCall_14_0() { return cRulesAttributionRuleParserRuleCall_14_0; }

		//"end"
		public Keyword getEndKeyword_15() { return cEndKeyword_15; }
	}

	public class AttributeDclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeDcl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInheritedAttributeDclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSynthesizedAttributeDclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AttributeDcl returns attr::AttributeDcl:
		//	InheritedAttributeDcl | SynthesizedAttributeDcl;
		public ParserRule getRule() { return rule; }

		//InheritedAttributeDcl | SynthesizedAttributeDcl
		public Alternatives getAlternatives() { return cAlternatives; }

		//InheritedAttributeDcl
		public RuleCall getInheritedAttributeDclParserRuleCall_0() { return cInheritedAttributeDclParserRuleCall_0; }

		//SynthesizedAttributeDcl
		public RuleCall getSynthesizedAttributeDclParserRuleCall_1() { return cSynthesizedAttributeDclParserRuleCall_1; }
	}

	public class InheritedAttributeDclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InheritedAttributeDcl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInhKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cType_Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cType_ClassUseParserRuleCall_3_0 = (RuleCall)cType_Assignment_3.eContents().get(0);
		
		//InheritedAttributeDcl returns attr::InheritedAttributeDcl:
		//	"inh" name=ID ":" type_=ClassUse;
		public ParserRule getRule() { return rule; }

		//"inh" name=ID ":" type_=ClassUse
		public Group getGroup() { return cGroup; }

		//"inh"
		public Keyword getInhKeyword_0() { return cInhKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type_=ClassUse
		public Assignment getType_Assignment_3() { return cType_Assignment_3; }

		//ClassUse
		public RuleCall getType_ClassUseParserRuleCall_3_0() { return cType_ClassUseParserRuleCall_3_0; }
	}

	public class SynthesizedAttributeDclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SynthesizedAttributeDcl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSynKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cType_Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cType_ClassUseParserRuleCall_3_0 = (RuleCall)cType_Assignment_3.eContents().get(0);
		
		//SynthesizedAttributeDcl returns attr::SynthesizedAttributeDcl:
		//	"syn" name=ID ":" type_=ClassUse;
		public ParserRule getRule() { return rule; }

		//"syn" name=ID ":" type_=ClassUse
		public Group getGroup() { return cGroup; }

		//"syn"
		public Keyword getSynKeyword_0() { return cSynKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type_=ClassUse
		public Assignment getType_Assignment_3() { return cType_Assignment_3; }

		//ClassUse
		public RuleCall getType_ClassUseParserRuleCall_3_0() { return cType_ClassUseParserRuleCall_3_0; }
	}

	public class AttributionRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributionRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeClassUseParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsAttributionStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AttributionRule returns attr::AttributionRule:
		//	"rule" type=ClassUse statements+=AttributionStatement+ //		("properties:"
		//	//		(statements+=PropertyWrite)+)? // It does not recognize property writes as parts of statements!
		//	"end";
		public ParserRule getRule() { return rule; }

		//"rule" type=ClassUse statements+=AttributionStatement+ //		("properties:"
		////		(statements+=PropertyWrite)+)? // It does not recognize property writes as parts of statements!
		//"end"
		public Group getGroup() { return cGroup; }

		//"rule"
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//type=ClassUse
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ClassUse
		public RuleCall getTypeClassUseParserRuleCall_1_0() { return cTypeClassUseParserRuleCall_1_0; }

		//statements+=AttributionStatement+
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//AttributionStatement
		public RuleCall getStatementsAttributionStatementParserRuleCall_2_0() { return cStatementsAttributionStatementParserRuleCall_2_0; }

		////		("properties:"
		////		(statements+=PropertyWrite)+)? // It does not recognize property writes as parts of statements!
		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}

	public class AttributionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributionStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributionDefineVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributionExpressionNoUseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAttributeInitParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPropertyWriteParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// redefine
		//AttributionStatement returns core::Statement:
		//	AttributionDefineVariable // | Expression // This is to avoid conflicts, but I don't think standalone expressions are really needed here
		//	// | AttributionExpression
		//	| AttributionExpressionNoUse | AttributeInit | PropertyWrite;
		public ParserRule getRule() { return rule; }

		//AttributionDefineVariable // | Expression // This is to avoid conflicts, but I don't think standalone expressions are really needed here
		//// | AttributionExpression
		//| AttributionExpressionNoUse | AttributeInit | PropertyWrite
		public Alternatives getAlternatives() { return cAlternatives; }

		//AttributionDefineVariable
		public RuleCall getAttributionDefineVariableParserRuleCall_0() { return cAttributionDefineVariableParserRuleCall_0; }

		//AttributionExpressionNoUse
		public RuleCall getAttributionExpressionNoUseParserRuleCall_1() { return cAttributionExpressionNoUseParserRuleCall_1; }

		//AttributeInit
		public RuleCall getAttributeInitParserRuleCall_2() { return cAttributeInitParserRuleCall_2; }

		//PropertyWrite
		public RuleCall getPropertyWriteParserRuleCall_3() { return cPropertyWriteParserRuleCall_3; }
	}

	public class AttributionDefineVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributionDefineVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionAttributionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//AttributionDefineVariable returns core::DefineVariable:
		//	name=EString "=" expression=AttributionExpression;
		public ParserRule getRule() { return rule; }

		//name=EString "=" expression=AttributionExpression
		public Group getGroup() { return cGroup; }

		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expression=AttributionExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//AttributionExpression
		public RuleCall getExpressionAttributionExpressionParserRuleCall_2_0() { return cExpressionAttributionExpressionParserRuleCall_2_0; }
	}

	public class AttributionClosureDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributionClosureDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFormalParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFormalParametersClosureParameterParserRuleCall_1_1_0 = (RuleCall)cFormalParametersAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cFormalParametersAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cFormalParametersClosureParameterParserRuleCall_1_2_1_0 = (RuleCall)cFormalParametersAssignment_1_2_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsAttributionStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/// *
		//AttributionClosureStatement returns core::Statement: 
		//	DefineVariable
		//	// | Expression 
		//	| PropertyWrite
		//	| VariableReference 
		//	| AttributeInit	// Let's see if this compile and works...
		//	
		//	// TODO: Allow normal expressions in closures... conflict currently
		//;
		// * / // Redefined
		//AttributionClosureDeclaration returns core::ClosureDeclaration:
		//	"{" ("|" formalParameters+=ClosureParameter ("," formalParameters+=ClosureParameter)* "|")?
		//	statements+=AttributionStatement+ "}";
		public ParserRule getRule() { return rule; }

		//"{" ("|" formalParameters+=ClosureParameter ("," formalParameters+=ClosureParameter)* "|")?
		//statements+=AttributionStatement+ "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//("|" formalParameters+=ClosureParameter ("," formalParameters+=ClosureParameter)* "|")?
		public Group getGroup_1() { return cGroup_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }

		//formalParameters+=ClosureParameter
		public Assignment getFormalParametersAssignment_1_1() { return cFormalParametersAssignment_1_1; }

		//ClosureParameter
		public RuleCall getFormalParametersClosureParameterParserRuleCall_1_1_0() { return cFormalParametersClosureParameterParserRuleCall_1_1_0; }

		//("," formalParameters+=ClosureParameter)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//formalParameters+=ClosureParameter
		public Assignment getFormalParametersAssignment_1_2_1() { return cFormalParametersAssignment_1_2_1; }

		//ClosureParameter
		public RuleCall getFormalParametersClosureParameterParserRuleCall_1_2_1_0() { return cFormalParametersClosureParameterParserRuleCall_1_2_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_3() { return cVerticalLineKeyword_1_3; }

		//statements+=AttributionStatement+
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//AttributionStatement
		public RuleCall getStatementsAttributionStatementParserRuleCall_2_0() { return cStatementsAttributionStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class AttributionPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributionPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cModelReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cParenthesizedExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAttributionClosureDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cAttributeUseParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//// redefine
		////	| InheritedAttributeUse   // <-- added for attribution
		//// | SynthesizedAttributeUse // <-- added for attribution
		//AttributionPrimaryExpression returns core::Expression:
		//	Literal | VariableReference | ModelReference | ParenthesizedExpression | AttributionClosureDeclaration | AttributeUse;
		public ParserRule getRule() { return rule; }

		//Literal | VariableReference | ModelReference | ParenthesizedExpression | AttributionClosureDeclaration | AttributeUse
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_1() { return cVariableReferenceParserRuleCall_1; }

		//ModelReference
		public RuleCall getModelReferenceParserRuleCall_2() { return cModelReferenceParserRuleCall_2; }

		//ParenthesizedExpression
		public RuleCall getParenthesizedExpressionParserRuleCall_3() { return cParenthesizedExpressionParserRuleCall_3; }

		//AttributionClosureDeclaration
		public RuleCall getAttributionClosureDeclarationParserRuleCall_4() { return cAttributionClosureDeclarationParserRuleCall_4; }

		//AttributeUse
		public RuleCall getAttributeUseParserRuleCall_5() { return cAttributeUseParserRuleCall_5; }
	}

	public class AttributionPrimaryExpressionNoUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributionPrimaryExpressionNoUse");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cModelReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cParenthesizedExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAttributionClosureDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIfExprParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//AttributionPrimaryExpressionNoUse returns core::Expression:
		//	Literal | VariableReference | ModelReference | ParenthesizedExpression | AttributionClosureDeclaration | IfExpr;
		public ParserRule getRule() { return rule; }

		//Literal | VariableReference | ModelReference | ParenthesizedExpression | AttributionClosureDeclaration | IfExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_1() { return cVariableReferenceParserRuleCall_1; }

		//ModelReference
		public RuleCall getModelReferenceParserRuleCall_2() { return cModelReferenceParserRuleCall_2; }

		//ParenthesizedExpression
		public RuleCall getParenthesizedExpressionParserRuleCall_3() { return cParenthesizedExpressionParserRuleCall_3; }

		//AttributionClosureDeclaration
		public RuleCall getAttributionClosureDeclarationParserRuleCall_4() { return cAttributionClosureDeclarationParserRuleCall_4; }

		//IfExpr
		public RuleCall getIfExprParserRuleCall_5() { return cIfExprParserRuleCall_5; }
	}

	public class AttributionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributionExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributionMethodCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributionResolveLinkAsArrayParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AttributionExpression returns core::Expression: // AttributionMethodCall	
		//	AttributionMethodCall | // | AttributeUse	
		//	AttributionResolveLinkAsArray;
		public ParserRule getRule() { return rule; }

		//// AttributionMethodCall	
		//AttributionMethodCall | // | AttributeUse	
		//AttributionResolveLinkAsArray
		public Alternatives getAlternatives() { return cAlternatives; }

		//// AttributionMethodCall	
		//AttributionMethodCall
		public RuleCall getAttributionMethodCallParserRuleCall_0() { return cAttributionMethodCallParserRuleCall_0; }

		//// | AttributeUse	
		//AttributionResolveLinkAsArray
		public RuleCall getAttributionResolveLinkAsArrayParserRuleCall_1() { return cAttributionResolveLinkAsArrayParserRuleCall_1; }
	}

	public class AttributionExpressionNoUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributionExpressionNoUse");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributionMethodCallNoUseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributionResolveLinkAsArrayParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AttributionExpressionNoUse returns core::Expression:
		//	AttributionMethodCallNoUse | AttributionResolveLinkAsArray;
		public ParserRule getRule() { return rule; }

		//AttributionMethodCallNoUse | AttributionResolveLinkAsArray
		public Alternatives getAlternatives() { return cAlternatives; }

		//AttributionMethodCallNoUse
		public RuleCall getAttributionMethodCallNoUseParserRuleCall_0() { return cAttributionMethodCallNoUseParserRuleCall_0; }

		//AttributionResolveLinkAsArray
		public RuleCall getAttributionResolveLinkAsArrayParserRuleCall_1() { return cAttributionResolveLinkAsArrayParserRuleCall_1; }
	}

	public class AttributionResolveLinkAsArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributionResolveLinkAsArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cModuleAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cModuleUseDeclarationCrossReference_0_0_0 = (CrossReference)cModuleAssignment_0_0.eContents().get(0);
		private final RuleCall cModuleUseDeclarationIDTerminalRuleCall_0_0_0_1 = (RuleCall)cModuleUseDeclarationCrossReference_0_0_0.eContents().get(1);
		private final Assignment cIsExternalAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cIsExternalExclamationMarkKeyword_0_1_0 = (Keyword)cIsExternalAssignment_0_1.eContents().get(0);
		private final Assignment cLinkNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinkNameEStringParserRuleCall_1_0 = (RuleCall)cLinkNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFeatureNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFeatureNameEStringParserRuleCall_2_1_0 = (RuleCall)cFeatureNameAssignment_2_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprAttributionExpressionParserRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AttributionResolveLinkAsArray returns core::ResolveLink:
		//	(module=[core::UseDeclaration] isExternal?="!") linkName=EString ("." featureName=EString)? "["
		//	expr=AttributionExpression "]";
		public ParserRule getRule() { return rule; }

		//(module=[core::UseDeclaration] isExternal?="!") linkName=EString ("." featureName=EString)? "["
		//expr=AttributionExpression "]"
		public Group getGroup() { return cGroup; }

		//module=[core::UseDeclaration] isExternal?="!"
		public Group getGroup_0() { return cGroup_0; }

		//module=[core::UseDeclaration]
		public Assignment getModuleAssignment_0_0() { return cModuleAssignment_0_0; }

		//[core::UseDeclaration]
		public CrossReference getModuleUseDeclarationCrossReference_0_0_0() { return cModuleUseDeclarationCrossReference_0_0_0; }

		//ID
		public RuleCall getModuleUseDeclarationIDTerminalRuleCall_0_0_0_1() { return cModuleUseDeclarationIDTerminalRuleCall_0_0_0_1; }

		//isExternal?="!"
		public Assignment getIsExternalAssignment_0_1() { return cIsExternalAssignment_0_1; }

		//"!"
		public Keyword getIsExternalExclamationMarkKeyword_0_1_0() { return cIsExternalExclamationMarkKeyword_0_1_0; }

		//linkName=EString
		public Assignment getLinkNameAssignment_1() { return cLinkNameAssignment_1; }

		//EString
		public RuleCall getLinkNameEStringParserRuleCall_1_0() { return cLinkNameEStringParserRuleCall_1_0; }

		//("." featureName=EString)?
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//featureName=EString
		public Assignment getFeatureNameAssignment_2_1() { return cFeatureNameAssignment_2_1; }

		//EString
		public RuleCall getFeatureNameEStringParserRuleCall_2_1_0() { return cFeatureNameEStringParserRuleCall_2_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }

		//expr=AttributionExpression
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }

		//AttributionExpression
		public RuleCall getExprAttributionExpressionParserRuleCall_4_0() { return cExprAttributionExpressionParserRuleCall_4_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class AttributionMethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributionMethodCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAttributionPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cBinaryOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cBinaryOpBinaryOpEnumRuleCall_1_0_1_0 = (RuleCall)cBinaryOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Action cMethodCallReceptorAction_1_1_0_0 = (Action)cGroup_1_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cMethodNameAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cMethodNameEStringParserRuleCall_1_1_2_0 = (RuleCall)cMethodNameAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Assignment cWithParametersAssignment_1_1_3_0 = (Assignment)cGroup_1_1_3.eContents().get(0);
		private final Keyword cWithParametersLeftParenthesisKeyword_1_1_3_0_0 = (Keyword)cWithParametersAssignment_1_1_3_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cParametersAttributionExpressionParserRuleCall_1_1_3_1_0 = (RuleCall)cParametersAssignment_1_1_3_1.eContents().get(0);
		private final Group cGroup_1_1_3_2 = (Group)cGroup_1_1_3.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_3_2_0 = (Keyword)cGroup_1_1_3_2.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_3_2_1 = (Assignment)cGroup_1_1_3_2.eContents().get(1);
		private final RuleCall cParametersAttributionExpressionParserRuleCall_1_1_3_2_1_0 = (RuleCall)cParametersAssignment_1_1_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_3_3 = (Keyword)cGroup_1_1_3.eContents().get(3);
		private final Assignment cParametersAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cParametersAttributionClosureDeclarationParserRuleCall_1_1_4_0 = (RuleCall)cParametersAssignment_1_1_4.eContents().get(0);
		
		//// Copied from expressions
		//AttributionMethodCall returns core::Expression:
		//	AttributionPrimaryExpression ({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression //|	( ({core::MethodCall.receptor = current}) "." methodName=EString )
		//	//|   (=> ({core::KeywordMethodCall.receptor = current}) "." (parameters+=KeywordParameter)+  )
		//	//|   (=> ({core::KeywordMethodCall.receptor = current}) (parameters+=KeywordParameter)+  )+	
		//	| (=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="("
		//	parameters+=AttributionExpression ("," parameters+=AttributionExpression)* ")")?
		//	parameters+=AttributionClosureDeclaration?)+)?;
		public ParserRule getRule() { return rule; }

		//AttributionPrimaryExpression ({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression //|	( ({core::MethodCall.receptor = current}) "." methodName=EString )
		////|   (=> ({core::KeywordMethodCall.receptor = current}) "." (parameters+=KeywordParameter)+  )
		////|   (=> ({core::KeywordMethodCall.receptor = current}) (parameters+=KeywordParameter)+  )+	
		//| (=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="("
		//parameters+=AttributionExpression ("," parameters+=AttributionExpression)* ")")?
		//parameters+=AttributionClosureDeclaration?)+)?
		public Group getGroup() { return cGroup; }

		//AttributionPrimaryExpression
		public RuleCall getAttributionPrimaryExpressionParserRuleCall_0() { return cAttributionPrimaryExpressionParserRuleCall_0; }

		//({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression //|	( ({core::MethodCall.receptor = current}) "." methodName=EString )
		////|   (=> ({core::KeywordMethodCall.receptor = current}) "." (parameters+=KeywordParameter)+  )
		////|   (=> ({core::KeywordMethodCall.receptor = current}) (parameters+=KeywordParameter)+  )+	
		//| (=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="("
		//parameters+=AttributionExpression ("," parameters+=AttributionExpression)* ")")?
		//parameters+=AttributionClosureDeclaration?)+)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{core::BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0() { return cBinaryExprLeftAction_1_0_0; }

		//binaryOp=BinaryOp
		public Assignment getBinaryOpAssignment_1_0_1() { return cBinaryOpAssignment_1_0_1; }

		//BinaryOp
		public RuleCall getBinaryOpBinaryOpEnumRuleCall_1_0_1_0() { return cBinaryOpBinaryOpEnumRuleCall_1_0_1_0; }

		//right=Expression
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_0_2_0() { return cRightExpressionParserRuleCall_1_0_2_0; }

		//(=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=AttributionExpression
		//("," parameters+=AttributionExpression)* ")")? parameters+=AttributionClosureDeclaration?)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({core::MethodCall.receptor=current})
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{core::MethodCall.receptor=current}
		public Action getMethodCallReceptorAction_1_1_0_0() { return cMethodCallReceptorAction_1_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_1_1() { return cFullStopKeyword_1_1_1; }

		//methodName=EString
		public Assignment getMethodNameAssignment_1_1_2() { return cMethodNameAssignment_1_1_2; }

		//EString
		public RuleCall getMethodNameEStringParserRuleCall_1_1_2_0() { return cMethodNameEStringParserRuleCall_1_1_2_0; }

		//(withParameters?="(" parameters+=AttributionExpression ("," parameters+=AttributionExpression)* ")")?
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }

		//withParameters?="("
		public Assignment getWithParametersAssignment_1_1_3_0() { return cWithParametersAssignment_1_1_3_0; }

		//"("
		public Keyword getWithParametersLeftParenthesisKeyword_1_1_3_0_0() { return cWithParametersLeftParenthesisKeyword_1_1_3_0_0; }

		//parameters+=AttributionExpression
		public Assignment getParametersAssignment_1_1_3_1() { return cParametersAssignment_1_1_3_1; }

		//AttributionExpression
		public RuleCall getParametersAttributionExpressionParserRuleCall_1_1_3_1_0() { return cParametersAttributionExpressionParserRuleCall_1_1_3_1_0; }

		//("," parameters+=AttributionExpression)*
		public Group getGroup_1_1_3_2() { return cGroup_1_1_3_2; }

		//","
		public Keyword getCommaKeyword_1_1_3_2_0() { return cCommaKeyword_1_1_3_2_0; }

		//parameters+=AttributionExpression
		public Assignment getParametersAssignment_1_1_3_2_1() { return cParametersAssignment_1_1_3_2_1; }

		//AttributionExpression
		public RuleCall getParametersAttributionExpressionParserRuleCall_1_1_3_2_1_0() { return cParametersAttributionExpressionParserRuleCall_1_1_3_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_3_3() { return cRightParenthesisKeyword_1_1_3_3; }

		//parameters+=AttributionClosureDeclaration?
		public Assignment getParametersAssignment_1_1_4() { return cParametersAssignment_1_1_4; }

		//AttributionClosureDeclaration
		public RuleCall getParametersAttributionClosureDeclarationParserRuleCall_1_1_4_0() { return cParametersAttributionClosureDeclarationParserRuleCall_1_1_4_0; }
	}

	public class AttributionMethodCallNoUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributionMethodCallNoUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAttributionPrimaryExpressionNoUseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cBinaryOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cBinaryOpBinaryOpEnumRuleCall_1_0_1_0 = (RuleCall)cBinaryOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Action cMethodCallReceptorAction_1_1_0_0 = (Action)cGroup_1_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cMethodNameAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cMethodNameEStringParserRuleCall_1_1_2_0 = (RuleCall)cMethodNameAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Assignment cWithParametersAssignment_1_1_3_0 = (Assignment)cGroup_1_1_3.eContents().get(0);
		private final Keyword cWithParametersLeftParenthesisKeyword_1_1_3_0_0 = (Keyword)cWithParametersAssignment_1_1_3_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cParametersAttributionExpressionParserRuleCall_1_1_3_1_0 = (RuleCall)cParametersAssignment_1_1_3_1.eContents().get(0);
		private final Group cGroup_1_1_3_2 = (Group)cGroup_1_1_3.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_3_2_0 = (Keyword)cGroup_1_1_3_2.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_3_2_1 = (Assignment)cGroup_1_1_3_2.eContents().get(1);
		private final RuleCall cParametersAttributionExpressionParserRuleCall_1_1_3_2_1_0 = (RuleCall)cParametersAssignment_1_1_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_3_3 = (Keyword)cGroup_1_1_3.eContents().get(3);
		private final Assignment cParametersAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cParametersAttributionClosureDeclarationParserRuleCall_1_1_4_0 = (RuleCall)cParametersAssignment_1_1_4.eContents().get(0);
		
		//AttributionMethodCallNoUse returns core::Expression:
		//	AttributionPrimaryExpressionNoUse ({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression | (=>
		//	({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=AttributionExpression
		//	("," parameters+=AttributionExpression)* ")")? parameters+=AttributionClosureDeclaration?)+)?;
		public ParserRule getRule() { return rule; }

		//AttributionPrimaryExpressionNoUse ({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression | (=>
		//({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=AttributionExpression
		//("," parameters+=AttributionExpression)* ")")? parameters+=AttributionClosureDeclaration?)+)?
		public Group getGroup() { return cGroup; }

		//AttributionPrimaryExpressionNoUse
		public RuleCall getAttributionPrimaryExpressionNoUseParserRuleCall_0() { return cAttributionPrimaryExpressionNoUseParserRuleCall_0; }

		//({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression | (=> ({core::MethodCall.receptor=current}) "."
		//methodName=EString (withParameters?="(" parameters+=AttributionExpression ("," parameters+=AttributionExpression)*
		//")")? parameters+=AttributionClosureDeclaration?)+)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{core::BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0() { return cBinaryExprLeftAction_1_0_0; }

		//binaryOp=BinaryOp
		public Assignment getBinaryOpAssignment_1_0_1() { return cBinaryOpAssignment_1_0_1; }

		//BinaryOp
		public RuleCall getBinaryOpBinaryOpEnumRuleCall_1_0_1_0() { return cBinaryOpBinaryOpEnumRuleCall_1_0_1_0; }

		//right=Expression
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_0_2_0() { return cRightExpressionParserRuleCall_1_0_2_0; }

		//(=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=AttributionExpression
		//("," parameters+=AttributionExpression)* ")")? parameters+=AttributionClosureDeclaration?)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({core::MethodCall.receptor=current})
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{core::MethodCall.receptor=current}
		public Action getMethodCallReceptorAction_1_1_0_0() { return cMethodCallReceptorAction_1_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_1_1() { return cFullStopKeyword_1_1_1; }

		//methodName=EString
		public Assignment getMethodNameAssignment_1_1_2() { return cMethodNameAssignment_1_1_2; }

		//EString
		public RuleCall getMethodNameEStringParserRuleCall_1_1_2_0() { return cMethodNameEStringParserRuleCall_1_1_2_0; }

		//(withParameters?="(" parameters+=AttributionExpression ("," parameters+=AttributionExpression)* ")")?
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }

		//withParameters?="("
		public Assignment getWithParametersAssignment_1_1_3_0() { return cWithParametersAssignment_1_1_3_0; }

		//"("
		public Keyword getWithParametersLeftParenthesisKeyword_1_1_3_0_0() { return cWithParametersLeftParenthesisKeyword_1_1_3_0_0; }

		//parameters+=AttributionExpression
		public Assignment getParametersAssignment_1_1_3_1() { return cParametersAssignment_1_1_3_1; }

		//AttributionExpression
		public RuleCall getParametersAttributionExpressionParserRuleCall_1_1_3_1_0() { return cParametersAttributionExpressionParserRuleCall_1_1_3_1_0; }

		//("," parameters+=AttributionExpression)*
		public Group getGroup_1_1_3_2() { return cGroup_1_1_3_2; }

		//","
		public Keyword getCommaKeyword_1_1_3_2_0() { return cCommaKeyword_1_1_3_2_0; }

		//parameters+=AttributionExpression
		public Assignment getParametersAssignment_1_1_3_2_1() { return cParametersAssignment_1_1_3_2_1; }

		//AttributionExpression
		public RuleCall getParametersAttributionExpressionParserRuleCall_1_1_3_2_1_0() { return cParametersAttributionExpressionParserRuleCall_1_1_3_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_3_3() { return cRightParenthesisKeyword_1_1_3_3; }

		//parameters+=AttributionClosureDeclaration?
		public Assignment getParametersAssignment_1_1_4() { return cParametersAssignment_1_1_4; }

		//AttributionClosureDeclaration
		public RuleCall getParametersAttributionClosureDeclarationParserRuleCall_1_1_4_0() { return cParametersAttributionClosureDeclarationParserRuleCall_1_1_4_0; }
	}

	public class AttributeUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAttributeAttributeDclCrossReference_0_0 = (CrossReference)cAttributeAssignment_0.eContents().get(0);
		private final RuleCall cAttributeAttributeDclIDTerminalRuleCall_0_0_1 = (RuleCall)cAttributeAttributeDclCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprAttributionExpressionNoUseParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AttributeUse returns attr::AttributeUse:
		//	attribute=[attr::AttributeDcl] "[" expr=AttributionExpressionNoUse "]";
		public ParserRule getRule() { return rule; }

		//attribute=[attr::AttributeDcl] "[" expr=AttributionExpressionNoUse "]"
		public Group getGroup() { return cGroup; }

		//attribute=[attr::AttributeDcl]
		public Assignment getAttributeAssignment_0() { return cAttributeAssignment_0; }

		//[attr::AttributeDcl]
		public CrossReference getAttributeAttributeDclCrossReference_0_0() { return cAttributeAttributeDclCrossReference_0_0; }

		//ID
		public RuleCall getAttributeAttributeDclIDTerminalRuleCall_0_0_1() { return cAttributeAttributeDclIDTerminalRuleCall_0_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//expr=AttributionExpressionNoUse
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//AttributionExpressionNoUse
		public RuleCall getExprAttributionExpressionNoUseParserRuleCall_2_0() { return cExprAttributionExpressionNoUseParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class AttributeInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAttributeAttributeDclCrossReference_0_0 = (CrossReference)cAttributeAssignment_0.eContents().get(0);
		private final RuleCall cAttributeAttributeDclIDTerminalRuleCall_0_0_1 = (RuleCall)cAttributeAttributeDclCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReceptorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReceptorAttributionExpressionNoUseParserRuleCall_2_0 = (RuleCall)cReceptorAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLessThanSignHyphenMinusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRightAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRightAttributionExpressionParserRuleCall_5_0 = (RuleCall)cRightAssignment_5.eContents().get(0);
		
		////InitiableExpression returns core::Expression:
		////	VariableReference 
		////    | VariableReference	(=> ({core::MethodCall.receptor = current}) "." methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")" )? (parameters+=ClosureDeclaration)?  )+
		////;
		/// *
		//AttributionMethodCall returns core::Expression:
		//	AttributionPrimaryExpression
		//	(
		//		( ({core::BinaryExpr.left = current}) binaryOp=BinaryOp right=Expression)		
		//		| ( ( ({attr::AttributeUse.expr = current}) "[" attribute=[attr::AttributeDcl] "]" )
		//			(=> ({core::MethodCall.receptor = current}) "." methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")" )? (parameters+=ClosureDeclaration)?  )?
		//			)+
		//	    | ( (=> ({core::MethodCall.receptor = current}) "." methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")" )? (parameters+=ClosureDeclaration)?  )
		//			  (  (({attr::AttributeUse.expr = current}) "[" attribute=[attr::AttributeDcl] "]") |
		//			  	 ((({core::ResolveLink.expr = current}) "[" module=[core::UseDeclaration] isExternal?="!" linkName=EString ("." featureName=EString)?  "]"))			  	
		//			  )? )+
		//        // to allow accessing attributes	
		//	)? // ? ( ({attr::AttributeUse.expr = current}) "[" attribute=[attr::AttributeDcl] "]" )?
		//;
		// * / ///
		///// End-of Attribution
		/////
		/// *
		////
		//// End-of PatternSpecification
		////
		//QoolTransformation returns qool::QoolTransformation:
		//	'qool'
		//	name=EString
		//	'(' (inModels+=TransformationDefinitionParameter) ')' '->' '(' outModels+=TransformationDefinitionParameter ')'
		//	(inlineModels += InlineModel)*
		//	(queues += QoolQueue)+
		//	(segments += Segment)+
		//    ;
		//
		//// @common
		//TransformationDefinitionParameter returns core::TransformationDefinitionParameter:
		//	{core::TransformationDefinitionParameter}
		//	name=EString
		//	;
		//
		//InlineModel returns core::InlineModel :
		//	"model" name=EString
		//		(classes+=InlineClass)+
		//	"end"
		//;
		//
		//InlineClass returns core::InlineClass :
		//	"class" name=EString	 
		//	(('{' features+=InlineReferenceInline ( ";" features+=InlineReferenceInline)* '}') | 
		//     ( features+=InlineFeatureExpanded ( features+=InlineFeatureExpanded)* 'end'))
		//;
		//
		//InlineReferenceInline returns core::InlineReference:
		//	name=EString ":" type=TypeExpression
		//;
		//
		//InlineFeatureExpanded returns core::InlineFeature :
		//	InlineAttributeExpanded 
		//	| InlineReferenceExpanded
		//;
		//
		//InlineAttributeExpanded returns core::InlineAttribute :
		//	"att" name=EString  ":" type=TypeExpression (multivalued?="*")? 
		//;
		//
		//InlineReferenceExpanded returns core::InlineReference:
		//	"ref" name=EString ":" type=TypeExpression (multivalued?="*")?
		//;
		//
		//// -- Queue 
		//QoolQueue returns qool::QoolQueue:
		//	LocalQueue |
		//	ModelElementQueue
		//;
		//
		//LocalQueue returns qool::LocalQueue:
		//	"local" "queue" name=ID ":" type_=TypeExpression	
		//;
		//
		//ModelElementQueue returns qool::ModelElementQueue: 
		//	"model" "queue" name=ID ":" class_=ClassUse
		//;
		//
		//// -- Segments and expressions
		//
		//Segment returns qool::Segment: 
		//	"segment" name=EString
		//		(statements += Statement)+	
		//	"end"	
		//;
		//
		//// redefine
		//Statement returns core::Statement: 
		//	DefineVariable
		//	| Expression
		//	| PutTraceExpression
		//	| PropertyWrite
		//	| ForAllStatement
		//	// | ForEachStatement
		//	| EmitStatement	
		//;
		//
		//// redefine
		//PrimaryExpression returns core::Expression: 
		//	  Literal
		//	| VariableReference
		//	| ModelReference
		//	| ParenthesizedExpression
		//	| MatchTraceExpression 
		//	| ClosureDeclaration
		//	| MatchExpression // <-- added for qool
		//;
		//
		//ForAllStatement returns qool::ForAllStatement: 
		//	"forall" name=ID "from" queue=[qool::QoolQueue]
		//		("where" condition = Expression)?
		//		(statements += Statement)+		
		//	"end"
		//;
		//
		//EmitStatement returns qool::EmitStatement: 
		//	"emit" value=Expression "to" queue=[qool::QoolQueue]
		//;
		//
		//MatchExpression returns qool::MatchExpression: 
		//	queue=[qool::QoolQueue] "[" (predicates += Predicate) ("," predicates += Predicate)* "]" 
		//;
		//
		//Predicate returns qool::MatchPredicate:
		//	KindOfPredicate
		//	| PropertyEqualsPredicate 
		//;
		//
		//KindOfPredicate returns qool::KindOfPredicate:
		//    "#kindOf" "(" class_ = ClassUse ")"
		//;
		//
		//PropertyEqualsPredicate returns qool::PropertyEqualsPredicate:
		//    "#p" "(" propertyName=EString "," value=Expression ")"
		//;
		//
		// * / AttributeInit returns attr::AttributeInit: // attribute=[attr::AttributeDcl] "[" receptor=InitiableExpression "]" "<-" right=Expression  
		//	attribute=[attr::AttributeDcl] "[" receptor=AttributionExpressionNoUse "]" "<-" right=AttributionExpression;
		public ParserRule getRule() { return rule; }

		//// attribute=[attr::AttributeDcl] "[" receptor=InitiableExpression "]" "<-" right=Expression  
		//attribute=[attr::AttributeDcl] "[" receptor=AttributionExpressionNoUse "]" "<-" right=AttributionExpression
		public Group getGroup() { return cGroup; }

		//// attribute=[attr::AttributeDcl] "[" receptor=InitiableExpression "]" "<-" right=Expression  
		//attribute=[attr::AttributeDcl]
		public Assignment getAttributeAssignment_0() { return cAttributeAssignment_0; }

		//[attr::AttributeDcl]
		public CrossReference getAttributeAttributeDclCrossReference_0_0() { return cAttributeAttributeDclCrossReference_0_0; }

		//ID
		public RuleCall getAttributeAttributeDclIDTerminalRuleCall_0_0_1() { return cAttributeAttributeDclIDTerminalRuleCall_0_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//receptor=AttributionExpressionNoUse
		public Assignment getReceptorAssignment_2() { return cReceptorAssignment_2; }

		//AttributionExpressionNoUse
		public RuleCall getReceptorAttributionExpressionNoUseParserRuleCall_2_0() { return cReceptorAttributionExpressionNoUseParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_4() { return cLessThanSignHyphenMinusKeyword_4; }

		//right=AttributionExpression
		public Assignment getRightAssignment_5() { return cRightAssignment_5; }

		//AttributionExpression
		public RuleCall getRightAttributionExpressionParserRuleCall_5_0() { return cRightAttributionExpressionParserRuleCall_5_0; }
	}
	
	
	private EclecticTransformationDefinitionElements pEclecticTransformationDefinition;
	private MemberLanguageTransformationDefinitionElements pMemberLanguageTransformationDefinition;
	private MappingTransformationElements pMappingTransformation;
	private AnnotationElements pAnnotation;
	private OptimizationsAnnotationElements pOptimizationsAnnotation;
	private MetamodelModelAnnotationElements pMetamodelModelAnnotation;
	private UsesStatementsElements pUsesStatements;
	private UseDeclarationElements pUseDeclaration;
	private RequireDeclarationElements pRequireDeclaration;
	private RequireParameterElements pRequireParameter;
	private RequireModelParameterElements pRequireModelParameter;
	private TransformationDefinitionParameterElements pTransformationDefinitionParameter;
	private DelegateElements pDelegate;
	private ContextElements pContext;
	private TagElements pTag;
	private MatchedElementElements pMatchedElement;
	private SingleAnnotationElements pSingleAnnotation;
	private PotencyAnnotationElements pPotencyAnnotation;
	private C2CModifierElements pC2CModifier;
	private LinkedByElements pLinkedBy;
	private AttributeMappingElements pAttributeMapping;
	private AttributeRightPartElements pAttributeRightPart;
	private Attribute2AttributeElements pAttribute2Attribute;
	private AttributeIsStringElements pAttributeIsString;
	private AttributeIsBooleanElements pAttributeIsBoolean;
	private AttributeIsDoubleElements pAttributeIsDouble;
	private AttributeIsIntegerElements pAttributeIsInteger;
	private AttributeIsResolveLinkElements pAttributeIsResolveLink;
	private ResolveLinkInMappingElements pResolveLinkInMapping;
	private ResolveLinkInMappingVarRefElements pResolveLinkInMappingVarRef;
	private AttributeRefElements pAttributeRef;
	private Reference2ReferenceElements pReference2Reference;
	private ReferenceRefElements pReferenceRef;
	private ConverterElements pConverter;
	private EStringElements pEString;
	private EDoubleElements pEDouble;
	private EBooleanElements pEBoolean;
	private StrictStringElements pStrictString;
	private EIntElements pEInt;
	private PatternSpecificationElements pPatternSpecification;
	private PatternElements pPattern;
	private POutputVariableElements pPOutputVariable;
	private PObjectElements pPObject;
	private PFeatureElements pPFeature;
	private PReferenceElements pPReference;
	private PAttributeElements pPAttribute;
	private NavigationLibraryElements pNavigationLibrary;
	private MethodDefinitionElements pMethodDefinition;
	private MethodParameterElements pMethodParameter;
	private QoolTransformationElements pQoolTransformation;
	private InlineModelElements pInlineModel;
	private InlineClassElements pInlineClass;
	private InlineReferenceInlineElements pInlineReferenceInline;
	private InlineFeatureExpandedElements pInlineFeatureExpanded;
	private InlineAttributeExpandedElements pInlineAttributeExpanded;
	private InlineReferenceExpandedElements pInlineReferenceExpanded;
	private QoolQueueElements pQoolQueue;
	private LocalQueueElements pLocalQueue;
	private ModelElementQueueElements pModelElementQueue;
	private QueueOptimizationElements pQueueOptimization;
	private AccessByFeatureOptimizationElements pAccessByFeatureOptimization;
	private SegmentElements pSegment;
	private QoolStatementElements pQoolStatement;
	private ClosureDeclarationElements pClosureDeclaration;
	private PrimaryExpressionElements pPrimaryExpression;
	private InvokeTransformationElements pInvokeTransformation;
	private InvokeInternalElements pInvokeInternal;
	private NamedInvocationParameterElements pNamedInvocationParameter;
	private InvokeExternalElements pInvokeExternal;
	private InvocationParameterElements pInvocationParameter;
	private ForAllStatementElements pForAllStatement;
	private EmitStatementElements pEmitStatement;
	private MatchExpressionElements pMatchExpression;
	private PredicateElements pPredicate;
	private KindOfPredicateElements pKindOfPredicate;
	private PropertyEqualsPredicateElements pPropertyEqualsPredicate;
	private CopierElements pCopier;
	private CopierCallbackDefinitionElements pCopierCallbackDefinition;
	private TaoTransformationElements pTaoTransformation;
	private TemplateElements pTemplate;
	private TemplateParameterElements pTemplateParameter;
	private TaoExpressionElements pTaoExpression;
	private TemplateRootObjectElements pTemplateRootObject;
	private ObjectInstantiationElements pObjectInstantiation;
	private AssignmentElements pAssignment;
	private AttributeAssigmentElements pAttributeAssigment;
	private SourceExpressionElements pSourceExpression;
	private WithOptionalVariableExpressionElements pWithOptionalVariableExpression;
	private ObjectSourceVariableElements pObjectSourceVariable;
	private ObjectSyntaxElements pObjectSyntax;
	private InvocationElements pInvocation;
	private AttributionTransformationElements pAttributionTransformation;
	private AttributeDclElements pAttributeDcl;
	private InheritedAttributeDclElements pInheritedAttributeDcl;
	private SynthesizedAttributeDclElements pSynthesizedAttributeDcl;
	private AttributionRuleElements pAttributionRule;
	private AttributionStatementElements pAttributionStatement;
	private AttributionDefineVariableElements pAttributionDefineVariable;
	private AttributionClosureDeclarationElements pAttributionClosureDeclaration;
	private AttributionPrimaryExpressionElements pAttributionPrimaryExpression;
	private AttributionPrimaryExpressionNoUseElements pAttributionPrimaryExpressionNoUse;
	private AttributionExpressionElements pAttributionExpression;
	private AttributionExpressionNoUseElements pAttributionExpressionNoUse;
	private AttributionResolveLinkAsArrayElements pAttributionResolveLinkAsArray;
	private AttributionMethodCallElements pAttributionMethodCall;
	private AttributionMethodCallNoUseElements pAttributionMethodCallNoUse;
	private AttributeUseElements pAttributeUse;
	private AttributeInitElements pAttributeInit;
	
	private final GrammarProvider grammarProvider;

	private ExpressionsGrammarAccess gaExpressions;

	@Inject
	public EclecticGrammarAccess(GrammarProvider grammarProvider,
		ExpressionsGrammarAccess gaExpressions) {
		this.grammarProvider = grammarProvider;
		this.gaExpressions = gaExpressions;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public ExpressionsGrammarAccess getExpressionsGrammarAccess() {
		return gaExpressions;
	}

	
	//EclecticTransformationDefinition returns core::EclecticTransformationDefinition:
	//	"eclectic" name=ID "(" inModels+=TransformationDefinitionParameter ("," inModels+=TransformationDefinitionParameter)*
	//	")" "->" "(" outModels+=TransformationDefinitionParameter ("," outModels+=TransformationDefinitionParameter)* ")"
	//	transformations+=MemberLanguageTransformationDefinition+;
	public EclecticTransformationDefinitionElements getEclecticTransformationDefinitionAccess() {
		return (pEclecticTransformationDefinition != null) ? pEclecticTransformationDefinition : (pEclecticTransformationDefinition = new EclecticTransformationDefinitionElements());
	}
	
	public ParserRule getEclecticTransformationDefinitionRule() {
		return getEclecticTransformationDefinitionAccess().getRule();
	}

	//MemberLanguageTransformationDefinition returns core::TransformationDefinition:
	//	MappingTransformation | NavigationLibrary | QoolTransformation | TaoTransformation | AttributionTransformation |
	//	PatternSpecification;
	public MemberLanguageTransformationDefinitionElements getMemberLanguageTransformationDefinitionAccess() {
		return (pMemberLanguageTransformationDefinition != null) ? pMemberLanguageTransformationDefinition : (pMemberLanguageTransformationDefinition = new MemberLanguageTransformationDefinitionElements());
	}
	
	public ParserRule getMemberLanguageTransformationDefinitionRule() {
		return getMemberLanguageTransformationDefinitionAccess().getRule();
	}

	////
	//// Begin-of Mappings
	////
	//MappingTransformation returns mappings::MappingTransformation:
	//	"mappings" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
	//	//'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
	//	"(" inModels+=TransformationDefinitionParameter ")" "->" "(" outModels+=TransformationDefinitionParameter ")"
	//	annotations+=Annotation* uses+=UsesStatements* requires+=RequireDeclaration* delegates+=Delegate* contexts+=Context+
	//	"end";
	public MappingTransformationElements getMappingTransformationAccess() {
		return (pMappingTransformation != null) ? pMappingTransformation : (pMappingTransformation = new MappingTransformationElements());
	}
	
	public ParserRule getMappingTransformationRule() {
		return getMappingTransformationAccess().getRule();
	}

	//// @common
	//Annotation returns core::Annotation:
	//	MetamodelModelAnnotation | OptimizationsAnnotation;
	public AnnotationElements getAnnotationAccess() {
		return (pAnnotation != null) ? pAnnotation : (pAnnotation = new AnnotationElements());
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//OptimizationsAnnotation returns core::OptimizationsAnnotation:
	//	"optimizations" ":" enabled?="enabled";
	public OptimizationsAnnotationElements getOptimizationsAnnotationAccess() {
		return (pOptimizationsAnnotation != null) ? pOptimizationsAnnotation : (pOptimizationsAnnotation = new OptimizationsAnnotationElements());
	}
	
	public ParserRule getOptimizationsAnnotationRule() {
		return getOptimizationsAnnotationAccess().getRule();
	}

	//MetamodelModelAnnotation returns core::MetamodelModelAnnotation:
	//	annotatedElement=[core::RepresentModel] ":" metamodel=STRING;
	public MetamodelModelAnnotationElements getMetamodelModelAnnotationAccess() {
		return (pMetamodelModelAnnotation != null) ? pMetamodelModelAnnotation : (pMetamodelModelAnnotation = new MetamodelModelAnnotationElements());
	}
	
	public ParserRule getMetamodelModelAnnotationRule() {
		return getMetamodelModelAnnotationAccess().getRule();
	}

	//UsesStatements returns core::UseDeclaration: // TODO: Allow several declarations together
	//	UseDeclaration;
	public UsesStatementsElements getUsesStatementsAccess() {
		return (pUsesStatements != null) ? pUsesStatements : (pUsesStatements = new UsesStatementsElements());
	}
	
	public ParserRule getUsesStatementsRule() {
		return getUsesStatementsAccess().getRule();
	}

	//UseDeclaration returns core::UseDeclaration:
	//	"uses" module=EString ("as" ^as=EString)?;
	public UseDeclarationElements getUseDeclarationAccess() {
		return (pUseDeclaration != null) ? pUseDeclaration : (pUseDeclaration = new UseDeclarationElements());
	}
	
	public ParserRule getUseDeclarationRule() {
		return getUseDeclarationAccess().getRule();
	}

	//RequireDeclaration returns core::RequireDeclaration:
	//	"require" name=EString ("(" parameters+=RequireModelParameter ("," parameters+=RequireModelParameter)* ")")? ("="
	//	default=EString)?;
	public RequireDeclarationElements getRequireDeclarationAccess() {
		return (pRequireDeclaration != null) ? pRequireDeclaration : (pRequireDeclaration = new RequireDeclarationElements());
	}
	
	public ParserRule getRequireDeclarationRule() {
		return getRequireDeclarationAccess().getRule();
	}

	//RequireParameter returns core::RequireParameter:
	//	RequireModelParameter;
	public RequireParameterElements getRequireParameterAccess() {
		return (pRequireParameter != null) ? pRequireParameter : (pRequireParameter = new RequireParameterElements());
	}
	
	public ParserRule getRequireParameterRule() {
		return getRequireParameterAccess().getRule();
	}

	//RequireModelParameter returns core::RequireModelParameter:
	//	(formalParameterName=EString "=")? model=[core::RepresentModel];
	public RequireModelParameterElements getRequireModelParameterAccess() {
		return (pRequireModelParameter != null) ? pRequireModelParameter : (pRequireModelParameter = new RequireModelParameterElements());
	}
	
	public ParserRule getRequireModelParameterRule() {
		return getRequireModelParameterAccess().getRule();
	}

	//TransformationDefinitionParameter returns core::TransformationDefinitionParameter:
	//	{core::TransformationDefinitionParameter} name=EString;
	public TransformationDefinitionParameterElements getTransformationDefinitionParameterAccess() {
		return (pTransformationDefinitionParameter != null) ? pTransformationDefinitionParameter : (pTransformationDefinitionParameter = new TransformationDefinitionParameterElements());
	}
	
	public ParserRule getTransformationDefinitionParameterRule() {
		return getTransformationDefinitionParameterAccess().getRule();
	}

	/// *
	//ClassUse returns core::ClassUse :
	//	model=[core::RepresentModel] "!" className=ID	
	//;
	// * / // Using Expressions as superlanguage makes that [a] does not work because of conflicts
	//// end-of-common
	//Delegate returns mappings::Delegate:
	//	tags+=Tag* "delegate" "from" left+=MatchedElement ("," left+=MatchedElement)* "to" (module=[core::UseDeclaration]
	//	isExternal?="!") linkName=EString ("." featureName=EString)?;
	public DelegateElements getDelegateAccess() {
		return (pDelegate != null) ? pDelegate : (pDelegate = new DelegateElements());
	}
	
	public ParserRule getDelegateRule() {
		return getDelegateAccess().getRule();
	}

	//Context returns mappings::Context:
	//	tags+=Tag* "from" left+=MatchedElement ("," left+=MatchedElement)* "to" right+=MatchedElement (","
	//	right+=MatchedElement)* modifiers+=C2CModifier* // (mappings += (Attribute2Attribute | AttributeIsString | Reference2Reference) )*
	//	mappings+=(AttributeMapping | Reference2Reference)* "end";
	public ContextElements getContextAccess() {
		return (pContext != null) ? pContext : (pContext = new ContextElements());
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}

	//Tag returns mappings::Tag:
	//	"[" name=EString "]";
	public TagElements getTagAccess() {
		return (pTag != null) ? pTag : (pTag = new TagElements());
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}

	//MatchedElement returns mappings::MatchedElement:
	//	(name=ID ":")? model=[core::RepresentModel] "!" className=ID annotations+=SingleAnnotation? strictType?="!"?;
	public MatchedElementElements getMatchedElementAccess() {
		return (pMatchedElement != null) ? pMatchedElement : (pMatchedElement = new MatchedElementElements());
	}
	
	public ParserRule getMatchedElementRule() {
		return getMatchedElementAccess().getRule();
	}

	//SingleAnnotation returns core::SingleAnnotation:
	//	PotencyAnnotation;
	public SingleAnnotationElements getSingleAnnotationAccess() {
		return (pSingleAnnotation != null) ? pSingleAnnotation : (pSingleAnnotation = new SingleAnnotationElements());
	}
	
	public ParserRule getSingleAnnotationRule() {
		return getSingleAnnotationAccess().getRule();
	}

	//// copied from expressions
	//PotencyAnnotation returns core::PotencyAnnotation:
	//	("@" | "^") value=INT;
	public PotencyAnnotationElements getPotencyAnnotationAccess() {
		return (pPotencyAnnotation != null) ? pPotencyAnnotation : (pPotencyAnnotation = new PotencyAnnotationElements());
	}
	
	public ParserRule getPotencyAnnotationRule() {
		return getPotencyAnnotationAccess().getRule();
	}

	//C2CModifier returns mappings::C2CModifier:
	//	LinkedBy;
	public C2CModifierElements getC2CModifierAccess() {
		return (pC2CModifier != null) ? pC2CModifier : (pC2CModifier = new C2CModifierElements());
	}
	
	public ParserRule getC2CModifierRule() {
		return getC2CModifierAccess().getRule();
	}

	//// linking cd.originalCompilationUnit = cu
	//LinkedBy returns mappings::LinkedBy:
	//	"linking" attribute=AttributeRef "=" linkedElement=[mappings::MatchedElement];
	public LinkedByElements getLinkedByAccess() {
		return (pLinkedBy != null) ? pLinkedBy : (pLinkedBy = new LinkedByElements());
	}
	
	public ParserRule getLinkedByRule() {
		return getLinkedByAccess().getRule();
	}

	//AttributeMapping returns mappings::AttributeMapping:
	//	left+=AttributeRef ("," left+=AttributeRef)* "=" rightPart=AttributeRightPart;
	public AttributeMappingElements getAttributeMappingAccess() {
		return (pAttributeMapping != null) ? pAttributeMapping : (pAttributeMapping = new AttributeMappingElements());
	}
	
	public ParserRule getAttributeMappingRule() {
		return getAttributeMappingAccess().getRule();
	}

	//AttributeRightPart returns mappings::AttributeRightPart:
	//	AttributeIsString | AttributeIsBoolean | AttributeIsDouble | AttributeIsInteger | Attribute2Attribute |
	//	AttributeIsResolveLink;
	public AttributeRightPartElements getAttributeRightPartAccess() {
		return (pAttributeRightPart != null) ? pAttributeRightPart : (pAttributeRightPart = new AttributeRightPartElements());
	}
	
	public ParserRule getAttributeRightPartRule() {
		return getAttributeRightPartAccess().getRule();
	}

	//Attribute2Attribute returns mappings::Attribute2Attribute:
	//	right+=AttributeRef ("," right+=AttributeRef)* converter=Converter?;
	public Attribute2AttributeElements getAttribute2AttributeAccess() {
		return (pAttribute2Attribute != null) ? pAttribute2Attribute : (pAttribute2Attribute = new Attribute2AttributeElements());
	}
	
	public ParserRule getAttribute2AttributeRule() {
		return getAttribute2AttributeAccess().getRule();
	}

	//AttributeIsString returns mappings::AttributeIsString:
	//	strValue=StrictString;
	public AttributeIsStringElements getAttributeIsStringAccess() {
		return (pAttributeIsString != null) ? pAttributeIsString : (pAttributeIsString = new AttributeIsStringElements());
	}
	
	public ParserRule getAttributeIsStringRule() {
		return getAttributeIsStringAccess().getRule();
	}

	//AttributeIsBoolean returns mappings::AttributeIsBoolean:
	//	boolValue=EBoolean;
	public AttributeIsBooleanElements getAttributeIsBooleanAccess() {
		return (pAttributeIsBoolean != null) ? pAttributeIsBoolean : (pAttributeIsBoolean = new AttributeIsBooleanElements());
	}
	
	public ParserRule getAttributeIsBooleanRule() {
		return getAttributeIsBooleanAccess().getRule();
	}

	//AttributeIsDouble returns mappings::AttributeIsDouble:
	//	doubleValue=EDouble;
	public AttributeIsDoubleElements getAttributeIsDoubleAccess() {
		return (pAttributeIsDouble != null) ? pAttributeIsDouble : (pAttributeIsDouble = new AttributeIsDoubleElements());
	}
	
	public ParserRule getAttributeIsDoubleRule() {
		return getAttributeIsDoubleAccess().getRule();
	}

	//AttributeIsInteger returns mappings::AttributeIsInteger:
	//	intValue=EInt;
	public AttributeIsIntegerElements getAttributeIsIntegerAccess() {
		return (pAttributeIsInteger != null) ? pAttributeIsInteger : (pAttributeIsInteger = new AttributeIsIntegerElements());
	}
	
	public ParserRule getAttributeIsIntegerRule() {
		return getAttributeIsIntegerAccess().getRule();
	}

	//AttributeIsResolveLink returns mappings::AttributeIsResolveLink:
	//	resolveLink=ResolveLinkInMapping;
	public AttributeIsResolveLinkElements getAttributeIsResolveLinkAccess() {
		return (pAttributeIsResolveLink != null) ? pAttributeIsResolveLink : (pAttributeIsResolveLink = new AttributeIsResolveLinkElements());
	}
	
	public ParserRule getAttributeIsResolveLinkRule() {
		return getAttributeIsResolveLinkAccess().getRule();
	}

	//ResolveLinkInMapping returns core::ResolveLink:
	//	module=[core::UseDeclaration] isExternal?="!" linkName=EString ("." featureName=EString)? "["
	//	expr=ResolveLinkInMappingVarRef "]";
	public ResolveLinkInMappingElements getResolveLinkInMappingAccess() {
		return (pResolveLinkInMapping != null) ? pResolveLinkInMapping : (pResolveLinkInMapping = new ResolveLinkInMappingElements());
	}
	
	public ParserRule getResolveLinkInMappingRule() {
		return getResolveLinkInMappingAccess().getRule();
	}

	//ResolveLinkInMappingVarRef returns core::VariableReference:
	//	variable=[core::Variable];
	public ResolveLinkInMappingVarRefElements getResolveLinkInMappingVarRefAccess() {
		return (pResolveLinkInMappingVarRef != null) ? pResolveLinkInMappingVarRef : (pResolveLinkInMappingVarRef = new ResolveLinkInMappingVarRefElements());
	}
	
	public ParserRule getResolveLinkInMappingVarRefRule() {
		return getResolveLinkInMappingVarRefAccess().getRule();
	}

	//AttributeRef returns mappings::AttributeRef:
	//	(referredElement=[mappings::MatchedElement] ".")? featureName=EString multivalued?="*"?;
	public AttributeRefElements getAttributeRefAccess() {
		return (pAttributeRef != null) ? pAttributeRef : (pAttributeRef = new AttributeRefElements());
	}
	
	public ParserRule getAttributeRefRule() {
		return getAttributeRefAccess().getRule();
	}

	//Reference2Reference returns mappings::Reference2Reference:
	//	left+=ReferenceRef ("," left+=ReferenceRef)* "<-" right+=ReferenceRef ("," right+=ReferenceRef)* converter=Converter?;
	public Reference2ReferenceElements getReference2ReferenceAccess() {
		return (pReference2Reference != null) ? pReference2Reference : (pReference2Reference = new Reference2ReferenceElements());
	}
	
	public ParserRule getReference2ReferenceRule() {
		return getReference2ReferenceAccess().getRule();
	}

	//ReferenceRef returns mappings::ReferenceRef:
	//	(referredElement=[mappings::MatchedElement] ".")? featureName=EString multivalued?="*"?;
	public ReferenceRefElements getReferenceRefAccess() {
		return (pReferenceRef != null) ? pReferenceRef : (pReferenceRef = new ReferenceRefElements());
	}
	
	public ParserRule getReferenceRefRule() {
		return getReferenceRefAccess().getRule();
	}

	//Converter returns mappings::Converter:
	//	"convert" (module=[core::UseDeclaration] isExternal?=".")? converterName=EString;
	public ConverterElements getConverterAccess() {
		return (pConverter != null) ? pConverter : (pConverter = new ConverterElements());
	}
	
	public ParserRule getConverterRule() {
		return getConverterAccess().getRule();
	}

	//// Not sure if this has be factorized somewhere...
	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EDouble returns ecore::EDouble:
	//	INT "." INT;
	public EDoubleElements getEDoubleAccess() {
		return (pEDouble != null) ? pEDouble : (pEDouble = new EDoubleElements());
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return (pEBoolean != null) ? pEBoolean : (pEBoolean = new EBooleanElements());
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//StrictString returns ecore::EString:
	//	STRING;
	public StrictStringElements getStrictStringAccess() {
		return (pStrictString != null) ? pStrictString : (pStrictString = new StrictStringElements());
	}
	
	public ParserRule getStrictStringRule() {
		return getStrictStringAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	///// 
	///// Begin-of PATTERNS
	/////
	//PatternSpecification returns pat::PatternSpecification:
	//	"patterns" name=EString "(" inModels+=TransformationDefinitionParameter ")" patterns+=Pattern* "end";
	public PatternSpecificationElements getPatternSpecificationAccess() {
		return (pPatternSpecification != null) ? pPatternSpecification : (pPatternSpecification = new PatternSpecificationElements());
	}
	
	public ParserRule getPatternSpecificationRule() {
		return getPatternSpecificationAccess().getRule();
	}

	//// TODO: Add parameters to the pattern: // ('(' formalParameters+=MethodParameter (',' formalParameters+=MethodParameter)* ')')?
	//Pattern returns pat::Pattern:
	//	"def" name=EString "->" "(" outputVariables+=POutputVariable outputVariables+=POutputVariable* ")" objects+=PObject+
	//	"end";
	public PatternElements getPatternAccess() {
		return (pPattern != null) ? pPattern : (pPattern = new PatternElements());
	}
	
	public ParserRule getPatternRule() {
		return getPatternAccess().getRule();
	}

	//POutputVariable returns pat::POutputVariable:
	//	object=[pat::PObject];
	public POutputVariableElements getPOutputVariableAccess() {
		return (pPOutputVariable != null) ? pPOutputVariable : (pPOutputVariable = new POutputVariableElements());
	}
	
	public ParserRule getPOutputVariableRule() {
		return getPOutputVariableAccess().getRule();
	}

	//PObject returns pat::PObject:
	//	name=ID ":" type=ClassUse "{" (features+=PFeature ("," features+=PFeature)*)? "}";
	public PObjectElements getPObjectAccess() {
		return (pPObject != null) ? pPObject : (pPObject = new PObjectElements());
	}
	
	public ParserRule getPObjectRule() {
		return getPObjectAccess().getRule();
	}

	//PFeature returns pat::PFeature:
	//	PAttribute | PReference;
	public PFeatureElements getPFeatureAccess() {
		return (pPFeature != null) ? pPFeature : (pPFeature = new PFeatureElements());
	}
	
	public ParserRule getPFeatureRule() {
		return getPFeatureAccess().getRule();
	}

	//PReference returns pat::PReference:
	//	name=ID "=" value+=PObject;
	public PReferenceElements getPReferenceAccess() {
		return (pPReference != null) ? pPReference : (pPReference = new PReferenceElements());
	}
	
	public ParserRule getPReferenceRule() {
		return getPReferenceAccess().getRule();
	}

	//PAttribute returns pat::PAttribute:
	//	name=ID "=" value=Expression;
	public PAttributeElements getPAttributeAccess() {
		return (pPAttribute != null) ? pPAttribute : (pPAttribute = new PAttributeElements());
	}
	
	public ParserRule getPAttributeRule() {
		return getPAttributeAccess().getRule();
	}

	///// 
	///// End-of PATTERNS
	/////
	/////
	///// Begin-of Methods / Imperative
	/////
	//NavigationLibrary returns imperative::ImperativeTransformation:
	//	"navigation" name=EString "(" inModels+=TransformationDefinitionParameter ")" methods+=MethodDefinition* "end";
	public NavigationLibraryElements getNavigationLibraryAccess() {
		return (pNavigationLibrary != null) ? pNavigationLibrary : (pNavigationLibrary = new NavigationLibraryElements());
	}
	
	public ParserRule getNavigationLibraryRule() {
		return getNavigationLibraryAccess().getRule();
	}

	//MethodDefinition returns imperative::MethodDefinition:
	//	"def" type=ClassUse "." name=EString ("(" formalParameters+=MethodParameter ("," formalParameters+=MethodParameter)*
	//	")")? statements+=Statement+ "end";
	public MethodDefinitionElements getMethodDefinitionAccess() {
		return (pMethodDefinition != null) ? pMethodDefinition : (pMethodDefinition = new MethodDefinitionElements());
	}
	
	public ParserRule getMethodDefinitionRule() {
		return getMethodDefinitionAccess().getRule();
	}

	//MethodParameter returns imperative::MethodParameter:
	//	name=EString;
	public MethodParameterElements getMethodParameterAccess() {
		return (pMethodParameter != null) ? pMethodParameter : (pMethodParameter = new MethodParameterElements());
	}
	
	public ParserRule getMethodParameterRule() {
		return getMethodParameterAccess().getRule();
	}

	/////
	///// End-of Methods / Imperative
	/////
	///// 
	///// Begin-of Qool
	/////
	//QoolTransformation returns qool::QoolTransformation:
	//	("qool" | "scripting") name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
	//	//'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
	//	"(" inModels+=TransformationDefinitionParameter ("," inModels+=TransformationDefinitionParameter)* ")" "->" "("
	//	outModels+=TransformationDefinitionParameter? ("," inModels+=TransformationDefinitionParameter)* ")"
	//	annotations+=Annotation* // like this to resolve a reference: it is not the case
	//	//'(' right=[core::TransformationDefinitionParameter|EString] ')'
	//	// ('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
	//	//('inModels' '{' inModels+=TransformationDefinitionParameter ( "," inModels+=TransformationDefinitionParameter)* '}' )?
	//	// ('outModels' '{' outModels+=TransformationDefinitionParameter ( "," outModels+=TransformationDefinitionParameter)* '}' )?
	//	// (traceInterface = TraceInterface)
	//	inlineModels+=InlineModel* queues+=QoolQueue* segments+=Segment+ "end";
	public QoolTransformationElements getQoolTransformationAccess() {
		return (pQoolTransformation != null) ? pQoolTransformation : (pQoolTransformation = new QoolTransformationElements());
	}
	
	public ParserRule getQoolTransformationRule() {
		return getQoolTransformationAccess().getRule();
	}

	//InlineModel returns core::InlineModel:
	//	"model" name=EString classes+=InlineClass+ "end";
	public InlineModelElements getInlineModelAccess() {
		return (pInlineModel != null) ? pInlineModel : (pInlineModel = new InlineModelElements());
	}
	
	public ParserRule getInlineModelRule() {
		return getInlineModelAccess().getRule();
	}

	//InlineClass returns core::InlineClass:
	//	"class" name=EString ("{" features+=InlineReferenceInline (";" features+=InlineReferenceInline)* "}" |
	//	features+=InlineFeatureExpanded features+=InlineFeatureExpanded* "end");
	public InlineClassElements getInlineClassAccess() {
		return (pInlineClass != null) ? pInlineClass : (pInlineClass = new InlineClassElements());
	}
	
	public ParserRule getInlineClassRule() {
		return getInlineClassAccess().getRule();
	}

	//InlineReferenceInline returns core::InlineReference:
	//	name=EString ":" type=TypeExpression;
	public InlineReferenceInlineElements getInlineReferenceInlineAccess() {
		return (pInlineReferenceInline != null) ? pInlineReferenceInline : (pInlineReferenceInline = new InlineReferenceInlineElements());
	}
	
	public ParserRule getInlineReferenceInlineRule() {
		return getInlineReferenceInlineAccess().getRule();
	}

	//InlineFeatureExpanded returns core::InlineFeature:
	//	InlineAttributeExpanded | InlineReferenceExpanded;
	public InlineFeatureExpandedElements getInlineFeatureExpandedAccess() {
		return (pInlineFeatureExpanded != null) ? pInlineFeatureExpanded : (pInlineFeatureExpanded = new InlineFeatureExpandedElements());
	}
	
	public ParserRule getInlineFeatureExpandedRule() {
		return getInlineFeatureExpandedAccess().getRule();
	}

	//InlineAttributeExpanded returns core::InlineAttribute:
	//	"att" name=EString ":" type=TypeExpression multivalued?="*"?;
	public InlineAttributeExpandedElements getInlineAttributeExpandedAccess() {
		return (pInlineAttributeExpanded != null) ? pInlineAttributeExpanded : (pInlineAttributeExpanded = new InlineAttributeExpandedElements());
	}
	
	public ParserRule getInlineAttributeExpandedRule() {
		return getInlineAttributeExpandedAccess().getRule();
	}

	//InlineReferenceExpanded returns core::InlineReference:
	//	"ref" name=EString ":" type=TypeExpression multivalued?="*"?;
	public InlineReferenceExpandedElements getInlineReferenceExpandedAccess() {
		return (pInlineReferenceExpanded != null) ? pInlineReferenceExpanded : (pInlineReferenceExpanded = new InlineReferenceExpandedElements());
	}
	
	public ParserRule getInlineReferenceExpandedRule() {
		return getInlineReferenceExpandedAccess().getRule();
	}

	//// -- Queue 
	//QoolQueue returns qool::QoolQueue:
	//	LocalQueue | ModelElementQueue;
	public QoolQueueElements getQoolQueueAccess() {
		return (pQoolQueue != null) ? pQoolQueue : (pQoolQueue = new QoolQueueElements());
	}
	
	public ParserRule getQoolQueueRule() {
		return getQoolQueueAccess().getRule();
	}

	//LocalQueue returns qool::LocalQueue:
	//	"local" "queue" name=ID ":" type_=TypeExpression ("with" optimizations+=QueueOptimization+)?;
	public LocalQueueElements getLocalQueueAccess() {
		return (pLocalQueue != null) ? pLocalQueue : (pLocalQueue = new LocalQueueElements());
	}
	
	public ParserRule getLocalQueueRule() {
		return getLocalQueueAccess().getRule();
	}

	//ModelElementQueue returns qool::ModelElementQueue:
	//	"model" "queue" name=ID ":" class_=ClassUse;
	public ModelElementQueueElements getModelElementQueueAccess() {
		return (pModelElementQueue != null) ? pModelElementQueue : (pModelElementQueue = new ModelElementQueueElements());
	}
	
	public ParserRule getModelElementQueueRule() {
		return getModelElementQueueAccess().getRule();
	}

	//QueueOptimization returns qool::QueueOptimization:
	//	AccessByFeatureOptimization;
	public QueueOptimizationElements getQueueOptimizationAccess() {
		return (pQueueOptimization != null) ? pQueueOptimization : (pQueueOptimization = new QueueOptimizationElements());
	}
	
	public ParserRule getQueueOptimizationRule() {
		return getQueueOptimizationAccess().getRule();
	}

	//AccessByFeatureOptimization returns qool::AccessByFeatureOptimization:
	//	"access-by" featureName=EString force?="!"?;
	public AccessByFeatureOptimizationElements getAccessByFeatureOptimizationAccess() {
		return (pAccessByFeatureOptimization != null) ? pAccessByFeatureOptimization : (pAccessByFeatureOptimization = new AccessByFeatureOptimizationElements());
	}
	
	public ParserRule getAccessByFeatureOptimizationRule() {
		return getAccessByFeatureOptimizationAccess().getRule();
	}

	//// -- Segments and expressions
	//Segment returns qool::Segment:
	//	"segment" name=EString statements+=QoolStatement+ "end";
	public SegmentElements getSegmentAccess() {
		return (pSegment != null) ? pSegment : (pSegment = new SegmentElements());
	}
	
	public ParserRule getSegmentRule() {
		return getSegmentAccess().getRule();
	}

	//// redefine
	//QoolStatement returns core::Statement:
	//	DefineVariable // | ForEachStatement
	//	| Expression | PutTraceExpression | PropertyWrite | ForAllStatement | EmitStatement;
	public QoolStatementElements getQoolStatementAccess() {
		return (pQoolStatement != null) ? pQoolStatement : (pQoolStatement = new QoolStatementElements());
	}
	
	public ParserRule getQoolStatementRule() {
		return getQoolStatementAccess().getRule();
	}

	//// Redefined for qool... (I need to restrict better what can be done in each language!!)	
	//ClosureDeclaration returns core::ClosureDeclaration:
	//	"{" ("|" formalParameters+=ClosureParameter ("," formalParameters+=ClosureParameter)* "|")? statements+=QoolStatement+
	//	"}";
	public ClosureDeclarationElements getClosureDeclarationAccess() {
		return (pClosureDeclaration != null) ? pClosureDeclaration : (pClosureDeclaration = new ClosureDeclarationElements());
	}
	
	public ParserRule getClosureDeclarationRule() {
		return getClosureDeclarationAccess().getRule();
	}

	//// redefine
	//PrimaryExpression returns core::Expression:
	//	Literal // Facilities
	//	| VariableReference | ModelReference | ParenthesizedExpression | MatchTraceExpression | ClosureDeclaration | // <-- added for qool
	//	MatchExpression | InvokeTransformation | IfExpr | Copier;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//InvokeTransformation returns qool::InvokeTransformation:
	//	InvokeExternal | InvokeInternal;
	public InvokeTransformationElements getInvokeTransformationAccess() {
		return (pInvokeTransformation != null) ? pInvokeTransformation : (pInvokeTransformation = new InvokeTransformationElements());
	}
	
	public ParserRule getInvokeTransformationRule() {
		return getInvokeTransformationAccess().getRule();
	}

	//InvokeInternal returns qool::InvokeInternal:
	//	"invoke-internal" transformationName=QualifiedName "(" (sourceModels+=InvocationParameter (","
	//	sourceModels+=InvocationParameter)*)? ")" "->" "(" (targetModels+=InvocationParameter (","
	//	targetModels+=InvocationParameter)*)? ")" ("input-view-filter" inputViewFilter=[core::DefineVariable])? ("entrypoint"
	//	entryPointName=ID "(" entryPointParameters+=Expression? ("," entryPointParameters+=Expression)* ")")?;
	public InvokeInternalElements getInvokeInternalAccess() {
		return (pInvokeInternal != null) ? pInvokeInternal : (pInvokeInternal = new InvokeInternalElements());
	}
	
	public ParserRule getInvokeInternalRule() {
		return getInvokeInternalAccess().getRule();
	}

	//NamedInvocationParameter returns qool::NamedInvocationParameter:
	//	formalName=EString "=" actualParameter=Expression;
	public NamedInvocationParameterElements getNamedInvocationParameterAccess() {
		return (pNamedInvocationParameter != null) ? pNamedInvocationParameter : (pNamedInvocationParameter = new NamedInvocationParameterElements());
	}
	
	public ParserRule getNamedInvocationParameterRule() {
		return getNamedInvocationParameterAccess().getRule();
	}

	//InvokeExternal returns qool::InvokeExternal:
	//	"invoke-external" transformationName=QualifiedName "(" (sourceModels+=InvocationParameter (","
	//	sourceModels+=InvocationParameter)*)? ")" "->" "(" (targetModels+=InvocationParameter (","
	//	targetModels+=InvocationParameter)*)? ")" ("+" "(" parameters+=NamedInvocationParameter (","
	//	parameters+=NamedInvocationParameter)* ")")? (("entrypoint" entryPointName=ID "(" entryPointParameters+=Expression?
	//	("," entryPointParameters+=Expression)* ")")? | "input-view-filter" inputViewFilter=[core::DefineVariable]
	//	("output-element" outputResolutionSourceElement=Expression "[" queueName=EString "." traceAttributeName=EString
	//	"]")?);
	public InvokeExternalElements getInvokeExternalAccess() {
		return (pInvokeExternal != null) ? pInvokeExternal : (pInvokeExternal = new InvokeExternalElements());
	}
	
	public ParserRule getInvokeExternalRule() {
		return getInvokeExternalAccess().getRule();
	}

	//InvocationParameter returns qool::InvocationParameter:
	//	calleeModelName=ID "=" model=[core::TransformationDefinitionParameter];
	public InvocationParameterElements getInvocationParameterAccess() {
		return (pInvocationParameter != null) ? pInvocationParameter : (pInvocationParameter = new InvocationParameterElements());
	}
	
	public ParserRule getInvocationParameterRule() {
		return getInvocationParameterAccess().getRule();
	}

	//ForAllStatement returns qool::ForAllStatement:
	//	"forall" name=ID "from" queue=[qool::QoolQueue] ("where" condition=Expression)? statements+=QoolStatement+ "end";
	public ForAllStatementElements getForAllStatementAccess() {
		return (pForAllStatement != null) ? pForAllStatement : (pForAllStatement = new ForAllStatementElements());
	}
	
	public ParserRule getForAllStatementRule() {
		return getForAllStatementAccess().getRule();
	}

	//EmitStatement returns qool::EmitStatement:
	//	"emit" value=Expression "to" queue=[qool::QoolQueue];
	public EmitStatementElements getEmitStatementAccess() {
		return (pEmitStatement != null) ? pEmitStatement : (pEmitStatement = new EmitStatementElements());
	}
	
	public ParserRule getEmitStatementRule() {
		return getEmitStatementAccess().getRule();
	}

	//MatchExpression returns qool::MatchExpression:
	//	queue=[qool::QoolQueue] "[" predicates+=Predicate ("," predicates+=Predicate)* "]";
	public MatchExpressionElements getMatchExpressionAccess() {
		return (pMatchExpression != null) ? pMatchExpression : (pMatchExpression = new MatchExpressionElements());
	}
	
	public ParserRule getMatchExpressionRule() {
		return getMatchExpressionAccess().getRule();
	}

	//Predicate returns qool::MatchPredicate:
	//	KindOfPredicate | PropertyEqualsPredicate;
	public PredicateElements getPredicateAccess() {
		return (pPredicate != null) ? pPredicate : (pPredicate = new PredicateElements());
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}

	//KindOfPredicate returns qool::KindOfPredicate:
	//	"#kindOf" "(" class_=ClassUse ")";
	public KindOfPredicateElements getKindOfPredicateAccess() {
		return (pKindOfPredicate != null) ? pKindOfPredicate : (pKindOfPredicate = new KindOfPredicateElements());
	}
	
	public ParserRule getKindOfPredicateRule() {
		return getKindOfPredicateAccess().getRule();
	}

	//PropertyEqualsPredicate returns qool::PropertyEqualsPredicate:
	//	"#p" "(" propertyName=EString "," value=Expression ")";
	public PropertyEqualsPredicateElements getPropertyEqualsPredicateAccess() {
		return (pPropertyEqualsPredicate != null) ? pPropertyEqualsPredicate : (pPropertyEqualsPredicate = new PropertyEqualsPredicateElements());
	}
	
	public ParserRule getPropertyEqualsPredicateRule() {
		return getPropertyEqualsPredicateAccess().getRule();
	}

	//// Begin-of Facilities
	//Copier returns facilities::Copier:
	//	"copy" "(" objects+=Expression ("," objects+=Expression)* ")" "model"
	//	copyInModel=[core::TransformationDefinitionParameter] ("{" callbacks+=CopierCallbackDefinition (","
	//	callbacks+=CopierCallbackDefinition)* "}")?;
	public CopierElements getCopierAccess() {
		return (pCopier != null) ? pCopier : (pCopier = new CopierElements());
	}
	
	public ParserRule getCopierRule() {
		return getCopierAccess().getRule();
	}

	//CopierCallbackDefinition returns facilities::CopierCallbackDefinition:
	//	("with" | stop?="stop") trigger=Expression "->" action=Expression;
	public CopierCallbackDefinitionElements getCopierCallbackDefinitionAccess() {
		return (pCopierCallbackDefinition != null) ? pCopierCallbackDefinition : (pCopierCallbackDefinition = new CopierCallbackDefinitionElements());
	}
	
	public ParserRule getCopierCallbackDefinitionRule() {
		return getCopierCallbackDefinitionAccess().getRule();
	}

	//// End-of facilities
	/////
	///// End-of Qool
	/////
	/////
	///// Being-of TAO
	/////
	//TaoTransformation returns tao::TaoTransformation:
	//	"tao" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
	//	//'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
	//	"(" inModels+=TransformationDefinitionParameter ("," inModels+=TransformationDefinitionParameter)* ")" "->" "("
	//	outModels+=TransformationDefinitionParameter ("," outModels+=TransformationDefinitionParameter)* ")"
	//	uses+=UsesStatements* templates+=Template+ "end";
	public TaoTransformationElements getTaoTransformationAccess() {
		return (pTaoTransformation != null) ? pTaoTransformation : (pTaoTransformation = new TaoTransformationElements());
	}
	
	public ParserRule getTaoTransformationRule() {
		return getTaoTransformationAccess().getRule();
	}

	//// @common
	//Template returns tao::Template:
	//	"template" name=ID "(" parameters+=TemplateParameter ("," parameters+=TemplateParameter)* ")"
	//	roots+=TemplateRootObject "end";
	public TemplateElements getTemplateAccess() {
		return (pTemplate != null) ? pTemplate : (pTemplate = new TemplateElements());
	}
	
	public ParserRule getTemplateRule() {
		return getTemplateAccess().getRule();
	}

	//TemplateParameter returns tao::TemplateParameter:
	//	name=ID ":" type=ClassUse;
	public TemplateParameterElements getTemplateParameterAccess() {
		return (pTemplateParameter != null) ? pTemplateParameter : (pTemplateParameter = new TemplateParameterElements());
	}
	
	public ParserRule getTemplateParameterRule() {
		return getTemplateParameterAccess().getRule();
	}

	//// To avoid conflicts, because Statement is not actually used
	////Statement returns core::Statement: 
	////	DefineVariable
	////;
	//// "redefine" Expression
	//TaoExpression returns core::Expression:
	//	WithResolveMethodCall;
	public TaoExpressionElements getTaoExpressionAccess() {
		return (pTaoExpression != null) ? pTaoExpression : (pTaoExpression = new TaoExpressionElements());
	}
	
	public ParserRule getTaoExpressionRule() {
		return getTaoExpressionAccess().getRule();
	}

	//TemplateRootObject returns tao::TemplateRootObject:
	//	(name=ID ":")? // 	ObjectInstantiation
	//	//  Duplicated!
	//	type=ClassUse "{" assigments+=Assignment* "}";
	public TemplateRootObjectElements getTemplateRootObjectAccess() {
		return (pTemplateRootObject != null) ? pTemplateRootObject : (pTemplateRootObject = new TemplateRootObjectElements());
	}
	
	public ParserRule getTemplateRootObjectRule() {
		return getTemplateRootObjectAccess().getRule();
	}

	//ObjectInstantiation returns tao::ObjectInstantiation:
	//	(name=ID ":")? type=ClassUse "{" assigments+=Assignment* "}";
	public ObjectInstantiationElements getObjectInstantiationAccess() {
		return (pObjectInstantiation != null) ? pObjectInstantiation : (pObjectInstantiation = new ObjectInstantiationElements());
	}
	
	public ParserRule getObjectInstantiationRule() {
		return getObjectInstantiationAccess().getRule();
	}

	//Assignment returns tao::Assignment:
	//	AttributeAssigment | ObjectSyntax | Invocation;
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//AttributeAssigment returns tao::AttributeAssigment:
	//	targetFeature=ID "=" expr=SourceExpression;
	public AttributeAssigmentElements getAttributeAssigmentAccess() {
		return (pAttributeAssigment != null) ? pAttributeAssigment : (pAttributeAssigment = new AttributeAssigmentElements());
	}
	
	public ParserRule getAttributeAssigmentRule() {
		return getAttributeAssigmentAccess().getRule();
	}

	////	| NormalExpression 
	//SourceExpression returns tao::SourceExpression:
	//	WithOptionalVariableExpression;
	public SourceExpressionElements getSourceExpressionAccess() {
		return (pSourceExpression != null) ? pSourceExpression : (pSourceExpression = new SourceExpressionElements());
	}
	
	public ParserRule getSourceExpressionRule() {
		return getSourceExpressionAccess().getRule();
	}

	//WithOptionalVariableExpression returns tao::WithOptionalVariableExpression:
	//	(variable=ObjectSourceVariable ":")? expr= // receptor=[core::Variable] "." sourceFeature=ID
	//	TaoExpression;
	public WithOptionalVariableExpressionElements getWithOptionalVariableExpressionAccess() {
		return (pWithOptionalVariableExpression != null) ? pWithOptionalVariableExpression : (pWithOptionalVariableExpression = new WithOptionalVariableExpressionElements());
	}
	
	public ParserRule getWithOptionalVariableExpressionRule() {
		return getWithOptionalVariableExpressionAccess().getRule();
	}

	//ObjectSourceVariable returns tao::ObjectSourceVariable:
	//	name=ID;
	public ObjectSourceVariableElements getObjectSourceVariableAccess() {
		return (pObjectSourceVariable != null) ? pObjectSourceVariable : (pObjectSourceVariable = new ObjectSourceVariableElements());
	}
	
	public ParserRule getObjectSourceVariableRule() {
		return getObjectSourceVariableAccess().getRule();
	}

	//ObjectSyntax returns tao::ObjectSyntax:
	//	targetFeature=ID "=" ("from" expr=SourceExpression multivalued?="*"? "to")? object=ObjectInstantiation;
	public ObjectSyntaxElements getObjectSyntaxAccess() {
		return (pObjectSyntax != null) ? pObjectSyntax : (pObjectSyntax = new ObjectSyntaxElements());
	}
	
	public ParserRule getObjectSyntaxRule() {
		return getObjectSyntaxAccess().getRule();
	}

	//Invocation returns tao::Invocation:
	//	targetFeature=ID "=" template=[tao::Template] "(" expr=SourceExpression multivalued?="*"? ")";
	public InvocationElements getInvocationAccess() {
		return (pInvocation != null) ? pInvocation : (pInvocation = new InvocationElements());
	}
	
	public ParserRule getInvocationRule() {
		return getInvocationAccess().getRule();
	}

	/////
	///// End-of TAO
	/////
	/////
	///// Begin-of Attribute
	/////
	//AttributionTransformation returns attr::AttributionTransformation:
	//	"attribution" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
	//	//'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
	//	"(" inModels+=TransformationDefinitionParameter ("," inModels+=TransformationDefinitionParameter)* ")" "->" "("
	//	outModels+=TransformationDefinitionParameter? ("," inModels+=TransformationDefinitionParameter)* ")"
	//	annotations+=Annotation* // like this to resolve a reference: it is not the case
	//	//'(' right=[core::TransformationDefinitionParameter|EString] ')'
	//	// ('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
	//	//('inModels' '{' inModels+=TransformationDefinitionParameter ( "," inModels+=TransformationDefinitionParameter)* '}' )?
	//	// ('outModels' '{' outModels+=TransformationDefinitionParameter ( "," outModels+=TransformationDefinitionParameter)* '}' )?
	//	// (traceInterface = TraceInterface)
	//	uses+=UsesStatements* attributes+=AttributeDcl* rules+=AttributionRule+ "end";
	public AttributionTransformationElements getAttributionTransformationAccess() {
		return (pAttributionTransformation != null) ? pAttributionTransformation : (pAttributionTransformation = new AttributionTransformationElements());
	}
	
	public ParserRule getAttributionTransformationRule() {
		return getAttributionTransformationAccess().getRule();
	}

	//AttributeDcl returns attr::AttributeDcl:
	//	InheritedAttributeDcl | SynthesizedAttributeDcl;
	public AttributeDclElements getAttributeDclAccess() {
		return (pAttributeDcl != null) ? pAttributeDcl : (pAttributeDcl = new AttributeDclElements());
	}
	
	public ParserRule getAttributeDclRule() {
		return getAttributeDclAccess().getRule();
	}

	//InheritedAttributeDcl returns attr::InheritedAttributeDcl:
	//	"inh" name=ID ":" type_=ClassUse;
	public InheritedAttributeDclElements getInheritedAttributeDclAccess() {
		return (pInheritedAttributeDcl != null) ? pInheritedAttributeDcl : (pInheritedAttributeDcl = new InheritedAttributeDclElements());
	}
	
	public ParserRule getInheritedAttributeDclRule() {
		return getInheritedAttributeDclAccess().getRule();
	}

	//SynthesizedAttributeDcl returns attr::SynthesizedAttributeDcl:
	//	"syn" name=ID ":" type_=ClassUse;
	public SynthesizedAttributeDclElements getSynthesizedAttributeDclAccess() {
		return (pSynthesizedAttributeDcl != null) ? pSynthesizedAttributeDcl : (pSynthesizedAttributeDcl = new SynthesizedAttributeDclElements());
	}
	
	public ParserRule getSynthesizedAttributeDclRule() {
		return getSynthesizedAttributeDclAccess().getRule();
	}

	//AttributionRule returns attr::AttributionRule:
	//	"rule" type=ClassUse statements+=AttributionStatement+ //		("properties:"
	//	//		(statements+=PropertyWrite)+)? // It does not recognize property writes as parts of statements!
	//	"end";
	public AttributionRuleElements getAttributionRuleAccess() {
		return (pAttributionRule != null) ? pAttributionRule : (pAttributionRule = new AttributionRuleElements());
	}
	
	public ParserRule getAttributionRuleRule() {
		return getAttributionRuleAccess().getRule();
	}

	//// redefine
	//AttributionStatement returns core::Statement:
	//	AttributionDefineVariable // | Expression // This is to avoid conflicts, but I don't think standalone expressions are really needed here
	//	// | AttributionExpression
	//	| AttributionExpressionNoUse | AttributeInit | PropertyWrite;
	public AttributionStatementElements getAttributionStatementAccess() {
		return (pAttributionStatement != null) ? pAttributionStatement : (pAttributionStatement = new AttributionStatementElements());
	}
	
	public ParserRule getAttributionStatementRule() {
		return getAttributionStatementAccess().getRule();
	}

	//AttributionDefineVariable returns core::DefineVariable:
	//	name=EString "=" expression=AttributionExpression;
	public AttributionDefineVariableElements getAttributionDefineVariableAccess() {
		return (pAttributionDefineVariable != null) ? pAttributionDefineVariable : (pAttributionDefineVariable = new AttributionDefineVariableElements());
	}
	
	public ParserRule getAttributionDefineVariableRule() {
		return getAttributionDefineVariableAccess().getRule();
	}

	/// *
	//AttributionClosureStatement returns core::Statement: 
	//	DefineVariable
	//	// | Expression 
	//	| PropertyWrite
	//	| VariableReference 
	//	| AttributeInit	// Let's see if this compile and works...
	//	
	//	// TODO: Allow normal expressions in closures... conflict currently
	//;
	// * / // Redefined
	//AttributionClosureDeclaration returns core::ClosureDeclaration:
	//	"{" ("|" formalParameters+=ClosureParameter ("," formalParameters+=ClosureParameter)* "|")?
	//	statements+=AttributionStatement+ "}";
	public AttributionClosureDeclarationElements getAttributionClosureDeclarationAccess() {
		return (pAttributionClosureDeclaration != null) ? pAttributionClosureDeclaration : (pAttributionClosureDeclaration = new AttributionClosureDeclarationElements());
	}
	
	public ParserRule getAttributionClosureDeclarationRule() {
		return getAttributionClosureDeclarationAccess().getRule();
	}

	//// redefine
	////	| InheritedAttributeUse   // <-- added for attribution
	//// | SynthesizedAttributeUse // <-- added for attribution
	//AttributionPrimaryExpression returns core::Expression:
	//	Literal | VariableReference | ModelReference | ParenthesizedExpression | AttributionClosureDeclaration | AttributeUse;
	public AttributionPrimaryExpressionElements getAttributionPrimaryExpressionAccess() {
		return (pAttributionPrimaryExpression != null) ? pAttributionPrimaryExpression : (pAttributionPrimaryExpression = new AttributionPrimaryExpressionElements());
	}
	
	public ParserRule getAttributionPrimaryExpressionRule() {
		return getAttributionPrimaryExpressionAccess().getRule();
	}

	//AttributionPrimaryExpressionNoUse returns core::Expression:
	//	Literal | VariableReference | ModelReference | ParenthesizedExpression | AttributionClosureDeclaration | IfExpr;
	public AttributionPrimaryExpressionNoUseElements getAttributionPrimaryExpressionNoUseAccess() {
		return (pAttributionPrimaryExpressionNoUse != null) ? pAttributionPrimaryExpressionNoUse : (pAttributionPrimaryExpressionNoUse = new AttributionPrimaryExpressionNoUseElements());
	}
	
	public ParserRule getAttributionPrimaryExpressionNoUseRule() {
		return getAttributionPrimaryExpressionNoUseAccess().getRule();
	}

	//AttributionExpression returns core::Expression: // AttributionMethodCall	
	//	AttributionMethodCall | // | AttributeUse	
	//	AttributionResolveLinkAsArray;
	public AttributionExpressionElements getAttributionExpressionAccess() {
		return (pAttributionExpression != null) ? pAttributionExpression : (pAttributionExpression = new AttributionExpressionElements());
	}
	
	public ParserRule getAttributionExpressionRule() {
		return getAttributionExpressionAccess().getRule();
	}

	//AttributionExpressionNoUse returns core::Expression:
	//	AttributionMethodCallNoUse | AttributionResolveLinkAsArray;
	public AttributionExpressionNoUseElements getAttributionExpressionNoUseAccess() {
		return (pAttributionExpressionNoUse != null) ? pAttributionExpressionNoUse : (pAttributionExpressionNoUse = new AttributionExpressionNoUseElements());
	}
	
	public ParserRule getAttributionExpressionNoUseRule() {
		return getAttributionExpressionNoUseAccess().getRule();
	}

	//AttributionResolveLinkAsArray returns core::ResolveLink:
	//	(module=[core::UseDeclaration] isExternal?="!") linkName=EString ("." featureName=EString)? "["
	//	expr=AttributionExpression "]";
	public AttributionResolveLinkAsArrayElements getAttributionResolveLinkAsArrayAccess() {
		return (pAttributionResolveLinkAsArray != null) ? pAttributionResolveLinkAsArray : (pAttributionResolveLinkAsArray = new AttributionResolveLinkAsArrayElements());
	}
	
	public ParserRule getAttributionResolveLinkAsArrayRule() {
		return getAttributionResolveLinkAsArrayAccess().getRule();
	}

	//// Copied from expressions
	//AttributionMethodCall returns core::Expression:
	//	AttributionPrimaryExpression ({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression //|	( ({core::MethodCall.receptor = current}) "." methodName=EString )
	//	//|   (=> ({core::KeywordMethodCall.receptor = current}) "." (parameters+=KeywordParameter)+  )
	//	//|   (=> ({core::KeywordMethodCall.receptor = current}) (parameters+=KeywordParameter)+  )+	
	//	| (=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="("
	//	parameters+=AttributionExpression ("," parameters+=AttributionExpression)* ")")?
	//	parameters+=AttributionClosureDeclaration?)+)?;
	public AttributionMethodCallElements getAttributionMethodCallAccess() {
		return (pAttributionMethodCall != null) ? pAttributionMethodCall : (pAttributionMethodCall = new AttributionMethodCallElements());
	}
	
	public ParserRule getAttributionMethodCallRule() {
		return getAttributionMethodCallAccess().getRule();
	}

	//AttributionMethodCallNoUse returns core::Expression:
	//	AttributionPrimaryExpressionNoUse ({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression | (=>
	//	({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=AttributionExpression
	//	("," parameters+=AttributionExpression)* ")")? parameters+=AttributionClosureDeclaration?)+)?;
	public AttributionMethodCallNoUseElements getAttributionMethodCallNoUseAccess() {
		return (pAttributionMethodCallNoUse != null) ? pAttributionMethodCallNoUse : (pAttributionMethodCallNoUse = new AttributionMethodCallNoUseElements());
	}
	
	public ParserRule getAttributionMethodCallNoUseRule() {
		return getAttributionMethodCallNoUseAccess().getRule();
	}

	//AttributeUse returns attr::AttributeUse:
	//	attribute=[attr::AttributeDcl] "[" expr=AttributionExpressionNoUse "]";
	public AttributeUseElements getAttributeUseAccess() {
		return (pAttributeUse != null) ? pAttributeUse : (pAttributeUse = new AttributeUseElements());
	}
	
	public ParserRule getAttributeUseRule() {
		return getAttributeUseAccess().getRule();
	}

	////InitiableExpression returns core::Expression:
	////	VariableReference 
	////    | VariableReference	(=> ({core::MethodCall.receptor = current}) "." methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")" )? (parameters+=ClosureDeclaration)?  )+
	////;
	/// *
	//AttributionMethodCall returns core::Expression:
	//	AttributionPrimaryExpression
	//	(
	//		( ({core::BinaryExpr.left = current}) binaryOp=BinaryOp right=Expression)		
	//		| ( ( ({attr::AttributeUse.expr = current}) "[" attribute=[attr::AttributeDcl] "]" )
	//			(=> ({core::MethodCall.receptor = current}) "." methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")" )? (parameters+=ClosureDeclaration)?  )?
	//			)+
	//	    | ( (=> ({core::MethodCall.receptor = current}) "." methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")" )? (parameters+=ClosureDeclaration)?  )
	//			  (  (({attr::AttributeUse.expr = current}) "[" attribute=[attr::AttributeDcl] "]") |
	//			  	 ((({core::ResolveLink.expr = current}) "[" module=[core::UseDeclaration] isExternal?="!" linkName=EString ("." featureName=EString)?  "]"))			  	
	//			  )? )+
	//        // to allow accessing attributes	
	//	)? // ? ( ({attr::AttributeUse.expr = current}) "[" attribute=[attr::AttributeDcl] "]" )?
	//;
	// * / ///
	///// End-of Attribution
	/////
	/// *
	////
	//// End-of PatternSpecification
	////
	//QoolTransformation returns qool::QoolTransformation:
	//	'qool'
	//	name=EString
	//	'(' (inModels+=TransformationDefinitionParameter) ')' '->' '(' outModels+=TransformationDefinitionParameter ')'
	//	(inlineModels += InlineModel)*
	//	(queues += QoolQueue)+
	//	(segments += Segment)+
	//    ;
	//
	//// @common
	//TransformationDefinitionParameter returns core::TransformationDefinitionParameter:
	//	{core::TransformationDefinitionParameter}
	//	name=EString
	//	;
	//
	//InlineModel returns core::InlineModel :
	//	"model" name=EString
	//		(classes+=InlineClass)+
	//	"end"
	//;
	//
	//InlineClass returns core::InlineClass :
	//	"class" name=EString	 
	//	(('{' features+=InlineReferenceInline ( ";" features+=InlineReferenceInline)* '}') | 
	//     ( features+=InlineFeatureExpanded ( features+=InlineFeatureExpanded)* 'end'))
	//;
	//
	//InlineReferenceInline returns core::InlineReference:
	//	name=EString ":" type=TypeExpression
	//;
	//
	//InlineFeatureExpanded returns core::InlineFeature :
	//	InlineAttributeExpanded 
	//	| InlineReferenceExpanded
	//;
	//
	//InlineAttributeExpanded returns core::InlineAttribute :
	//	"att" name=EString  ":" type=TypeExpression (multivalued?="*")? 
	//;
	//
	//InlineReferenceExpanded returns core::InlineReference:
	//	"ref" name=EString ":" type=TypeExpression (multivalued?="*")?
	//;
	//
	//// -- Queue 
	//QoolQueue returns qool::QoolQueue:
	//	LocalQueue |
	//	ModelElementQueue
	//;
	//
	//LocalQueue returns qool::LocalQueue:
	//	"local" "queue" name=ID ":" type_=TypeExpression	
	//;
	//
	//ModelElementQueue returns qool::ModelElementQueue: 
	//	"model" "queue" name=ID ":" class_=ClassUse
	//;
	//
	//// -- Segments and expressions
	//
	//Segment returns qool::Segment: 
	//	"segment" name=EString
	//		(statements += Statement)+	
	//	"end"	
	//;
	//
	//// redefine
	//Statement returns core::Statement: 
	//	DefineVariable
	//	| Expression
	//	| PutTraceExpression
	//	| PropertyWrite
	//	| ForAllStatement
	//	// | ForEachStatement
	//	| EmitStatement	
	//;
	//
	//// redefine
	//PrimaryExpression returns core::Expression: 
	//	  Literal
	//	| VariableReference
	//	| ModelReference
	//	| ParenthesizedExpression
	//	| MatchTraceExpression 
	//	| ClosureDeclaration
	//	| MatchExpression // <-- added for qool
	//;
	//
	//ForAllStatement returns qool::ForAllStatement: 
	//	"forall" name=ID "from" queue=[qool::QoolQueue]
	//		("where" condition = Expression)?
	//		(statements += Statement)+		
	//	"end"
	//;
	//
	//EmitStatement returns qool::EmitStatement: 
	//	"emit" value=Expression "to" queue=[qool::QoolQueue]
	//;
	//
	//MatchExpression returns qool::MatchExpression: 
	//	queue=[qool::QoolQueue] "[" (predicates += Predicate) ("," predicates += Predicate)* "]" 
	//;
	//
	//Predicate returns qool::MatchPredicate:
	//	KindOfPredicate
	//	| PropertyEqualsPredicate 
	//;
	//
	//KindOfPredicate returns qool::KindOfPredicate:
	//    "#kindOf" "(" class_ = ClassUse ")"
	//;
	//
	//PropertyEqualsPredicate returns qool::PropertyEqualsPredicate:
	//    "#p" "(" propertyName=EString "," value=Expression ")"
	//;
	//
	// * / AttributeInit returns attr::AttributeInit: // attribute=[attr::AttributeDcl] "[" receptor=InitiableExpression "]" "<-" right=Expression  
	//	attribute=[attr::AttributeDcl] "[" receptor=AttributionExpressionNoUse "]" "<-" right=AttributionExpression;
	public AttributeInitElements getAttributeInitAccess() {
		return (pAttributeInit != null) ? pAttributeInit : (pAttributeInit = new AttributeInitElements());
	}
	
	public ParserRule getAttributeInitRule() {
		return getAttributeInitAccess().getRule();
	}

	//// Begin-of Core
	//TraceInterface returns core::TraceInterface:
	//	"trace" name=EString definitions+=TraceDefinition+ "end";
	public ExpressionsGrammarAccess.TraceInterfaceElements getTraceInterfaceAccess() {
		return gaExpressions.getTraceInterfaceAccess();
	}
	
	public ParserRule getTraceInterfaceRule() {
		return getTraceInterfaceAccess().getRule();
	}

	//TraceDefinition returns core::TraceDefinition:
	//	"link" name=EString ("{" elements+=TraceElementInline (";" elements+=TraceElementInline)* "}" |
	//	elements+=TraceElementExpanded elements+=TraceElementExpanded* "end");
	public ExpressionsGrammarAccess.TraceDefinitionElements getTraceDefinitionAccess() {
		return gaExpressions.getTraceDefinitionAccess();
	}
	
	public ParserRule getTraceDefinitionRule() {
		return getTraceDefinitionAccess().getRule();
	}

	//TraceElementInline returns core::TraceElement:
	//	name=EString ":" type=TypeExpression;
	public ExpressionsGrammarAccess.TraceElementInlineElements getTraceElementInlineAccess() {
		return gaExpressions.getTraceElementInlineAccess();
	}
	
	public ParserRule getTraceElementInlineRule() {
		return getTraceElementInlineAccess().getRule();
	}

	//TraceElementExpanded returns core::TraceElement:
	//	"var" name=EString ":" type=TypeExpression;
	public ExpressionsGrammarAccess.TraceElementExpandedElements getTraceElementExpandedAccess() {
		return gaExpressions.getTraceElementExpandedAccess();
	}
	
	public ParserRule getTraceElementExpandedRule() {
		return getTraceElementExpandedAccess().getRule();
	}

	//TypeExpression returns core::TypeExpression:
	//	ClassUse;
	public ExpressionsGrammarAccess.TypeExpressionElements getTypeExpressionAccess() {
		return gaExpressions.getTypeExpressionAccess();
	}
	
	public ParserRule getTypeExpressionRule() {
		return getTypeExpressionAccess().getRule();
	}

	//ClassUse returns core::ClassUse:
	//	model=[core::RepresentModel] "!" className=ID annotations+=SingleAnnotation? strictType?="!"?;
	public ExpressionsGrammarAccess.ClassUseElements getClassUseAccess() {
		return gaExpressions.getClassUseAccess();
	}
	
	public ParserRule getClassUseRule() {
		return getClassUseAccess().getRule();
	}

	//Statement returns core::Statement:
	//	DefineVariable | Expression | PutTraceExpression | PropertyWrite;
	public ExpressionsGrammarAccess.StatementElements getStatementAccess() {
		return gaExpressions.getStatementAccess();
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//PropertyWrite returns core::PropertyWrite:
	//	receptor=[core::Variable] "." property=ID "=" expression=Expression;
	public ExpressionsGrammarAccess.PropertyWriteElements getPropertyWriteAccess() {
		return gaExpressions.getPropertyWriteAccess();
	}
	
	public ParserRule getPropertyWriteRule() {
		return getPropertyWriteAccess().getRule();
	}

	//DefineVariable returns core::DefineVariable:
	//	name=EString "=" expression=Expression;
	public ExpressionsGrammarAccess.DefineVariableElements getDefineVariableAccess() {
		return gaExpressions.getDefineVariableAccess();
	}
	
	public ParserRule getDefineVariableRule() {
		return getDefineVariableAccess().getRule();
	}

	//// ClassUse How to reuse ClassUse?? 
	//ModelReference returns core::ModelReference:
	//	model=[core::RepresentModel] "!" className=EString;
	public ExpressionsGrammarAccess.ModelReferenceElements getModelReferenceAccess() {
		return gaExpressions.getModelReferenceAccess();
	}
	
	public ParserRule getModelReferenceRule() {
		return getModelReferenceAccess().getRule();
	}

	//Expression returns core::Expression:
	//	MethodCall;
	public ExpressionsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaExpressions.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//IfExpr returns core::IfExpr:
	//	"if" then=ConditionBranch ("elsif" elsifs+=ConditionBranch)* ("else" else=BranchBranch)? "end";
	public ExpressionsGrammarAccess.IfExprElements getIfExprAccess() {
		return gaExpressions.getIfExprAccess();
	}
	
	public ParserRule getIfExprRule() {
		return getIfExprAccess().getRule();
	}

	//ConditionBranch returns core::IfBranch:
	//	condition=Expression statements+=Statement+;
	public ExpressionsGrammarAccess.ConditionBranchElements getConditionBranchAccess() {
		return gaExpressions.getConditionBranchAccess();
	}
	
	public ParserRule getConditionBranchRule() {
		return getConditionBranchAccess().getRule();
	}

	//BranchBranch returns core::IfBranch:
	//	statements+=Statement+;
	public ExpressionsGrammarAccess.BranchBranchElements getBranchBranchAccess() {
		return gaExpressions.getBranchBranchAccess();
	}
	
	public ParserRule getBranchBranchRule() {
		return getBranchBranchAccess().getRule();
	}

	////BinaryExpr returns core::BinaryExpr:
	////	left=Expression  binaryOp=BinaryOp right=Expression 
	////;
	//enum BinaryOp returns core::BinaryOp:
	//	ADD="+" | SUB="-" | MUL="*" | DIV="/";
	public ExpressionsGrammarAccess.BinaryOpElements getBinaryOpAccess() {
		return gaExpressions.getBinaryOpAccess();
	}
	
	public EnumRule getBinaryOpRule() {
		return getBinaryOpAccess().getRule();
	}

	//ParenthesizedExpression returns core::Expression:
	//	"(" Expression ")";
	public ExpressionsGrammarAccess.ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return gaExpressions.getParenthesizedExpressionAccess();
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//Literal returns core::Expression:
	//	FloatLiteral | NumLiteral | StringLiteral | BooleanLiteral;
	public ExpressionsGrammarAccess.LiteralElements getLiteralAccess() {
		return gaExpressions.getLiteralAccess();
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//VariableReference returns core::VariableReference:
	//	variable=[core::Variable];
	public ExpressionsGrammarAccess.VariableReferenceElements getVariableReferenceAccess() {
		return gaExpressions.getVariableReferenceAccess();
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	//ClosureParameter returns core::ClosureParameter:
	//	name=ID;
	public ExpressionsGrammarAccess.ClosureParameterElements getClosureParameterAccess() {
		return gaExpressions.getClosureParameterAccess();
	}
	
	public ParserRule getClosureParameterRule() {
		return getClosureParameterAccess().getRule();
	}

	//MethodCall returns core::Expression:
	//	PrimaryExpression ({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression //|	( ({core::MethodCall.receptor = current}) "." methodName=EString )
	//	//|   (=> ({core::KeywordMethodCall.receptor = current}) "." (parameters+=KeywordParameter)+  )
	//	//|   (=> ({core::KeywordMethodCall.receptor = current}) (parameters+=KeywordParameter)+  )+	
	//	| (=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
	//	parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)+)?;
	public ExpressionsGrammarAccess.MethodCallElements getMethodCallAccess() {
		return gaExpressions.getMethodCallAccess();
	}
	
	public ParserRule getMethodCallRule() {
		return getMethodCallAccess().getRule();
	}

	//WithResolveMethodCall returns core::Expression:
	//	PrimaryExpression ({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression // to allow accessing attributes	
	//	| (({core::ResolveLink.expr=current} "[" (module=[core::UseDeclaration] isExternal?="!")? linkName=EString ("."
	//	featureName=EString)? "]") (=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="("
	//	parameters+=Expression ("," parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)?)+ | ((=>
	//	({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
	//	parameters+=Expression)* ")")? parameters+=ClosureDeclaration?) ({core::ResolveLink.expr=current} "["
	//	(module=[core::UseDeclaration] isExternal?="!")? linkName=EString ("." featureName=EString)? "]")?)+)? // ? ( ({attr::AttributeUse.expr = current}) "[" attribute=[attr::AttributeDcl] "]" )?
	//;
	public ExpressionsGrammarAccess.WithResolveMethodCallElements getWithResolveMethodCallAccess() {
		return gaExpressions.getWithResolveMethodCallAccess();
	}
	
	public ParserRule getWithResolveMethodCallRule() {
		return getWithResolveMethodCallAccess().getRule();
	}

	/// *
	//WithResolveMethodCall returns core::Expression:
	//	PrimaryExpression
	//	(
	//		( ({core::BinaryExpr.left = current}) binaryOp=BinaryOp right=Expression)		
	//		| ( ( ({core::ResolveLink.expr = current}) "[" linkName=EString "]" )
	//			(=> ({core::MethodCall.receptor = current}) "." methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")" )? (parameters+=ClosureDeclaration)?  )?
	//			)+
	//	    | ( (=> ({core::MethodCall.receptor = current}) "." methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")" )? (parameters+=ClosureDeclaration)?  )
	//			  (({core::ResolveLink.expr = current}) "[" linkName=EString "]")? )+
	//        // to allow accessing attributes	
	//	)? // ? ( ({attr::AttributeUse.expr = current}) "[" attribute=[attr::AttributeDcl] "]" )?
	//;
	// * / / *
	//class ResolveLink extends Expression {
	//   val Expression[1] expr;
	//   attr Boolean[1] isExternal = false;
	//   ref UseDeclaration[0..1] module;
	//
	//   attr String[1] linkName;
	//   attr String[0..1] featureName;
	//}
	// * / KeywordParameter returns core::KeywordParameter:
	//	keyword=KEYWORD_ID value=Expression;
	public ExpressionsGrammarAccess.KeywordParameterElements getKeywordParameterAccess() {
		return gaExpressions.getKeywordParameterAccess();
	}
	
	public ParserRule getKeywordParameterRule() {
		return getKeywordParameterAccess().getRule();
	}

	//terminal KEYWORD_ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")* ":";
	public TerminalRule getKEYWORD_IDRule() {
		return gaExpressions.getKEYWORD_IDRule();
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaExpressions.getIDRule();
	} 

	//MatchTraceExpression returns core::MatchTrace:
	//	"match" (ID "!")? trace=[core::TraceDefinition] "with" "[" traceExpr=TraceExprLanguage "]";
	public ExpressionsGrammarAccess.MatchTraceExpressionElements getMatchTraceExpressionAccess() {
		return gaExpressions.getMatchTraceExpressionAccess();
	}
	
	public ParserRule getMatchTraceExpressionRule() {
		return getMatchTraceExpressionAccess().getRule();
	}

	//// TODO: Resolve!! 
	//TraceExprLanguage returns core::TraceCompareExpression:
	//	traceVar=[core::TraceElement] "=" expr=Expression;
	public ExpressionsGrammarAccess.TraceExprLanguageElements getTraceExprLanguageAccess() {
		return gaExpressions.getTraceExprLanguageAccess();
	}
	
	public ParserRule getTraceExprLanguageRule() {
		return getTraceExprLanguageAccess().getRule();
	}

	//PutTraceExpression returns core::PutTrace:
	//	"put" (ID "!")? trace=[core::TraceDefinition] "with" "[" parameters+=PutTraceParameter (","
	//	parameters+=PutTraceParameter)+ "]";
	public ExpressionsGrammarAccess.PutTraceExpressionElements getPutTraceExpressionAccess() {
		return gaExpressions.getPutTraceExpressionAccess();
	}
	
	public ParserRule getPutTraceExpressionRule() {
		return getPutTraceExpressionAccess().getRule();
	}

	//PutTraceParameter returns core::PutTraceParameter:
	//	traceVar=[core::TraceElement] "=" value=Expression;
	public ExpressionsGrammarAccess.PutTraceParameterElements getPutTraceParameterAccess() {
		return gaExpressions.getPutTraceParameterAccess();
	}
	
	public ParserRule getPutTraceParameterRule() {
		return getPutTraceParameterAccess().getRule();
	}

	/// *
	//MethodCall returns core::MethodCall:
	//	receptor=Expression "." methodName=EString
	//	("(" parameters+=Expression ("," parameters+=Expression)* ")")?
	//; 
	// * / / *
	// 
	// => indica precedencia
	//XMemberFeatureCall returns XExpression:
	//        XPrimaryExpression
	//        (=>({XAssignment.assignable=current} '.' feature=[types::JvmIdentifiableElement|ValidID] OpSingleAssign) value=XAssignment
	//        |=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|spreading?="*.")) 
	//                ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
	//                feature=[types::JvmIdentifiableElement|ValidID] (
	//                        =>explicitOperationCall?='(' 
	//                                (
	//                                    memberCallArguments+=XShortClosure
	//                                  |     memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	//                                )? 
	//                        ')')?
	//                )*;
	//
	//XPrimaryExpression returns XExpression:
	//        XConstructorCall |
	//        XBlockExpression |
	//        XSwitchExpression |
	//        XFeatureCall |
	//        XLiteral |
	//        XIfExpression |
	//        XForLoopExpression |
	//        XWhileExpression |
	//        XDoWhileExpression |
	//        XThrowExpression |
	//        XReturnExpression |
	//        XTryCatchFinallyExpression |
	//        XParenthesizedExpression;
	// * / NumLiteral returns core::NumLiteral:
	//	value=EInt;
	public ExpressionsGrammarAccess.NumLiteralElements getNumLiteralAccess() {
		return gaExpressions.getNumLiteralAccess();
	}
	
	public ParserRule getNumLiteralRule() {
		return getNumLiteralAccess().getRule();
	}

	//FloatLiteral returns core::DoubleLiteral:
	//	value=EDouble;
	public ExpressionsGrammarAccess.FloatLiteralElements getFloatLiteralAccess() {
		return gaExpressions.getFloatLiteralAccess();
	}
	
	public ParserRule getFloatLiteralRule() {
		return getFloatLiteralAccess().getRule();
	}

	//StringLiteral returns core::StringLiteral:
	//	value=STRING;
	public ExpressionsGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaExpressions.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//BooleanLiteral returns core::BooleanLiteral:
	//	value=EBoolean;
	public ExpressionsGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaExpressions.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//QualifiedName returns ecore::EString:
	//	EString ("." EString)*;
	public ExpressionsGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaExpressions.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaExpressions.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaExpressions.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaExpressions.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaExpressions.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaExpressions.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaExpressions.getANY_OTHERRule();
	} 
}
