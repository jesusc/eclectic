/*
* generated by Xtext
*/

package org.eclectic.frontend.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclectic.frontend.syntax.services.ExpressionsGrammarAccess;

@Singleton
public class TaoGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TaoTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TaoTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTaoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInModelsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInModelsTransformationDefinitionParameterParserRuleCall_3_0 = (RuleCall)cInModelsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInModelsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInModelsTransformationDefinitionParameterParserRuleCall_4_1_0 = (RuleCall)cInModelsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOutModelsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOutModelsTransformationDefinitionParameterParserRuleCall_8_0 = (RuleCall)cOutModelsAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cOutModelsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cOutModelsTransformationDefinitionParameterParserRuleCall_9_1_0 = (RuleCall)cOutModelsAssignment_9_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cUsesAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cUsesUsesStatementsParserRuleCall_11_0 = (RuleCall)cUsesAssignment_11.eContents().get(0);
		private final Assignment cTemplatesAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cTemplatesTemplateParserRuleCall_12_0 = (RuleCall)cTemplatesAssignment_12.eContents().get(0);
		
		////import "platform:/resource/modelum.eclectic.compiler/model/family/eclectic.frontend.ecore#//frontend" as frontend
		//TaoTransformation returns tao::TaoTransformation:
		//	"tao" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
		//	//'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//	"(" inModels+=TransformationDefinitionParameter ("," inModels+=TransformationDefinitionParameter)* ")" "->" "("
		//	outModels+=TransformationDefinitionParameter ("," outModels+=TransformationDefinitionParameter)* ")"
		//	uses+=UsesStatements* templates+=Template+;
		public ParserRule getRule() { return rule; }

		//"tao" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
		////'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//"(" inModels+=TransformationDefinitionParameter ("," inModels+=TransformationDefinitionParameter)* ")" "->" "("
		//outModels+=TransformationDefinitionParameter ("," outModels+=TransformationDefinitionParameter)* ")"
		//uses+=UsesStatements* templates+=Template+
		public Group getGroup() { return cGroup; }

		//"tao"
		public Keyword getTaoKeyword_0() { return cTaoKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//// '(' left=[core::TransformationDefinitionParameter|EString] ')'
		////'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//inModels+=TransformationDefinitionParameter
		public Assignment getInModelsAssignment_3() { return cInModelsAssignment_3; }

		//TransformationDefinitionParameter
		public RuleCall getInModelsTransformationDefinitionParameterParserRuleCall_3_0() { return cInModelsTransformationDefinitionParameterParserRuleCall_3_0; }

		//("," inModels+=TransformationDefinitionParameter)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//inModels+=TransformationDefinitionParameter
		public Assignment getInModelsAssignment_4_1() { return cInModelsAssignment_4_1; }

		//TransformationDefinitionParameter
		public RuleCall getInModelsTransformationDefinitionParameterParserRuleCall_4_1_0() { return cInModelsTransformationDefinitionParameterParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_6() { return cHyphenMinusGreaterThanSignKeyword_6; }

		//"("
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }

		//outModels+=TransformationDefinitionParameter
		public Assignment getOutModelsAssignment_8() { return cOutModelsAssignment_8; }

		//TransformationDefinitionParameter
		public RuleCall getOutModelsTransformationDefinitionParameterParserRuleCall_8_0() { return cOutModelsTransformationDefinitionParameterParserRuleCall_8_0; }

		//("," outModels+=TransformationDefinitionParameter)*
		public Group getGroup_9() { return cGroup_9; }

		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }

		//outModels+=TransformationDefinitionParameter
		public Assignment getOutModelsAssignment_9_1() { return cOutModelsAssignment_9_1; }

		//TransformationDefinitionParameter
		public RuleCall getOutModelsTransformationDefinitionParameterParserRuleCall_9_1_0() { return cOutModelsTransformationDefinitionParameterParserRuleCall_9_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }

		//uses+=UsesStatements*
		public Assignment getUsesAssignment_11() { return cUsesAssignment_11; }

		//UsesStatements
		public RuleCall getUsesUsesStatementsParserRuleCall_11_0() { return cUsesUsesStatementsParserRuleCall_11_0; }

		//templates+=Template+
		public Assignment getTemplatesAssignment_12() { return cTemplatesAssignment_12; }

		//Template
		public RuleCall getTemplatesTemplateParserRuleCall_12_0() { return cTemplatesTemplateParserRuleCall_12_0; }
	}

	public class UsesStatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UsesStatements");
		private final RuleCall cUseDeclarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// @common
		//UsesStatements returns core::UseDeclaration: // TODO: Allow several declarations together
		//	UseDeclaration;
		public ParserRule getRule() { return rule; }

		//// TODO: Allow several declarations together
		//UseDeclaration
		public RuleCall getUseDeclarationParserRuleCall() { return cUseDeclarationParserRuleCall; }
	}

	public class UseDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UseDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModuleEStringParserRuleCall_1_0 = (RuleCall)cModuleAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAsEStringParserRuleCall_2_1_0 = (RuleCall)cAsAssignment_2_1.eContents().get(0);
		
		//UseDeclaration returns core::UseDeclaration:
		//	"uses" module=EString ("as" ^as=EString)?;
		public ParserRule getRule() { return rule; }

		//"uses" module=EString ("as" ^as=EString)?
		public Group getGroup() { return cGroup; }

		//"uses"
		public Keyword getUsesKeyword_0() { return cUsesKeyword_0; }

		//module=EString
		public Assignment getModuleAssignment_1() { return cModuleAssignment_1; }

		//EString
		public RuleCall getModuleEStringParserRuleCall_1_0() { return cModuleEStringParserRuleCall_1_0; }

		//("as" ^as=EString)?
		public Group getGroup_2() { return cGroup_2; }

		//"as"
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//^as=EString
		public Assignment getAsAssignment_2_1() { return cAsAssignment_2_1; }

		//EString
		public RuleCall getAsEStringParserRuleCall_2_1_0() { return cAsEStringParserRuleCall_2_1_0; }
	}

	public class TransformationDefinitionParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransformationDefinitionParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransformationDefinitionParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TransformationDefinitionParameter returns core::TransformationDefinitionParameter:
		//	{core::TransformationDefinitionParameter} name=EString;
		public ParserRule getRule() { return rule; }

		//{core::TransformationDefinitionParameter} name=EString
		public Group getGroup() { return cGroup; }

		//{core::TransformationDefinitionParameter}
		public Action getTransformationDefinitionParameterAction_0() { return cTransformationDefinitionParameterAction_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class ClassUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cModelRepresentModelCrossReference_0_0 = (CrossReference)cModelAssignment_0.eContents().get(0);
		private final RuleCall cModelRepresentModelIDTerminalRuleCall_0_0_1 = (RuleCall)cModelRepresentModelCrossReference_0_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassNameIDTerminalRuleCall_2_0 = (RuleCall)cClassNameAssignment_2.eContents().get(0);
		
		//ClassUse returns core::ClassUse:
		//	model=[core::RepresentModel] "!" className=ID;
		public ParserRule getRule() { return rule; }

		//model=[core::RepresentModel] "!" className=ID
		public Group getGroup() { return cGroup; }

		//model=[core::RepresentModel]
		public Assignment getModelAssignment_0() { return cModelAssignment_0; }

		//[core::RepresentModel]
		public CrossReference getModelRepresentModelCrossReference_0_0() { return cModelRepresentModelCrossReference_0_0; }

		//ID
		public RuleCall getModelRepresentModelIDTerminalRuleCall_0_0_1() { return cModelRepresentModelIDTerminalRuleCall_0_0_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }

		//className=ID
		public Assignment getClassNameAssignment_2() { return cClassNameAssignment_2; }

		//ID
		public RuleCall getClassNameIDTerminalRuleCall_2_0() { return cClassNameIDTerminalRuleCall_2_0; }
	}

	public class TemplateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Template");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTemplateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersTemplateParameterParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParametersTemplateParameterParserRuleCall_4_1_0 = (RuleCall)cParametersAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRootsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRootsTemplateRootObjectParserRuleCall_6_0 = (RuleCall)cRootsAssignment_6.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//// Using Expressions as superlanguage makes that [a] does not work because of conflicts
		//// end-of-common
		//Template returns tao::Template:
		//	"template" name=ID "(" parameters+=TemplateParameter ("," parameters+=TemplateParameter)* ")"
		//	roots+=TemplateRootObject "end";
		public ParserRule getRule() { return rule; }

		//"template" name=ID "(" parameters+=TemplateParameter ("," parameters+=TemplateParameter)* ")" roots+=TemplateRootObject
		//"end"
		public Group getGroup() { return cGroup; }

		//"template"
		public Keyword getTemplateKeyword_0() { return cTemplateKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//parameters+=TemplateParameter
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }

		//TemplateParameter
		public RuleCall getParametersTemplateParameterParserRuleCall_3_0() { return cParametersTemplateParameterParserRuleCall_3_0; }

		//("," parameters+=TemplateParameter)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//parameters+=TemplateParameter
		public Assignment getParametersAssignment_4_1() { return cParametersAssignment_4_1; }

		//TemplateParameter
		public RuleCall getParametersTemplateParameterParserRuleCall_4_1_0() { return cParametersTemplateParameterParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//roots+=TemplateRootObject
		public Assignment getRootsAssignment_6() { return cRootsAssignment_6; }

		//TemplateRootObject
		public RuleCall getRootsTemplateRootObjectParserRuleCall_6_0() { return cRootsTemplateRootObjectParserRuleCall_6_0; }

		//"end"
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }
	}

	public class TemplateParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeClassUseParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//TemplateParameter returns tao::TemplateParameter:
		//	name=ID ":" type=ClassUse;
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=ClassUse
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=ClassUse
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//ClassUse
		public RuleCall getTypeClassUseParserRuleCall_2_0() { return cTypeClassUseParserRuleCall_2_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final RuleCall cDefineVariableParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// To avoid conflicts, because Statement is not actually used
		//Statement returns core::Statement:
		//	DefineVariable;
		public ParserRule getRule() { return rule; }

		//DefineVariable
		public RuleCall getDefineVariableParserRuleCall() { return cDefineVariableParserRuleCall; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cWithResolveMethodCallParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// redefine
		//Expression returns core::Expression:
		//	WithResolveMethodCall;
		public ParserRule getRule() { return rule; }

		//WithResolveMethodCall
		public RuleCall getWithResolveMethodCallParserRuleCall() { return cWithResolveMethodCallParserRuleCall; }
	}

	public class TemplateRootObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TemplateRootObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeClassUseParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAssigmentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAssigmentsAssignmentParserRuleCall_3_0 = (RuleCall)cAssigmentsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TemplateRootObject returns tao::TemplateRootObject:
		//	(name=ID ":")? // 	ObjectInstantiation
		//	//  Duplicated!
		//	type=ClassUse "{" assigments+=Assignment* "}";
		public ParserRule getRule() { return rule; }

		//(name=ID ":")? // 	ObjectInstantiation
		////  Duplicated!
		//type=ClassUse "{" assigments+=Assignment* "}"
		public Group getGroup() { return cGroup; }

		//(name=ID ":")?
		public Group getGroup_0() { return cGroup_0; }

		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//type=ClassUse
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ClassUse
		public RuleCall getTypeClassUseParserRuleCall_1_0() { return cTypeClassUseParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//assigments+=Assignment*
		public Assignment getAssigmentsAssignment_3() { return cAssigmentsAssignment_3; }

		//Assignment
		public RuleCall getAssigmentsAssignmentParserRuleCall_3_0() { return cAssigmentsAssignmentParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ObjectInstantiationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectInstantiation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeClassUseParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAssigmentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAssigmentsAssignmentParserRuleCall_3_0 = (RuleCall)cAssigmentsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ObjectInstantiation returns tao::ObjectInstantiation:
		//	(name=ID ":")? type=ClassUse "{" assigments+=Assignment* "}";
		public ParserRule getRule() { return rule; }

		//(name=ID ":")? type=ClassUse "{" assigments+=Assignment* "}"
		public Group getGroup() { return cGroup; }

		//(name=ID ":")?
		public Group getGroup_0() { return cGroup_0; }

		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//type=ClassUse
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ClassUse
		public RuleCall getTypeClassUseParserRuleCall_1_0() { return cTypeClassUseParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//assigments+=Assignment*
		public Assignment getAssigmentsAssignment_3() { return cAssigmentsAssignment_3; }

		//Assignment
		public RuleCall getAssigmentsAssignmentParserRuleCall_3_0() { return cAssigmentsAssignmentParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeAssigmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjectSyntaxParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInvocationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Assignment returns tao::Assignment:
		//	AttributeAssigment | ObjectSyntax | Invocation;
		public ParserRule getRule() { return rule; }

		//AttributeAssigment | ObjectSyntax | Invocation
		public Alternatives getAlternatives() { return cAlternatives; }

		//AttributeAssigment
		public RuleCall getAttributeAssigmentParserRuleCall_0() { return cAttributeAssigmentParserRuleCall_0; }

		//ObjectSyntax
		public RuleCall getObjectSyntaxParserRuleCall_1() { return cObjectSyntaxParserRuleCall_1; }

		//Invocation
		public RuleCall getInvocationParserRuleCall_2() { return cInvocationParserRuleCall_2; }
	}

	public class AttributeAssigmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeAssigment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetFeatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetFeatureIDTerminalRuleCall_0_0 = (RuleCall)cTargetFeatureAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprSourceExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//AttributeAssigment returns tao::AttributeAssigment:
		//	targetFeature=ID "=" expr=SourceExpression;
		public ParserRule getRule() { return rule; }

		//targetFeature=ID "=" expr=SourceExpression
		public Group getGroup() { return cGroup; }

		//targetFeature=ID
		public Assignment getTargetFeatureAssignment_0() { return cTargetFeatureAssignment_0; }

		//ID
		public RuleCall getTargetFeatureIDTerminalRuleCall_0_0() { return cTargetFeatureIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expr=SourceExpression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//SourceExpression
		public RuleCall getExprSourceExpressionParserRuleCall_2_0() { return cExprSourceExpressionParserRuleCall_2_0; }
	}

	public class SourceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SourceExpression");
		private final RuleCall cWithOptionalVariableExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////	| NormalExpression 
		//SourceExpression returns tao::SourceExpression:
		//	WithOptionalVariableExpression;
		public ParserRule getRule() { return rule; }

		//WithOptionalVariableExpression
		public RuleCall getWithOptionalVariableExpressionParserRuleCall() { return cWithOptionalVariableExpressionParserRuleCall; }
	}

	public class WithOptionalVariableExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WithOptionalVariableExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVariableObjectSourceVariableParserRuleCall_0_0_0 = (RuleCall)cVariableAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//WithOptionalVariableExpression returns tao::WithOptionalVariableExpression:
		//	(variable=ObjectSourceVariable ":")? expr= // receptor=[core::Variable] "." sourceFeature=ID
		//	Expression;
		public ParserRule getRule() { return rule; }

		//(variable=ObjectSourceVariable ":")? expr= // receptor=[core::Variable] "." sourceFeature=ID
		//Expression
		public Group getGroup() { return cGroup; }

		//(variable=ObjectSourceVariable ":")?
		public Group getGroup_0() { return cGroup_0; }

		//variable=ObjectSourceVariable
		public Assignment getVariableAssignment_0_0() { return cVariableAssignment_0_0; }

		//ObjectSourceVariable
		public RuleCall getVariableObjectSourceVariableParserRuleCall_0_0_0() { return cVariableObjectSourceVariableParserRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//expr= // receptor=[core::Variable] "." sourceFeature=ID
		//Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//// receptor=[core::Variable] "." sourceFeature=ID
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
	}

	public class ObjectSourceVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectSourceVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ObjectSourceVariable returns tao::ObjectSourceVariable:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ObjectSyntaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectSyntax");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetFeatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetFeatureIDTerminalRuleCall_0_0 = (RuleCall)cTargetFeatureAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFromKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExprAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExprSourceExpressionParserRuleCall_2_1_0 = (RuleCall)cExprAssignment_2_1.eContents().get(0);
		private final Assignment cMultivaluedAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final Keyword cMultivaluedAsteriskKeyword_2_2_0 = (Keyword)cMultivaluedAssignment_2_2.eContents().get(0);
		private final Keyword cToKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cObjectAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectObjectInstantiationParserRuleCall_3_0 = (RuleCall)cObjectAssignment_3.eContents().get(0);
		
		//ObjectSyntax returns tao::ObjectSyntax:
		//	targetFeature=ID "=" ("from" expr=SourceExpression multivalued?="*"? "to")? object=ObjectInstantiation;
		public ParserRule getRule() { return rule; }

		//targetFeature=ID "=" ("from" expr=SourceExpression multivalued?="*"? "to")? object=ObjectInstantiation
		public Group getGroup() { return cGroup; }

		//targetFeature=ID
		public Assignment getTargetFeatureAssignment_0() { return cTargetFeatureAssignment_0; }

		//ID
		public RuleCall getTargetFeatureIDTerminalRuleCall_0_0() { return cTargetFeatureIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//("from" expr=SourceExpression multivalued?="*"? "to")?
		public Group getGroup_2() { return cGroup_2; }

		//"from"
		public Keyword getFromKeyword_2_0() { return cFromKeyword_2_0; }

		//expr=SourceExpression
		public Assignment getExprAssignment_2_1() { return cExprAssignment_2_1; }

		//SourceExpression
		public RuleCall getExprSourceExpressionParserRuleCall_2_1_0() { return cExprSourceExpressionParserRuleCall_2_1_0; }

		//multivalued?="*"?
		public Assignment getMultivaluedAssignment_2_2() { return cMultivaluedAssignment_2_2; }

		//"*"
		public Keyword getMultivaluedAsteriskKeyword_2_2_0() { return cMultivaluedAsteriskKeyword_2_2_0; }

		//"to"
		public Keyword getToKeyword_2_3() { return cToKeyword_2_3; }

		//object=ObjectInstantiation
		public Assignment getObjectAssignment_3() { return cObjectAssignment_3; }

		//ObjectInstantiation
		public RuleCall getObjectObjectInstantiationParserRuleCall_3_0() { return cObjectObjectInstantiationParserRuleCall_3_0; }
	}

	public class InvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Invocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetFeatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetFeatureIDTerminalRuleCall_0_0 = (RuleCall)cTargetFeatureAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTemplateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTemplateTemplateCrossReference_2_0 = (CrossReference)cTemplateAssignment_2.eContents().get(0);
		private final RuleCall cTemplateTemplateIDTerminalRuleCall_2_0_1 = (RuleCall)cTemplateTemplateCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprSourceExpressionParserRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		private final Assignment cMultivaluedAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cMultivaluedAsteriskKeyword_5_0 = (Keyword)cMultivaluedAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Invocation returns tao::Invocation:
		//	targetFeature=ID "=" template=[tao::Template] "(" expr=SourceExpression multivalued?="*"? ")";
		public ParserRule getRule() { return rule; }

		//targetFeature=ID "=" template=[tao::Template] "(" expr=SourceExpression multivalued?="*"? ")"
		public Group getGroup() { return cGroup; }

		//targetFeature=ID
		public Assignment getTargetFeatureAssignment_0() { return cTargetFeatureAssignment_0; }

		//ID
		public RuleCall getTargetFeatureIDTerminalRuleCall_0_0() { return cTargetFeatureIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//template=[tao::Template]
		public Assignment getTemplateAssignment_2() { return cTemplateAssignment_2; }

		//[tao::Template]
		public CrossReference getTemplateTemplateCrossReference_2_0() { return cTemplateTemplateCrossReference_2_0; }

		//ID
		public RuleCall getTemplateTemplateIDTerminalRuleCall_2_0_1() { return cTemplateTemplateIDTerminalRuleCall_2_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//expr=SourceExpression
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }

		//SourceExpression
		public RuleCall getExprSourceExpressionParserRuleCall_4_0() { return cExprSourceExpressionParserRuleCall_4_0; }

		//multivalued?="*"?
		public Assignment getMultivaluedAssignment_5() { return cMultivaluedAssignment_5; }

		//"*"
		public Keyword getMultivaluedAsteriskKeyword_5_0() { return cMultivaluedAsteriskKeyword_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Not sure if this has be factorized somewhere...
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private TaoTransformationElements pTaoTransformation;
	private UsesStatementsElements pUsesStatements;
	private UseDeclarationElements pUseDeclaration;
	private TransformationDefinitionParameterElements pTransformationDefinitionParameter;
	private ClassUseElements pClassUse;
	private TemplateElements pTemplate;
	private TemplateParameterElements pTemplateParameter;
	private StatementElements pStatement;
	private ExpressionElements pExpression;
	private TemplateRootObjectElements pTemplateRootObject;
	private ObjectInstantiationElements pObjectInstantiation;
	private AssignmentElements pAssignment;
	private AttributeAssigmentElements pAttributeAssigment;
	private SourceExpressionElements pSourceExpression;
	private WithOptionalVariableExpressionElements pWithOptionalVariableExpression;
	private ObjectSourceVariableElements pObjectSourceVariable;
	private ObjectSyntaxElements pObjectSyntax;
	private InvocationElements pInvocation;
	private EStringElements pEString;
	private EIntElements pEInt;
	
	private final GrammarProvider grammarProvider;

	private ExpressionsGrammarAccess gaExpressions;

	@Inject
	public TaoGrammarAccess(GrammarProvider grammarProvider,
		ExpressionsGrammarAccess gaExpressions) {
		this.grammarProvider = grammarProvider;
		this.gaExpressions = gaExpressions;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public ExpressionsGrammarAccess getExpressionsGrammarAccess() {
		return gaExpressions;
	}

	
	////import "platform:/resource/modelum.eclectic.compiler/model/family/eclectic.frontend.ecore#//frontend" as frontend
	//TaoTransformation returns tao::TaoTransformation:
	//	"tao" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
	//	//'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
	//	"(" inModels+=TransformationDefinitionParameter ("," inModels+=TransformationDefinitionParameter)* ")" "->" "("
	//	outModels+=TransformationDefinitionParameter ("," outModels+=TransformationDefinitionParameter)* ")"
	//	uses+=UsesStatements* templates+=Template+;
	public TaoTransformationElements getTaoTransformationAccess() {
		return (pTaoTransformation != null) ? pTaoTransformation : (pTaoTransformation = new TaoTransformationElements());
	}
	
	public ParserRule getTaoTransformationRule() {
		return getTaoTransformationAccess().getRule();
	}

	//// @common
	//UsesStatements returns core::UseDeclaration: // TODO: Allow several declarations together
	//	UseDeclaration;
	public UsesStatementsElements getUsesStatementsAccess() {
		return (pUsesStatements != null) ? pUsesStatements : (pUsesStatements = new UsesStatementsElements());
	}
	
	public ParserRule getUsesStatementsRule() {
		return getUsesStatementsAccess().getRule();
	}

	//UseDeclaration returns core::UseDeclaration:
	//	"uses" module=EString ("as" ^as=EString)?;
	public UseDeclarationElements getUseDeclarationAccess() {
		return (pUseDeclaration != null) ? pUseDeclaration : (pUseDeclaration = new UseDeclarationElements());
	}
	
	public ParserRule getUseDeclarationRule() {
		return getUseDeclarationAccess().getRule();
	}

	//TransformationDefinitionParameter returns core::TransformationDefinitionParameter:
	//	{core::TransformationDefinitionParameter} name=EString;
	public TransformationDefinitionParameterElements getTransformationDefinitionParameterAccess() {
		return (pTransformationDefinitionParameter != null) ? pTransformationDefinitionParameter : (pTransformationDefinitionParameter = new TransformationDefinitionParameterElements());
	}
	
	public ParserRule getTransformationDefinitionParameterRule() {
		return getTransformationDefinitionParameterAccess().getRule();
	}

	//ClassUse returns core::ClassUse:
	//	model=[core::RepresentModel] "!" className=ID;
	public ClassUseElements getClassUseAccess() {
		return (pClassUse != null) ? pClassUse : (pClassUse = new ClassUseElements());
	}
	
	public ParserRule getClassUseRule() {
		return getClassUseAccess().getRule();
	}

	//// Using Expressions as superlanguage makes that [a] does not work because of conflicts
	//// end-of-common
	//Template returns tao::Template:
	//	"template" name=ID "(" parameters+=TemplateParameter ("," parameters+=TemplateParameter)* ")"
	//	roots+=TemplateRootObject "end";
	public TemplateElements getTemplateAccess() {
		return (pTemplate != null) ? pTemplate : (pTemplate = new TemplateElements());
	}
	
	public ParserRule getTemplateRule() {
		return getTemplateAccess().getRule();
	}

	//TemplateParameter returns tao::TemplateParameter:
	//	name=ID ":" type=ClassUse;
	public TemplateParameterElements getTemplateParameterAccess() {
		return (pTemplateParameter != null) ? pTemplateParameter : (pTemplateParameter = new TemplateParameterElements());
	}
	
	public ParserRule getTemplateParameterRule() {
		return getTemplateParameterAccess().getRule();
	}

	//// To avoid conflicts, because Statement is not actually used
	//Statement returns core::Statement:
	//	DefineVariable;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//// redefine
	//Expression returns core::Expression:
	//	WithResolveMethodCall;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//TemplateRootObject returns tao::TemplateRootObject:
	//	(name=ID ":")? // 	ObjectInstantiation
	//	//  Duplicated!
	//	type=ClassUse "{" assigments+=Assignment* "}";
	public TemplateRootObjectElements getTemplateRootObjectAccess() {
		return (pTemplateRootObject != null) ? pTemplateRootObject : (pTemplateRootObject = new TemplateRootObjectElements());
	}
	
	public ParserRule getTemplateRootObjectRule() {
		return getTemplateRootObjectAccess().getRule();
	}

	//ObjectInstantiation returns tao::ObjectInstantiation:
	//	(name=ID ":")? type=ClassUse "{" assigments+=Assignment* "}";
	public ObjectInstantiationElements getObjectInstantiationAccess() {
		return (pObjectInstantiation != null) ? pObjectInstantiation : (pObjectInstantiation = new ObjectInstantiationElements());
	}
	
	public ParserRule getObjectInstantiationRule() {
		return getObjectInstantiationAccess().getRule();
	}

	//Assignment returns tao::Assignment:
	//	AttributeAssigment | ObjectSyntax | Invocation;
	public AssignmentElements getAssignmentAccess() {
		return (pAssignment != null) ? pAssignment : (pAssignment = new AssignmentElements());
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}

	//AttributeAssigment returns tao::AttributeAssigment:
	//	targetFeature=ID "=" expr=SourceExpression;
	public AttributeAssigmentElements getAttributeAssigmentAccess() {
		return (pAttributeAssigment != null) ? pAttributeAssigment : (pAttributeAssigment = new AttributeAssigmentElements());
	}
	
	public ParserRule getAttributeAssigmentRule() {
		return getAttributeAssigmentAccess().getRule();
	}

	////	| NormalExpression 
	//SourceExpression returns tao::SourceExpression:
	//	WithOptionalVariableExpression;
	public SourceExpressionElements getSourceExpressionAccess() {
		return (pSourceExpression != null) ? pSourceExpression : (pSourceExpression = new SourceExpressionElements());
	}
	
	public ParserRule getSourceExpressionRule() {
		return getSourceExpressionAccess().getRule();
	}

	//WithOptionalVariableExpression returns tao::WithOptionalVariableExpression:
	//	(variable=ObjectSourceVariable ":")? expr= // receptor=[core::Variable] "." sourceFeature=ID
	//	Expression;
	public WithOptionalVariableExpressionElements getWithOptionalVariableExpressionAccess() {
		return (pWithOptionalVariableExpression != null) ? pWithOptionalVariableExpression : (pWithOptionalVariableExpression = new WithOptionalVariableExpressionElements());
	}
	
	public ParserRule getWithOptionalVariableExpressionRule() {
		return getWithOptionalVariableExpressionAccess().getRule();
	}

	//ObjectSourceVariable returns tao::ObjectSourceVariable:
	//	name=ID;
	public ObjectSourceVariableElements getObjectSourceVariableAccess() {
		return (pObjectSourceVariable != null) ? pObjectSourceVariable : (pObjectSourceVariable = new ObjectSourceVariableElements());
	}
	
	public ParserRule getObjectSourceVariableRule() {
		return getObjectSourceVariableAccess().getRule();
	}

	//ObjectSyntax returns tao::ObjectSyntax:
	//	targetFeature=ID "=" ("from" expr=SourceExpression multivalued?="*"? "to")? object=ObjectInstantiation;
	public ObjectSyntaxElements getObjectSyntaxAccess() {
		return (pObjectSyntax != null) ? pObjectSyntax : (pObjectSyntax = new ObjectSyntaxElements());
	}
	
	public ParserRule getObjectSyntaxRule() {
		return getObjectSyntaxAccess().getRule();
	}

	//Invocation returns tao::Invocation:
	//	targetFeature=ID "=" template=[tao::Template] "(" expr=SourceExpression multivalued?="*"? ")";
	public InvocationElements getInvocationAccess() {
		return (pInvocation != null) ? pInvocation : (pInvocation = new InvocationElements());
	}
	
	public ParserRule getInvocationRule() {
		return getInvocationAccess().getRule();
	}

	//// Not sure if this has be factorized somewhere...
	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//// Begin-of Core
	//TraceInterface returns core::TraceInterface:
	//	"trace" name=EString definitions+=TraceDefinition+ "end";
	public ExpressionsGrammarAccess.TraceInterfaceElements getTraceInterfaceAccess() {
		return gaExpressions.getTraceInterfaceAccess();
	}
	
	public ParserRule getTraceInterfaceRule() {
		return getTraceInterfaceAccess().getRule();
	}

	//TraceDefinition returns core::TraceDefinition:
	//	"link" name=EString ("{" elements+=TraceElementInline (";" elements+=TraceElementInline)* "}" |
	//	elements+=TraceElementExpanded elements+=TraceElementExpanded* "end");
	public ExpressionsGrammarAccess.TraceDefinitionElements getTraceDefinitionAccess() {
		return gaExpressions.getTraceDefinitionAccess();
	}
	
	public ParserRule getTraceDefinitionRule() {
		return getTraceDefinitionAccess().getRule();
	}

	//TraceElementInline returns core::TraceElement:
	//	name=EString ":" type=TypeExpression;
	public ExpressionsGrammarAccess.TraceElementInlineElements getTraceElementInlineAccess() {
		return gaExpressions.getTraceElementInlineAccess();
	}
	
	public ParserRule getTraceElementInlineRule() {
		return getTraceElementInlineAccess().getRule();
	}

	//TraceElementExpanded returns core::TraceElement:
	//	"var" name=EString ":" type=TypeExpression;
	public ExpressionsGrammarAccess.TraceElementExpandedElements getTraceElementExpandedAccess() {
		return gaExpressions.getTraceElementExpandedAccess();
	}
	
	public ParserRule getTraceElementExpandedRule() {
		return getTraceElementExpandedAccess().getRule();
	}

	//TypeExpression returns core::TypeExpression:
	//	ClassUse;
	public ExpressionsGrammarAccess.TypeExpressionElements getTypeExpressionAccess() {
		return gaExpressions.getTypeExpressionAccess();
	}
	
	public ParserRule getTypeExpressionRule() {
		return getTypeExpressionAccess().getRule();
	}

	//SingleAnnotation returns core::SingleAnnotation:
	//	PotencyAnnotation;
	public ExpressionsGrammarAccess.SingleAnnotationElements getSingleAnnotationAccess() {
		return gaExpressions.getSingleAnnotationAccess();
	}
	
	public ParserRule getSingleAnnotationRule() {
		return getSingleAnnotationAccess().getRule();
	}

	//PotencyAnnotation returns core::PotencyAnnotation:
	//	("@" | "^") value=INT;
	public ExpressionsGrammarAccess.PotencyAnnotationElements getPotencyAnnotationAccess() {
		return gaExpressions.getPotencyAnnotationAccess();
	}
	
	public ParserRule getPotencyAnnotationRule() {
		return getPotencyAnnotationAccess().getRule();
	}

	//PropertyWrite returns core::PropertyWrite:
	//	receptor=[core::Variable] "." property=ID "=" expression=Expression;
	public ExpressionsGrammarAccess.PropertyWriteElements getPropertyWriteAccess() {
		return gaExpressions.getPropertyWriteAccess();
	}
	
	public ParserRule getPropertyWriteRule() {
		return getPropertyWriteAccess().getRule();
	}

	//DefineVariable returns core::DefineVariable:
	//	name=EString "=" expression=Expression;
	public ExpressionsGrammarAccess.DefineVariableElements getDefineVariableAccess() {
		return gaExpressions.getDefineVariableAccess();
	}
	
	public ParserRule getDefineVariableRule() {
		return getDefineVariableAccess().getRule();
	}

	//// ClassUse How to reuse ClassUse?? 
	//ModelReference returns core::ModelReference:
	//	model=[core::RepresentModel] "!" className=EString;
	public ExpressionsGrammarAccess.ModelReferenceElements getModelReferenceAccess() {
		return gaExpressions.getModelReferenceAccess();
	}
	
	public ParserRule getModelReferenceRule() {
		return getModelReferenceAccess().getRule();
	}

	//// should be in another language?
	////| BinaryExpr
	//PrimaryExpression returns core::Expression:
	//	Literal | VariableReference | ModelReference | ParenthesizedExpression | MatchTraceExpression | ClosureDeclaration;
	public ExpressionsGrammarAccess.PrimaryExpressionElements getPrimaryExpressionAccess() {
		return gaExpressions.getPrimaryExpressionAccess();
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	////BinaryExpr returns core::BinaryExpr:
	////	left=Expression  binaryOp=BinaryOp right=Expression 
	////;
	//enum BinaryOp returns core::BinaryOp:
	//	ADD="+" | SUB="-" | MUL="*" | DIV="/";
	public ExpressionsGrammarAccess.BinaryOpElements getBinaryOpAccess() {
		return gaExpressions.getBinaryOpAccess();
	}
	
	public EnumRule getBinaryOpRule() {
		return getBinaryOpAccess().getRule();
	}

	//ParenthesizedExpression returns core::Expression:
	//	"(" Expression ")";
	public ExpressionsGrammarAccess.ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return gaExpressions.getParenthesizedExpressionAccess();
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//Literal returns core::Expression:
	//	FloatLiteral | NumLiteral | StringLiteral | BooleanLiteral;
	public ExpressionsGrammarAccess.LiteralElements getLiteralAccess() {
		return gaExpressions.getLiteralAccess();
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//VariableReference returns core::VariableReference:
	//	variable=[core::Variable];
	public ExpressionsGrammarAccess.VariableReferenceElements getVariableReferenceAccess() {
		return gaExpressions.getVariableReferenceAccess();
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	//ClosureDeclaration returns core::ClosureDeclaration:
	//	"{" ("|" formalParameters+=ClosureParameter ("," formalParameters+=ClosureParameter)* "|")? statements+=Statement+
	//	"}";
	public ExpressionsGrammarAccess.ClosureDeclarationElements getClosureDeclarationAccess() {
		return gaExpressions.getClosureDeclarationAccess();
	}
	
	public ParserRule getClosureDeclarationRule() {
		return getClosureDeclarationAccess().getRule();
	}

	//ClosureParameter returns core::ClosureParameter:
	//	name=ID;
	public ExpressionsGrammarAccess.ClosureParameterElements getClosureParameterAccess() {
		return gaExpressions.getClosureParameterAccess();
	}
	
	public ParserRule getClosureParameterRule() {
		return getClosureParameterAccess().getRule();
	}

	//MethodCall returns core::Expression:
	//	PrimaryExpression ({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression //|	( ({core::MethodCall.receptor = current}) "." methodName=EString )
	//	//|   (=> ({core::KeywordMethodCall.receptor = current}) "." (parameters+=KeywordParameter)+  )
	//	//|   (=> ({core::KeywordMethodCall.receptor = current}) (parameters+=KeywordParameter)+  )+	
	//	| (=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
	//	parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)+)?;
	public ExpressionsGrammarAccess.MethodCallElements getMethodCallAccess() {
		return gaExpressions.getMethodCallAccess();
	}
	
	public ParserRule getMethodCallRule() {
		return getMethodCallAccess().getRule();
	}

	//WithResolveMethodCall returns core::Expression:
	//	PrimaryExpression ({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression // to allow accessing attributes	
	//	| (({core::ResolveLink.expr=current} "[" (module=[core::UseDeclaration] isExternal?="!")? linkName=EString ("."
	//	featureName=EString)? "]") (=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="("
	//	parameters+=Expression ("," parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)?)+ | ((=>
	//	({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
	//	parameters+=Expression)* ")")? parameters+=ClosureDeclaration?) ({core::ResolveLink.expr=current} "["
	//	(module=[core::UseDeclaration] isExternal?="!")? linkName=EString ("." featureName=EString)? "]")?)+)? // ? ( ({attr::AttributeUse.expr = current}) "[" attribute=[attr::AttributeDcl] "]" )?
	//;
	public ExpressionsGrammarAccess.WithResolveMethodCallElements getWithResolveMethodCallAccess() {
		return gaExpressions.getWithResolveMethodCallAccess();
	}
	
	public ParserRule getWithResolveMethodCallRule() {
		return getWithResolveMethodCallAccess().getRule();
	}

	/// *
	//WithResolveMethodCall returns core::Expression:
	//	PrimaryExpression
	//	(
	//		( ({core::BinaryExpr.left = current}) binaryOp=BinaryOp right=Expression)		
	//		| ( ( ({core::ResolveLink.expr = current}) "[" linkName=EString "]" )
	//			(=> ({core::MethodCall.receptor = current}) "." methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")" )? (parameters+=ClosureDeclaration)?  )?
	//			)+
	//	    | ( (=> ({core::MethodCall.receptor = current}) "." methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")" )? (parameters+=ClosureDeclaration)?  )
	//			  (({core::ResolveLink.expr = current}) "[" linkName=EString "]")? )+
	//        // to allow accessing attributes	
	//	)? // ? ( ({attr::AttributeUse.expr = current}) "[" attribute=[attr::AttributeDcl] "]" )?
	//;
	// * / / *
	//class ResolveLink extends Expression {
	//   val Expression[1] expr;
	//   attr Boolean[1] isExternal = false;
	//   ref UseDeclaration[0..1] module;
	//
	//   attr String[1] linkName;
	//   attr String[0..1] featureName;
	//}
	// * / KeywordParameter returns core::KeywordParameter:
	//	keyword=KEYWORD_ID value=Expression;
	public ExpressionsGrammarAccess.KeywordParameterElements getKeywordParameterAccess() {
		return gaExpressions.getKeywordParameterAccess();
	}
	
	public ParserRule getKeywordParameterRule() {
		return getKeywordParameterAccess().getRule();
	}

	//terminal KEYWORD_ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")* ":";
	public TerminalRule getKEYWORD_IDRule() {
		return gaExpressions.getKEYWORD_IDRule();
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaExpressions.getIDRule();
	} 

	//MatchTraceExpression returns core::MatchTrace:
	//	"match" (ID "!")? trace=[core::TraceDefinition] "with" "[" traceExpr=TraceExprLanguage "]";
	public ExpressionsGrammarAccess.MatchTraceExpressionElements getMatchTraceExpressionAccess() {
		return gaExpressions.getMatchTraceExpressionAccess();
	}
	
	public ParserRule getMatchTraceExpressionRule() {
		return getMatchTraceExpressionAccess().getRule();
	}

	//// TODO: Resolve!! 
	//TraceExprLanguage returns core::TraceCompareExpression:
	//	traceVar=[core::TraceElement] "=" expr=Expression;
	public ExpressionsGrammarAccess.TraceExprLanguageElements getTraceExprLanguageAccess() {
		return gaExpressions.getTraceExprLanguageAccess();
	}
	
	public ParserRule getTraceExprLanguageRule() {
		return getTraceExprLanguageAccess().getRule();
	}

	//PutTraceExpression returns core::PutTrace:
	//	"put" (ID "!")? trace=[core::TraceDefinition] "with" "[" parameters+=PutTraceParameter (","
	//	parameters+=PutTraceParameter)+ "]";
	public ExpressionsGrammarAccess.PutTraceExpressionElements getPutTraceExpressionAccess() {
		return gaExpressions.getPutTraceExpressionAccess();
	}
	
	public ParserRule getPutTraceExpressionRule() {
		return getPutTraceExpressionAccess().getRule();
	}

	//PutTraceParameter returns core::PutTraceParameter:
	//	traceVar=[core::TraceElement] "=" value=Expression;
	public ExpressionsGrammarAccess.PutTraceParameterElements getPutTraceParameterAccess() {
		return gaExpressions.getPutTraceParameterAccess();
	}
	
	public ParserRule getPutTraceParameterRule() {
		return getPutTraceParameterAccess().getRule();
	}

	/// *
	//MethodCall returns core::MethodCall:
	//	receptor=Expression "." methodName=EString
	//	("(" parameters+=Expression ("," parameters+=Expression)* ")")?
	//; 
	// * / / *
	// 
	// => indica precedencia
	//XMemberFeatureCall returns XExpression:
	//        XPrimaryExpression
	//        (=>({XAssignment.assignable=current} '.' feature=[types::JvmIdentifiableElement|ValidID] OpSingleAssign) value=XAssignment
	//        |=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|spreading?="*.")) 
	//                ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
	//                feature=[types::JvmIdentifiableElement|ValidID] (
	//                        =>explicitOperationCall?='(' 
	//                                (
	//                                    memberCallArguments+=XShortClosure
	//                                  |     memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	//                                )? 
	//                        ')')?
	//                )*;
	//
	//XPrimaryExpression returns XExpression:
	//        XConstructorCall |
	//        XBlockExpression |
	//        XSwitchExpression |
	//        XFeatureCall |
	//        XLiteral |
	//        XIfExpression |
	//        XForLoopExpression |
	//        XWhileExpression |
	//        XDoWhileExpression |
	//        XThrowExpression |
	//        XReturnExpression |
	//        XTryCatchFinallyExpression |
	//        XParenthesizedExpression;
	// * / NumLiteral returns core::NumLiteral:
	//	value=EInt;
	public ExpressionsGrammarAccess.NumLiteralElements getNumLiteralAccess() {
		return gaExpressions.getNumLiteralAccess();
	}
	
	public ParserRule getNumLiteralRule() {
		return getNumLiteralAccess().getRule();
	}

	//FloatLiteral returns core::DoubleLiteral:
	//	value=EDouble;
	public ExpressionsGrammarAccess.FloatLiteralElements getFloatLiteralAccess() {
		return gaExpressions.getFloatLiteralAccess();
	}
	
	public ParserRule getFloatLiteralRule() {
		return getFloatLiteralAccess().getRule();
	}

	//EDouble returns ecore::EDouble:
	//	INT "." INT;
	public ExpressionsGrammarAccess.EDoubleElements getEDoubleAccess() {
		return gaExpressions.getEDoubleAccess();
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}

	//StringLiteral returns core::StringLiteral:
	//	value=STRING;
	public ExpressionsGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaExpressions.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//BooleanLiteral returns core::BooleanLiteral:
	//	value=EBoolean;
	public ExpressionsGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaExpressions.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public ExpressionsGrammarAccess.EBooleanElements getEBooleanAccess() {
		return gaExpressions.getEBooleanAccess();
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//QualifiedName returns ecore::EString:
	//	EString ("." EString)*;
	public ExpressionsGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaExpressions.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaExpressions.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaExpressions.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaExpressions.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaExpressions.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaExpressions.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaExpressions.getANY_OTHERRule();
	} 
}
