/*
* generated by Xtext
*/

package org.eclectic.frontend.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MappingsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MappingTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMappingsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInModelsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInModelsTransformationDefinitionParameterParserRuleCall_3_0 = (RuleCall)cInModelsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOutModelsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOutModelsTransformationDefinitionParameterParserRuleCall_7_0 = (RuleCall)cOutModelsAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cAnnotationsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_9_0 = (RuleCall)cAnnotationsAssignment_9.eContents().get(0);
		private final Assignment cUsesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cUsesUsesStatementsParserRuleCall_10_0 = (RuleCall)cUsesAssignment_10.eContents().get(0);
		private final Assignment cDelegatesAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cDelegatesDelegateParserRuleCall_11_0 = (RuleCall)cDelegatesAssignment_11.eContents().get(0);
		private final Assignment cContextsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cContextsContextParserRuleCall_12_0 = (RuleCall)cContextsAssignment_12.eContents().get(0);
		
		////import "platform:/resource/modelum.eclectic.compiler/model/family/eclectic.frontend.ecore#//frontend" as frontend
		//MappingTransformation returns mappings::MappingTransformation:
		//	"mappings" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
		//	//'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//	"(" inModels+=TransformationDefinitionParameter ")" "->" "(" outModels+=TransformationDefinitionParameter ")"
		//	annotations+=Annotation* uses+=UsesStatements* delegates+=Delegate* contexts+=Context+;
		public ParserRule getRule() { return rule; }

		//"mappings" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
		////'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//"(" inModels+=TransformationDefinitionParameter ")" "->" "(" outModels+=TransformationDefinitionParameter ")"
		//annotations+=Annotation* uses+=UsesStatements* delegates+=Delegate* contexts+=Context+
		public Group getGroup() { return cGroup; }

		//"mappings"
		public Keyword getMappingsKeyword_0() { return cMappingsKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//// '(' left=[core::TransformationDefinitionParameter|EString] ')'
		////'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//inModels+=TransformationDefinitionParameter
		public Assignment getInModelsAssignment_3() { return cInModelsAssignment_3; }

		//TransformationDefinitionParameter
		public RuleCall getInModelsTransformationDefinitionParameterParserRuleCall_3_0() { return cInModelsTransformationDefinitionParameterParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//outModels+=TransformationDefinitionParameter
		public Assignment getOutModelsAssignment_7() { return cOutModelsAssignment_7; }

		//TransformationDefinitionParameter
		public RuleCall getOutModelsTransformationDefinitionParameterParserRuleCall_7_0() { return cOutModelsTransformationDefinitionParameterParserRuleCall_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_9() { return cAnnotationsAssignment_9; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_9_0() { return cAnnotationsAnnotationParserRuleCall_9_0; }

		//uses+=UsesStatements*
		public Assignment getUsesAssignment_10() { return cUsesAssignment_10; }

		//UsesStatements
		public RuleCall getUsesUsesStatementsParserRuleCall_10_0() { return cUsesUsesStatementsParserRuleCall_10_0; }

		//delegates+=Delegate*
		public Assignment getDelegatesAssignment_11() { return cDelegatesAssignment_11; }

		//Delegate
		public RuleCall getDelegatesDelegateParserRuleCall_11_0() { return cDelegatesDelegateParserRuleCall_11_0; }

		//contexts+=Context+
		public Assignment getContextsAssignment_12() { return cContextsAssignment_12; }

		//Context
		public RuleCall getContextsContextParserRuleCall_12_0() { return cContextsContextParserRuleCall_12_0; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final RuleCall cMetamodelModelAnnotationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// @common
		//Annotation returns core::Annotation:
		//	MetamodelModelAnnotation;
		public ParserRule getRule() { return rule; }

		//MetamodelModelAnnotation
		public RuleCall getMetamodelModelAnnotationParserRuleCall() { return cMetamodelModelAnnotationParserRuleCall; }
	}

	public class MetamodelModelAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetamodelModelAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotatedElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAnnotatedElementRepresentModelCrossReference_0_0 = (CrossReference)cAnnotatedElementAssignment_0.eContents().get(0);
		private final RuleCall cAnnotatedElementRepresentModelIDTerminalRuleCall_0_0_1 = (RuleCall)cAnnotatedElementRepresentModelCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMetamodelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMetamodelSTRINGTerminalRuleCall_2_0 = (RuleCall)cMetamodelAssignment_2.eContents().get(0);
		
		//MetamodelModelAnnotation returns core::MetamodelModelAnnotation:
		//	annotatedElement=[core::RepresentModel] ":" metamodel=STRING;
		public ParserRule getRule() { return rule; }

		//annotatedElement=[core::RepresentModel] ":" metamodel=STRING
		public Group getGroup() { return cGroup; }

		//annotatedElement=[core::RepresentModel]
		public Assignment getAnnotatedElementAssignment_0() { return cAnnotatedElementAssignment_0; }

		//[core::RepresentModel]
		public CrossReference getAnnotatedElementRepresentModelCrossReference_0_0() { return cAnnotatedElementRepresentModelCrossReference_0_0; }

		//ID
		public RuleCall getAnnotatedElementRepresentModelIDTerminalRuleCall_0_0_1() { return cAnnotatedElementRepresentModelIDTerminalRuleCall_0_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//metamodel=STRING
		public Assignment getMetamodelAssignment_2() { return cMetamodelAssignment_2; }

		//STRING
		public RuleCall getMetamodelSTRINGTerminalRuleCall_2_0() { return cMetamodelSTRINGTerminalRuleCall_2_0; }
	}

	public class UsesStatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UsesStatements");
		private final RuleCall cUseDeclarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UsesStatements returns core::UseDeclaration: // TODO: Allow several declarations together
		//	UseDeclaration;
		public ParserRule getRule() { return rule; }

		//// TODO: Allow several declarations together
		//UseDeclaration
		public RuleCall getUseDeclarationParserRuleCall() { return cUseDeclarationParserRuleCall; }
	}

	public class UseDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UseDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModuleEStringParserRuleCall_1_0 = (RuleCall)cModuleAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAsEStringParserRuleCall_2_1_0 = (RuleCall)cAsAssignment_2_1.eContents().get(0);
		
		//UseDeclaration returns core::UseDeclaration:
		//	"uses" module=EString ("as" ^as=EString)?;
		public ParserRule getRule() { return rule; }

		//"uses" module=EString ("as" ^as=EString)?
		public Group getGroup() { return cGroup; }

		//"uses"
		public Keyword getUsesKeyword_0() { return cUsesKeyword_0; }

		//module=EString
		public Assignment getModuleAssignment_1() { return cModuleAssignment_1; }

		//EString
		public RuleCall getModuleEStringParserRuleCall_1_0() { return cModuleEStringParserRuleCall_1_0; }

		//("as" ^as=EString)?
		public Group getGroup_2() { return cGroup_2; }

		//"as"
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//^as=EString
		public Assignment getAsAssignment_2_1() { return cAsAssignment_2_1; }

		//EString
		public RuleCall getAsEStringParserRuleCall_2_1_0() { return cAsEStringParserRuleCall_2_1_0; }
	}

	public class TransformationDefinitionParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransformationDefinitionParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransformationDefinitionParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TransformationDefinitionParameter returns core::TransformationDefinitionParameter:
		//	{core::TransformationDefinitionParameter} name=EString;
		public ParserRule getRule() { return rule; }

		//{core::TransformationDefinitionParameter} name=EString
		public Group getGroup() { return cGroup; }

		//{core::TransformationDefinitionParameter}
		public Action getTransformationDefinitionParameterAction_0() { return cTransformationDefinitionParameterAction_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class DelegateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Delegate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsTagParserRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Keyword cDelegateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLeftAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLeftMatchedElementParserRuleCall_3_0 = (RuleCall)cLeftAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLeftAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLeftMatchedElementParserRuleCall_4_1_0 = (RuleCall)cLeftAssignment_4_1.eContents().get(0);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cModuleAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final CrossReference cModuleUseDeclarationCrossReference_6_0_0 = (CrossReference)cModuleAssignment_6_0.eContents().get(0);
		private final RuleCall cModuleUseDeclarationIDTerminalRuleCall_6_0_0_1 = (RuleCall)cModuleUseDeclarationCrossReference_6_0_0.eContents().get(1);
		private final Assignment cIsExternalAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final Keyword cIsExternalExclamationMarkKeyword_6_1_0 = (Keyword)cIsExternalAssignment_6_1.eContents().get(0);
		private final Assignment cLinkNameAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLinkNameEStringParserRuleCall_7_0 = (RuleCall)cLinkNameAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cFullStopKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cFeatureNameAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cFeatureNameEStringParserRuleCall_8_1_0 = (RuleCall)cFeatureNameAssignment_8_1.eContents().get(0);
		
		/// *
		//ClassUse returns core::ClassUse :
		//	model=[core::RepresentModel] "!" className=ID	
		//;
		// * / // Using Expressions as superlanguage makes that [a] does not work because of conflicts
		//// end-of-common
		//Delegate returns mappings::Delegate:
		//	tags+=Tag* "delegate" "from" left+=MatchedElement ("," left+=MatchedElement)* "to" (module=[core::UseDeclaration]
		//	isExternal?="!") linkName=EString ("." featureName=EString)?;
		public ParserRule getRule() { return rule; }

		//tags+=Tag* "delegate" "from" left+=MatchedElement ("," left+=MatchedElement)* "to" (module=[core::UseDeclaration]
		//isExternal?="!") linkName=EString ("." featureName=EString)?
		public Group getGroup() { return cGroup; }

		//tags+=Tag*
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }

		//Tag
		public RuleCall getTagsTagParserRuleCall_0_0() { return cTagsTagParserRuleCall_0_0; }

		//"delegate"
		public Keyword getDelegateKeyword_1() { return cDelegateKeyword_1; }

		//"from"
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }

		//left+=MatchedElement
		public Assignment getLeftAssignment_3() { return cLeftAssignment_3; }

		//MatchedElement
		public RuleCall getLeftMatchedElementParserRuleCall_3_0() { return cLeftMatchedElementParserRuleCall_3_0; }

		//("," left+=MatchedElement)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//left+=MatchedElement
		public Assignment getLeftAssignment_4_1() { return cLeftAssignment_4_1; }

		//MatchedElement
		public RuleCall getLeftMatchedElementParserRuleCall_4_1_0() { return cLeftMatchedElementParserRuleCall_4_1_0; }

		//"to"
		public Keyword getToKeyword_5() { return cToKeyword_5; }

		//module=[core::UseDeclaration] isExternal?="!"
		public Group getGroup_6() { return cGroup_6; }

		//module=[core::UseDeclaration]
		public Assignment getModuleAssignment_6_0() { return cModuleAssignment_6_0; }

		//[core::UseDeclaration]
		public CrossReference getModuleUseDeclarationCrossReference_6_0_0() { return cModuleUseDeclarationCrossReference_6_0_0; }

		//ID
		public RuleCall getModuleUseDeclarationIDTerminalRuleCall_6_0_0_1() { return cModuleUseDeclarationIDTerminalRuleCall_6_0_0_1; }

		//isExternal?="!"
		public Assignment getIsExternalAssignment_6_1() { return cIsExternalAssignment_6_1; }

		//"!"
		public Keyword getIsExternalExclamationMarkKeyword_6_1_0() { return cIsExternalExclamationMarkKeyword_6_1_0; }

		//linkName=EString
		public Assignment getLinkNameAssignment_7() { return cLinkNameAssignment_7; }

		//EString
		public RuleCall getLinkNameEStringParserRuleCall_7_0() { return cLinkNameEStringParserRuleCall_7_0; }

		//("." featureName=EString)?
		public Group getGroup_8() { return cGroup_8; }

		//"."
		public Keyword getFullStopKeyword_8_0() { return cFullStopKeyword_8_0; }

		//featureName=EString
		public Assignment getFeatureNameAssignment_8_1() { return cFeatureNameAssignment_8_1; }

		//EString
		public RuleCall getFeatureNameEStringParserRuleCall_8_1_0() { return cFeatureNameEStringParserRuleCall_8_1_0; }
	}

	public class ContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Context");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTagsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTagsTagParserRuleCall_0_0 = (RuleCall)cTagsAssignment_0.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLeftAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLeftMatchedElementParserRuleCall_2_0 = (RuleCall)cLeftAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLeftAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLeftMatchedElementParserRuleCall_3_1_0 = (RuleCall)cLeftAssignment_3_1.eContents().get(0);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRightAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRightMatchedElementParserRuleCall_5_0 = (RuleCall)cRightAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cRightAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cRightMatchedElementParserRuleCall_6_1_0 = (RuleCall)cRightAssignment_6_1.eContents().get(0);
		private final Assignment cModifiersAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cModifiersC2CModifierParserRuleCall_7_0 = (RuleCall)cModifiersAssignment_7.eContents().get(0);
		private final Assignment cMappingsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final Alternatives cMappingsAlternatives_8_0 = (Alternatives)cMappingsAssignment_8.eContents().get(0);
		private final RuleCall cMappingsAttributeMappingParserRuleCall_8_0_0 = (RuleCall)cMappingsAlternatives_8_0.eContents().get(0);
		private final RuleCall cMappingsReference2ReferenceParserRuleCall_8_0_1 = (RuleCall)cMappingsAlternatives_8_0.eContents().get(1);
		private final Keyword cEndKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Context returns mappings::Context:
		//	tags+=Tag* "from" left+=MatchedElement ("," left+=MatchedElement)* "to" right+=MatchedElement (","
		//	right+=MatchedElement)* modifiers+=C2CModifier* // (mappings += (Attribute2Attribute | AttributeIsString | Reference2Reference) )*
		//	mappings+=(AttributeMapping | Reference2Reference)* "end";
		public ParserRule getRule() { return rule; }

		//tags+=Tag* "from" left+=MatchedElement ("," left+=MatchedElement)* "to" right+=MatchedElement (","
		//right+=MatchedElement)* modifiers+=C2CModifier* // (mappings += (Attribute2Attribute | AttributeIsString | Reference2Reference) )*
		//mappings+=(AttributeMapping | Reference2Reference)* "end"
		public Group getGroup() { return cGroup; }

		//tags+=Tag*
		public Assignment getTagsAssignment_0() { return cTagsAssignment_0; }

		//Tag
		public RuleCall getTagsTagParserRuleCall_0_0() { return cTagsTagParserRuleCall_0_0; }

		//"from"
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }

		//left+=MatchedElement
		public Assignment getLeftAssignment_2() { return cLeftAssignment_2; }

		//MatchedElement
		public RuleCall getLeftMatchedElementParserRuleCall_2_0() { return cLeftMatchedElementParserRuleCall_2_0; }

		//("," left+=MatchedElement)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//left+=MatchedElement
		public Assignment getLeftAssignment_3_1() { return cLeftAssignment_3_1; }

		//MatchedElement
		public RuleCall getLeftMatchedElementParserRuleCall_3_1_0() { return cLeftMatchedElementParserRuleCall_3_1_0; }

		//"to"
		public Keyword getToKeyword_4() { return cToKeyword_4; }

		//right+=MatchedElement
		public Assignment getRightAssignment_5() { return cRightAssignment_5; }

		//MatchedElement
		public RuleCall getRightMatchedElementParserRuleCall_5_0() { return cRightMatchedElementParserRuleCall_5_0; }

		//("," right+=MatchedElement)*
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//right+=MatchedElement
		public Assignment getRightAssignment_6_1() { return cRightAssignment_6_1; }

		//MatchedElement
		public RuleCall getRightMatchedElementParserRuleCall_6_1_0() { return cRightMatchedElementParserRuleCall_6_1_0; }

		//modifiers+=C2CModifier*
		public Assignment getModifiersAssignment_7() { return cModifiersAssignment_7; }

		//C2CModifier
		public RuleCall getModifiersC2CModifierParserRuleCall_7_0() { return cModifiersC2CModifierParserRuleCall_7_0; }

		//mappings+=(AttributeMapping | Reference2Reference)*
		public Assignment getMappingsAssignment_8() { return cMappingsAssignment_8; }

		//AttributeMapping | Reference2Reference
		public Alternatives getMappingsAlternatives_8_0() { return cMappingsAlternatives_8_0; }

		//AttributeMapping
		public RuleCall getMappingsAttributeMappingParserRuleCall_8_0_0() { return cMappingsAttributeMappingParserRuleCall_8_0_0; }

		//Reference2Reference
		public RuleCall getMappingsReference2ReferenceParserRuleCall_8_0_1() { return cMappingsReference2ReferenceParserRuleCall_8_0_1; }

		//"end"
		public Keyword getEndKeyword_9() { return cEndKeyword_9; }
	}

	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Tag returns mappings::Tag:
		//	"[" name=EString "]";
		public ParserRule getRule() { return rule; }

		//"[" name=EString "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class MatchedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MatchedElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cModelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cModelRepresentModelCrossReference_1_0 = (CrossReference)cModelAssignment_1.eContents().get(0);
		private final RuleCall cModelRepresentModelIDTerminalRuleCall_1_0_1 = (RuleCall)cModelRepresentModelCrossReference_1_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cClassNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cClassNameIDTerminalRuleCall_3_0 = (RuleCall)cClassNameAssignment_3.eContents().get(0);
		private final Assignment cAnnotationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnnotationsSingleAnnotationParserRuleCall_4_0 = (RuleCall)cAnnotationsAssignment_4.eContents().get(0);
		private final Assignment cStrictTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cStrictTypeExclamationMarkKeyword_5_0 = (Keyword)cStrictTypeAssignment_5.eContents().get(0);
		
		//MatchedElement returns mappings::MatchedElement:
		//	(name=ID ":")? model=[core::RepresentModel] "!" className=ID annotations+=SingleAnnotation? strictType?="!"?;
		public ParserRule getRule() { return rule; }

		//(name=ID ":")? model=[core::RepresentModel] "!" className=ID annotations+=SingleAnnotation? strictType?="!"?
		public Group getGroup() { return cGroup; }

		//(name=ID ":")?
		public Group getGroup_0() { return cGroup_0; }

		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//model=[core::RepresentModel]
		public Assignment getModelAssignment_1() { return cModelAssignment_1; }

		//[core::RepresentModel]
		public CrossReference getModelRepresentModelCrossReference_1_0() { return cModelRepresentModelCrossReference_1_0; }

		//ID
		public RuleCall getModelRepresentModelIDTerminalRuleCall_1_0_1() { return cModelRepresentModelIDTerminalRuleCall_1_0_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }

		//className=ID
		public Assignment getClassNameAssignment_3() { return cClassNameAssignment_3; }

		//ID
		public RuleCall getClassNameIDTerminalRuleCall_3_0() { return cClassNameIDTerminalRuleCall_3_0; }

		//annotations+=SingleAnnotation?
		public Assignment getAnnotationsAssignment_4() { return cAnnotationsAssignment_4; }

		//SingleAnnotation
		public RuleCall getAnnotationsSingleAnnotationParserRuleCall_4_0() { return cAnnotationsSingleAnnotationParserRuleCall_4_0; }

		//strictType?="!"?
		public Assignment getStrictTypeAssignment_5() { return cStrictTypeAssignment_5; }

		//"!"
		public Keyword getStrictTypeExclamationMarkKeyword_5_0() { return cStrictTypeExclamationMarkKeyword_5_0; }
	}

	public class SingleAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleAnnotation");
		private final RuleCall cPotencyAnnotationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SingleAnnotation returns core::SingleAnnotation:
		//	PotencyAnnotation;
		public ParserRule getRule() { return rule; }

		//PotencyAnnotation
		public RuleCall getPotencyAnnotationParserRuleCall() { return cPotencyAnnotationParserRuleCall; }
	}

	public class PotencyAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PotencyAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//// copied from expressions
		//PotencyAnnotation returns core::PotencyAnnotation:
		//	("@" | "^") value=INT;
		public ParserRule getRule() { return rule; }

		//("@" | "^") value=INT
		public Group getGroup() { return cGroup; }

		//"@" | "^"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"@"
		public Keyword getCommercialAtKeyword_0_0() { return cCommercialAtKeyword_0_0; }

		//"^"
		public Keyword getCircumflexAccentKeyword_0_1() { return cCircumflexAccentKeyword_0_1; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}

	public class C2CModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "C2CModifier");
		private final RuleCall cLinkedByParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//C2CModifier returns mappings::C2CModifier:
		//	LinkedBy;
		public ParserRule getRule() { return rule; }

		//LinkedBy
		public RuleCall getLinkedByParserRuleCall() { return cLinkedByParserRuleCall; }
	}

	public class LinkedByElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LinkedBy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeAttributeRefParserRuleCall_1_0 = (RuleCall)cAttributeAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLinkedElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cLinkedElementMatchedElementCrossReference_3_0 = (CrossReference)cLinkedElementAssignment_3.eContents().get(0);
		private final RuleCall cLinkedElementMatchedElementIDTerminalRuleCall_3_0_1 = (RuleCall)cLinkedElementMatchedElementCrossReference_3_0.eContents().get(1);
		
		//// linking cd.originalCompilationUnit = cu
		//LinkedBy returns mappings::LinkedBy:
		//	"linking" attribute=AttributeRef "=" linkedElement=[mappings::MatchedElement];
		public ParserRule getRule() { return rule; }

		//"linking" attribute=AttributeRef "=" linkedElement=[mappings::MatchedElement]
		public Group getGroup() { return cGroup; }

		//"linking"
		public Keyword getLinkingKeyword_0() { return cLinkingKeyword_0; }

		//attribute=AttributeRef
		public Assignment getAttributeAssignment_1() { return cAttributeAssignment_1; }

		//AttributeRef
		public RuleCall getAttributeAttributeRefParserRuleCall_1_0() { return cAttributeAttributeRefParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//linkedElement=[mappings::MatchedElement]
		public Assignment getLinkedElementAssignment_3() { return cLinkedElementAssignment_3; }

		//[mappings::MatchedElement]
		public CrossReference getLinkedElementMatchedElementCrossReference_3_0() { return cLinkedElementMatchedElementCrossReference_3_0; }

		//ID
		public RuleCall getLinkedElementMatchedElementIDTerminalRuleCall_3_0_1() { return cLinkedElementMatchedElementIDTerminalRuleCall_3_0_1; }
	}

	public class AttributeMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftAttributeRefParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLeftAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLeftAttributeRefParserRuleCall_1_1_0 = (RuleCall)cLeftAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightPartAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightPartAttributeRightPartParserRuleCall_3_0 = (RuleCall)cRightPartAssignment_3.eContents().get(0);
		
		/// *
		//Attribute2Attribute returns mappings::Attribute2Attribute :
		//   left+=AttributeRef ( "," left+=AttributeRef)*  '=' right+=AttributeRef ( "," right+=AttributeRef)*
		//   (converter=Converter)?	
		//;	
		//
		//AttributeIsString returns mappings::AttributeIsString :
		//   left+=AttributeRef '=' strValue=EString
		//;
		// * / AttributeMapping returns mappings::AttributeMapping:
		//	left+=AttributeRef ("," left+=AttributeRef)* "=" rightPart=AttributeRightPart;
		public ParserRule getRule() { return rule; }

		//left+=AttributeRef ("," left+=AttributeRef)* "=" rightPart=AttributeRightPart
		public Group getGroup() { return cGroup; }

		//left+=AttributeRef
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//AttributeRef
		public RuleCall getLeftAttributeRefParserRuleCall_0_0() { return cLeftAttributeRefParserRuleCall_0_0; }

		//("," left+=AttributeRef)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//left+=AttributeRef
		public Assignment getLeftAssignment_1_1() { return cLeftAssignment_1_1; }

		//AttributeRef
		public RuleCall getLeftAttributeRefParserRuleCall_1_1_0() { return cLeftAttributeRefParserRuleCall_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//rightPart=AttributeRightPart
		public Assignment getRightPartAssignment_3() { return cRightPartAssignment_3; }

		//AttributeRightPart
		public RuleCall getRightPartAttributeRightPartParserRuleCall_3_0() { return cRightPartAttributeRightPartParserRuleCall_3_0; }
	}

	public class AttributeRightPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeRightPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeIsStringParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeIsBooleanParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAttributeIsDoubleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAttributeIsIntegerParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAttribute2AttributeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//AttributeRightPart returns mappings::AttributeRightPart:
		//	AttributeIsString | AttributeIsBoolean | AttributeIsDouble | AttributeIsInteger | Attribute2Attribute;
		public ParserRule getRule() { return rule; }

		//AttributeIsString | AttributeIsBoolean | AttributeIsDouble | AttributeIsInteger | Attribute2Attribute
		public Alternatives getAlternatives() { return cAlternatives; }

		//AttributeIsString
		public RuleCall getAttributeIsStringParserRuleCall_0() { return cAttributeIsStringParserRuleCall_0; }

		//AttributeIsBoolean
		public RuleCall getAttributeIsBooleanParserRuleCall_1() { return cAttributeIsBooleanParserRuleCall_1; }

		//AttributeIsDouble
		public RuleCall getAttributeIsDoubleParserRuleCall_2() { return cAttributeIsDoubleParserRuleCall_2; }

		//AttributeIsInteger
		public RuleCall getAttributeIsIntegerParserRuleCall_3() { return cAttributeIsIntegerParserRuleCall_3; }

		//Attribute2Attribute
		public RuleCall getAttribute2AttributeParserRuleCall_4() { return cAttribute2AttributeParserRuleCall_4; }
	}

	public class Attribute2AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute2Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRightAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRightAttributeRefParserRuleCall_0_0 = (RuleCall)cRightAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAttributeRefParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		private final Assignment cConverterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConverterConverterParserRuleCall_2_0 = (RuleCall)cConverterAssignment_2.eContents().get(0);
		
		//Attribute2Attribute returns mappings::Attribute2Attribute:
		//	right+=AttributeRef ("," right+=AttributeRef)* converter=Converter?;
		public ParserRule getRule() { return rule; }

		//right+=AttributeRef ("," right+=AttributeRef)* converter=Converter?
		public Group getGroup() { return cGroup; }

		//right+=AttributeRef
		public Assignment getRightAssignment_0() { return cRightAssignment_0; }

		//AttributeRef
		public RuleCall getRightAttributeRefParserRuleCall_0_0() { return cRightAttributeRefParserRuleCall_0_0; }

		//("," right+=AttributeRef)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//right+=AttributeRef
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//AttributeRef
		public RuleCall getRightAttributeRefParserRuleCall_1_1_0() { return cRightAttributeRefParserRuleCall_1_1_0; }

		//converter=Converter?
		public Assignment getConverterAssignment_2() { return cConverterAssignment_2; }

		//Converter
		public RuleCall getConverterConverterParserRuleCall_2_0() { return cConverterConverterParserRuleCall_2_0; }
	}

	public class AttributeIsStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeIsString");
		private final Assignment cStrValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStrValueStrictStringParserRuleCall_0 = (RuleCall)cStrValueAssignment.eContents().get(0);
		
		//AttributeIsString returns mappings::AttributeIsString:
		//	strValue=StrictString;
		public ParserRule getRule() { return rule; }

		//strValue=StrictString
		public Assignment getStrValueAssignment() { return cStrValueAssignment; }

		//StrictString
		public RuleCall getStrValueStrictStringParserRuleCall_0() { return cStrValueStrictStringParserRuleCall_0; }
	}

	public class AttributeIsBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeIsBoolean");
		private final Assignment cBoolValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBoolValueEBooleanParserRuleCall_0 = (RuleCall)cBoolValueAssignment.eContents().get(0);
		
		//AttributeIsBoolean returns mappings::AttributeIsBoolean:
		//	boolValue=EBoolean;
		public ParserRule getRule() { return rule; }

		//boolValue=EBoolean
		public Assignment getBoolValueAssignment() { return cBoolValueAssignment; }

		//EBoolean
		public RuleCall getBoolValueEBooleanParserRuleCall_0() { return cBoolValueEBooleanParserRuleCall_0; }
	}

	public class AttributeIsDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeIsDouble");
		private final Assignment cDoubleValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDoubleValueEDoubleParserRuleCall_0 = (RuleCall)cDoubleValueAssignment.eContents().get(0);
		
		//AttributeIsDouble returns mappings::AttributeIsDouble:
		//	doubleValue=EDouble;
		public ParserRule getRule() { return rule; }

		//doubleValue=EDouble
		public Assignment getDoubleValueAssignment() { return cDoubleValueAssignment; }

		//EDouble
		public RuleCall getDoubleValueEDoubleParserRuleCall_0() { return cDoubleValueEDoubleParserRuleCall_0; }
	}

	public class AttributeIsIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeIsInteger");
		private final Assignment cIntValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIntValueEIntParserRuleCall_0 = (RuleCall)cIntValueAssignment.eContents().get(0);
		
		//AttributeIsInteger returns mappings::AttributeIsInteger:
		//	intValue=EInt;
		public ParserRule getRule() { return rule; }

		//intValue=EInt
		public Assignment getIntValueAssignment() { return cIntValueAssignment; }

		//EInt
		public RuleCall getIntValueEIntParserRuleCall_0() { return cIntValueEIntParserRuleCall_0; }
	}

	public class AttributeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cReferredElementAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cReferredElementMatchedElementCrossReference_0_0_0 = (CrossReference)cReferredElementAssignment_0_0.eContents().get(0);
		private final RuleCall cReferredElementMatchedElementIDTerminalRuleCall_0_0_0_1 = (RuleCall)cReferredElementMatchedElementCrossReference_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFeatureNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatureNameEStringParserRuleCall_1_0 = (RuleCall)cFeatureNameAssignment_1.eContents().get(0);
		private final Assignment cMultivaluedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cMultivaluedAsteriskKeyword_2_0 = (Keyword)cMultivaluedAssignment_2.eContents().get(0);
		
		//AttributeRef returns mappings::AttributeRef:
		//	(referredElement=[mappings::MatchedElement] ".")? featureName=EString multivalued?="*"?;
		public ParserRule getRule() { return rule; }

		//(referredElement=[mappings::MatchedElement] ".")? featureName=EString multivalued?="*"?
		public Group getGroup() { return cGroup; }

		//(referredElement=[mappings::MatchedElement] ".")?
		public Group getGroup_0() { return cGroup_0; }

		//referredElement=[mappings::MatchedElement]
		public Assignment getReferredElementAssignment_0_0() { return cReferredElementAssignment_0_0; }

		//[mappings::MatchedElement]
		public CrossReference getReferredElementMatchedElementCrossReference_0_0_0() { return cReferredElementMatchedElementCrossReference_0_0_0; }

		//ID
		public RuleCall getReferredElementMatchedElementIDTerminalRuleCall_0_0_0_1() { return cReferredElementMatchedElementIDTerminalRuleCall_0_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//featureName=EString
		public Assignment getFeatureNameAssignment_1() { return cFeatureNameAssignment_1; }

		//EString
		public RuleCall getFeatureNameEStringParserRuleCall_1_0() { return cFeatureNameEStringParserRuleCall_1_0; }

		//multivalued?="*"?
		public Assignment getMultivaluedAssignment_2() { return cMultivaluedAssignment_2; }

		//"*"
		public Keyword getMultivaluedAsteriskKeyword_2_0() { return cMultivaluedAsteriskKeyword_2_0; }
	}

	public class Reference2ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference2Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftReferenceRefParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLeftAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLeftReferenceRefParserRuleCall_1_1_0 = (RuleCall)cLeftAssignment_1_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightReferenceRefParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRightAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRightReferenceRefParserRuleCall_4_1_0 = (RuleCall)cRightAssignment_4_1.eContents().get(0);
		private final Assignment cConverterAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConverterConverterParserRuleCall_5_0 = (RuleCall)cConverterAssignment_5.eContents().get(0);
		
		//Reference2Reference returns mappings::Reference2Reference:
		//	left+=ReferenceRef ("," left+=ReferenceRef)* "<-" right+=ReferenceRef ("," right+=ReferenceRef)* converter=Converter?;
		public ParserRule getRule() { return rule; }

		//left+=ReferenceRef ("," left+=ReferenceRef)* "<-" right+=ReferenceRef ("," right+=ReferenceRef)* converter=Converter?
		public Group getGroup() { return cGroup; }

		//left+=ReferenceRef
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }

		//ReferenceRef
		public RuleCall getLeftReferenceRefParserRuleCall_0_0() { return cLeftReferenceRefParserRuleCall_0_0; }

		//("," left+=ReferenceRef)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//left+=ReferenceRef
		public Assignment getLeftAssignment_1_1() { return cLeftAssignment_1_1; }

		//ReferenceRef
		public RuleCall getLeftReferenceRefParserRuleCall_1_1_0() { return cLeftReferenceRefParserRuleCall_1_1_0; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_2() { return cLessThanSignHyphenMinusKeyword_2; }

		//right+=ReferenceRef
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }

		//ReferenceRef
		public RuleCall getRightReferenceRefParserRuleCall_3_0() { return cRightReferenceRefParserRuleCall_3_0; }

		//("," right+=ReferenceRef)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//right+=ReferenceRef
		public Assignment getRightAssignment_4_1() { return cRightAssignment_4_1; }

		//ReferenceRef
		public RuleCall getRightReferenceRefParserRuleCall_4_1_0() { return cRightReferenceRefParserRuleCall_4_1_0; }

		//converter=Converter?
		public Assignment getConverterAssignment_5() { return cConverterAssignment_5; }

		//Converter
		public RuleCall getConverterConverterParserRuleCall_5_0() { return cConverterConverterParserRuleCall_5_0; }
	}

	public class ReferenceRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cReferredElementAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cReferredElementMatchedElementCrossReference_0_0_0 = (CrossReference)cReferredElementAssignment_0_0.eContents().get(0);
		private final RuleCall cReferredElementMatchedElementIDTerminalRuleCall_0_0_0_1 = (RuleCall)cReferredElementMatchedElementCrossReference_0_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cFeatureNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatureNameEStringParserRuleCall_1_0 = (RuleCall)cFeatureNameAssignment_1.eContents().get(0);
		private final Assignment cMultivaluedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cMultivaluedAsteriskKeyword_2_0 = (Keyword)cMultivaluedAssignment_2.eContents().get(0);
		
		//ReferenceRef returns mappings::ReferenceRef:
		//	(referredElement=[mappings::MatchedElement] ".")? featureName=EString multivalued?="*"?;
		public ParserRule getRule() { return rule; }

		//(referredElement=[mappings::MatchedElement] ".")? featureName=EString multivalued?="*"?
		public Group getGroup() { return cGroup; }

		//(referredElement=[mappings::MatchedElement] ".")?
		public Group getGroup_0() { return cGroup_0; }

		//referredElement=[mappings::MatchedElement]
		public Assignment getReferredElementAssignment_0_0() { return cReferredElementAssignment_0_0; }

		//[mappings::MatchedElement]
		public CrossReference getReferredElementMatchedElementCrossReference_0_0_0() { return cReferredElementMatchedElementCrossReference_0_0_0; }

		//ID
		public RuleCall getReferredElementMatchedElementIDTerminalRuleCall_0_0_0_1() { return cReferredElementMatchedElementIDTerminalRuleCall_0_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//featureName=EString
		public Assignment getFeatureNameAssignment_1() { return cFeatureNameAssignment_1; }

		//EString
		public RuleCall getFeatureNameEStringParserRuleCall_1_0() { return cFeatureNameEStringParserRuleCall_1_0; }

		//multivalued?="*"?
		public Assignment getMultivaluedAssignment_2() { return cMultivaluedAssignment_2; }

		//"*"
		public Keyword getMultivaluedAsteriskKeyword_2_0() { return cMultivaluedAsteriskKeyword_2_0; }
	}

	public class ConverterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Converter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConvertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cModuleAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cModuleUseDeclarationCrossReference_1_0_0 = (CrossReference)cModuleAssignment_1_0.eContents().get(0);
		private final RuleCall cModuleUseDeclarationIDTerminalRuleCall_1_0_0_1 = (RuleCall)cModuleUseDeclarationCrossReference_1_0_0.eContents().get(1);
		private final Assignment cIsExternalAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cIsExternalFullStopKeyword_1_1_0 = (Keyword)cIsExternalAssignment_1_1.eContents().get(0);
		private final Assignment cConverterNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConverterNameEStringParserRuleCall_2_0 = (RuleCall)cConverterNameAssignment_2.eContents().get(0);
		
		//Converter returns mappings::Converter:
		//	"convert" (module=[core::UseDeclaration] isExternal?=".")? converterName=EString;
		public ParserRule getRule() { return rule; }

		//"convert" (module=[core::UseDeclaration] isExternal?=".")? converterName=EString
		public Group getGroup() { return cGroup; }

		//"convert"
		public Keyword getConvertKeyword_0() { return cConvertKeyword_0; }

		//(module=[core::UseDeclaration] isExternal?=".")?
		public Group getGroup_1() { return cGroup_1; }

		//module=[core::UseDeclaration]
		public Assignment getModuleAssignment_1_0() { return cModuleAssignment_1_0; }

		//[core::UseDeclaration]
		public CrossReference getModuleUseDeclarationCrossReference_1_0_0() { return cModuleUseDeclarationCrossReference_1_0_0; }

		//ID
		public RuleCall getModuleUseDeclarationIDTerminalRuleCall_1_0_0_1() { return cModuleUseDeclarationIDTerminalRuleCall_1_0_0_1; }

		//isExternal?="."
		public Assignment getIsExternalAssignment_1_1() { return cIsExternalAssignment_1_1; }

		//"."
		public Keyword getIsExternalFullStopKeyword_1_1_0() { return cIsExternalFullStopKeyword_1_1_0; }

		//converterName=EString
		public Assignment getConverterNameAssignment_2() { return cConverterNameAssignment_2; }

		//EString
		public RuleCall getConverterNameEStringParserRuleCall_2_0() { return cConverterNameEStringParserRuleCall_2_0; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Not sure if this has be factorized somewhere...
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//EDouble returns ecore::EDouble:
		//	INT "." INT;
		public ParserRule getRule() { return rule; }

		//INT "." INT
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class StrictStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StrictString");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//StrictString returns ecore::EString:
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private MappingTransformationElements pMappingTransformation;
	private AnnotationElements pAnnotation;
	private MetamodelModelAnnotationElements pMetamodelModelAnnotation;
	private UsesStatementsElements pUsesStatements;
	private UseDeclarationElements pUseDeclaration;
	private TransformationDefinitionParameterElements pTransformationDefinitionParameter;
	private DelegateElements pDelegate;
	private ContextElements pContext;
	private TagElements pTag;
	private MatchedElementElements pMatchedElement;
	private SingleAnnotationElements pSingleAnnotation;
	private PotencyAnnotationElements pPotencyAnnotation;
	private C2CModifierElements pC2CModifier;
	private LinkedByElements pLinkedBy;
	private AttributeMappingElements pAttributeMapping;
	private AttributeRightPartElements pAttributeRightPart;
	private Attribute2AttributeElements pAttribute2Attribute;
	private AttributeIsStringElements pAttributeIsString;
	private AttributeIsBooleanElements pAttributeIsBoolean;
	private AttributeIsDoubleElements pAttributeIsDouble;
	private AttributeIsIntegerElements pAttributeIsInteger;
	private AttributeRefElements pAttributeRef;
	private Reference2ReferenceElements pReference2Reference;
	private ReferenceRefElements pReferenceRef;
	private ConverterElements pConverter;
	private EStringElements pEString;
	private EDoubleElements pEDouble;
	private EBooleanElements pEBoolean;
	private StrictStringElements pStrictString;
	private EIntElements pEInt;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MappingsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////import "platform:/resource/modelum.eclectic.compiler/model/family/eclectic.frontend.ecore#//frontend" as frontend
	//MappingTransformation returns mappings::MappingTransformation:
	//	"mappings" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
	//	//'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
	//	"(" inModels+=TransformationDefinitionParameter ")" "->" "(" outModels+=TransformationDefinitionParameter ")"
	//	annotations+=Annotation* uses+=UsesStatements* delegates+=Delegate* contexts+=Context+;
	public MappingTransformationElements getMappingTransformationAccess() {
		return (pMappingTransformation != null) ? pMappingTransformation : (pMappingTransformation = new MappingTransformationElements());
	}
	
	public ParserRule getMappingTransformationRule() {
		return getMappingTransformationAccess().getRule();
	}

	//// @common
	//Annotation returns core::Annotation:
	//	MetamodelModelAnnotation;
	public AnnotationElements getAnnotationAccess() {
		return (pAnnotation != null) ? pAnnotation : (pAnnotation = new AnnotationElements());
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//MetamodelModelAnnotation returns core::MetamodelModelAnnotation:
	//	annotatedElement=[core::RepresentModel] ":" metamodel=STRING;
	public MetamodelModelAnnotationElements getMetamodelModelAnnotationAccess() {
		return (pMetamodelModelAnnotation != null) ? pMetamodelModelAnnotation : (pMetamodelModelAnnotation = new MetamodelModelAnnotationElements());
	}
	
	public ParserRule getMetamodelModelAnnotationRule() {
		return getMetamodelModelAnnotationAccess().getRule();
	}

	//UsesStatements returns core::UseDeclaration: // TODO: Allow several declarations together
	//	UseDeclaration;
	public UsesStatementsElements getUsesStatementsAccess() {
		return (pUsesStatements != null) ? pUsesStatements : (pUsesStatements = new UsesStatementsElements());
	}
	
	public ParserRule getUsesStatementsRule() {
		return getUsesStatementsAccess().getRule();
	}

	//UseDeclaration returns core::UseDeclaration:
	//	"uses" module=EString ("as" ^as=EString)?;
	public UseDeclarationElements getUseDeclarationAccess() {
		return (pUseDeclaration != null) ? pUseDeclaration : (pUseDeclaration = new UseDeclarationElements());
	}
	
	public ParserRule getUseDeclarationRule() {
		return getUseDeclarationAccess().getRule();
	}

	//TransformationDefinitionParameter returns core::TransformationDefinitionParameter:
	//	{core::TransformationDefinitionParameter} name=EString;
	public TransformationDefinitionParameterElements getTransformationDefinitionParameterAccess() {
		return (pTransformationDefinitionParameter != null) ? pTransformationDefinitionParameter : (pTransformationDefinitionParameter = new TransformationDefinitionParameterElements());
	}
	
	public ParserRule getTransformationDefinitionParameterRule() {
		return getTransformationDefinitionParameterAccess().getRule();
	}

	/// *
	//ClassUse returns core::ClassUse :
	//	model=[core::RepresentModel] "!" className=ID	
	//;
	// * / // Using Expressions as superlanguage makes that [a] does not work because of conflicts
	//// end-of-common
	//Delegate returns mappings::Delegate:
	//	tags+=Tag* "delegate" "from" left+=MatchedElement ("," left+=MatchedElement)* "to" (module=[core::UseDeclaration]
	//	isExternal?="!") linkName=EString ("." featureName=EString)?;
	public DelegateElements getDelegateAccess() {
		return (pDelegate != null) ? pDelegate : (pDelegate = new DelegateElements());
	}
	
	public ParserRule getDelegateRule() {
		return getDelegateAccess().getRule();
	}

	//Context returns mappings::Context:
	//	tags+=Tag* "from" left+=MatchedElement ("," left+=MatchedElement)* "to" right+=MatchedElement (","
	//	right+=MatchedElement)* modifiers+=C2CModifier* // (mappings += (Attribute2Attribute | AttributeIsString | Reference2Reference) )*
	//	mappings+=(AttributeMapping | Reference2Reference)* "end";
	public ContextElements getContextAccess() {
		return (pContext != null) ? pContext : (pContext = new ContextElements());
	}
	
	public ParserRule getContextRule() {
		return getContextAccess().getRule();
	}

	//Tag returns mappings::Tag:
	//	"[" name=EString "]";
	public TagElements getTagAccess() {
		return (pTag != null) ? pTag : (pTag = new TagElements());
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}

	//MatchedElement returns mappings::MatchedElement:
	//	(name=ID ":")? model=[core::RepresentModel] "!" className=ID annotations+=SingleAnnotation? strictType?="!"?;
	public MatchedElementElements getMatchedElementAccess() {
		return (pMatchedElement != null) ? pMatchedElement : (pMatchedElement = new MatchedElementElements());
	}
	
	public ParserRule getMatchedElementRule() {
		return getMatchedElementAccess().getRule();
	}

	//SingleAnnotation returns core::SingleAnnotation:
	//	PotencyAnnotation;
	public SingleAnnotationElements getSingleAnnotationAccess() {
		return (pSingleAnnotation != null) ? pSingleAnnotation : (pSingleAnnotation = new SingleAnnotationElements());
	}
	
	public ParserRule getSingleAnnotationRule() {
		return getSingleAnnotationAccess().getRule();
	}

	//// copied from expressions
	//PotencyAnnotation returns core::PotencyAnnotation:
	//	("@" | "^") value=INT;
	public PotencyAnnotationElements getPotencyAnnotationAccess() {
		return (pPotencyAnnotation != null) ? pPotencyAnnotation : (pPotencyAnnotation = new PotencyAnnotationElements());
	}
	
	public ParserRule getPotencyAnnotationRule() {
		return getPotencyAnnotationAccess().getRule();
	}

	//C2CModifier returns mappings::C2CModifier:
	//	LinkedBy;
	public C2CModifierElements getC2CModifierAccess() {
		return (pC2CModifier != null) ? pC2CModifier : (pC2CModifier = new C2CModifierElements());
	}
	
	public ParserRule getC2CModifierRule() {
		return getC2CModifierAccess().getRule();
	}

	//// linking cd.originalCompilationUnit = cu
	//LinkedBy returns mappings::LinkedBy:
	//	"linking" attribute=AttributeRef "=" linkedElement=[mappings::MatchedElement];
	public LinkedByElements getLinkedByAccess() {
		return (pLinkedBy != null) ? pLinkedBy : (pLinkedBy = new LinkedByElements());
	}
	
	public ParserRule getLinkedByRule() {
		return getLinkedByAccess().getRule();
	}

	/// *
	//Attribute2Attribute returns mappings::Attribute2Attribute :
	//   left+=AttributeRef ( "," left+=AttributeRef)*  '=' right+=AttributeRef ( "," right+=AttributeRef)*
	//   (converter=Converter)?	
	//;	
	//
	//AttributeIsString returns mappings::AttributeIsString :
	//   left+=AttributeRef '=' strValue=EString
	//;
	// * / AttributeMapping returns mappings::AttributeMapping:
	//	left+=AttributeRef ("," left+=AttributeRef)* "=" rightPart=AttributeRightPart;
	public AttributeMappingElements getAttributeMappingAccess() {
		return (pAttributeMapping != null) ? pAttributeMapping : (pAttributeMapping = new AttributeMappingElements());
	}
	
	public ParserRule getAttributeMappingRule() {
		return getAttributeMappingAccess().getRule();
	}

	//AttributeRightPart returns mappings::AttributeRightPart:
	//	AttributeIsString | AttributeIsBoolean | AttributeIsDouble | AttributeIsInteger | Attribute2Attribute;
	public AttributeRightPartElements getAttributeRightPartAccess() {
		return (pAttributeRightPart != null) ? pAttributeRightPart : (pAttributeRightPart = new AttributeRightPartElements());
	}
	
	public ParserRule getAttributeRightPartRule() {
		return getAttributeRightPartAccess().getRule();
	}

	//Attribute2Attribute returns mappings::Attribute2Attribute:
	//	right+=AttributeRef ("," right+=AttributeRef)* converter=Converter?;
	public Attribute2AttributeElements getAttribute2AttributeAccess() {
		return (pAttribute2Attribute != null) ? pAttribute2Attribute : (pAttribute2Attribute = new Attribute2AttributeElements());
	}
	
	public ParserRule getAttribute2AttributeRule() {
		return getAttribute2AttributeAccess().getRule();
	}

	//AttributeIsString returns mappings::AttributeIsString:
	//	strValue=StrictString;
	public AttributeIsStringElements getAttributeIsStringAccess() {
		return (pAttributeIsString != null) ? pAttributeIsString : (pAttributeIsString = new AttributeIsStringElements());
	}
	
	public ParserRule getAttributeIsStringRule() {
		return getAttributeIsStringAccess().getRule();
	}

	//AttributeIsBoolean returns mappings::AttributeIsBoolean:
	//	boolValue=EBoolean;
	public AttributeIsBooleanElements getAttributeIsBooleanAccess() {
		return (pAttributeIsBoolean != null) ? pAttributeIsBoolean : (pAttributeIsBoolean = new AttributeIsBooleanElements());
	}
	
	public ParserRule getAttributeIsBooleanRule() {
		return getAttributeIsBooleanAccess().getRule();
	}

	//AttributeIsDouble returns mappings::AttributeIsDouble:
	//	doubleValue=EDouble;
	public AttributeIsDoubleElements getAttributeIsDoubleAccess() {
		return (pAttributeIsDouble != null) ? pAttributeIsDouble : (pAttributeIsDouble = new AttributeIsDoubleElements());
	}
	
	public ParserRule getAttributeIsDoubleRule() {
		return getAttributeIsDoubleAccess().getRule();
	}

	//AttributeIsInteger returns mappings::AttributeIsInteger:
	//	intValue=EInt;
	public AttributeIsIntegerElements getAttributeIsIntegerAccess() {
		return (pAttributeIsInteger != null) ? pAttributeIsInteger : (pAttributeIsInteger = new AttributeIsIntegerElements());
	}
	
	public ParserRule getAttributeIsIntegerRule() {
		return getAttributeIsIntegerAccess().getRule();
	}

	//AttributeRef returns mappings::AttributeRef:
	//	(referredElement=[mappings::MatchedElement] ".")? featureName=EString multivalued?="*"?;
	public AttributeRefElements getAttributeRefAccess() {
		return (pAttributeRef != null) ? pAttributeRef : (pAttributeRef = new AttributeRefElements());
	}
	
	public ParserRule getAttributeRefRule() {
		return getAttributeRefAccess().getRule();
	}

	//Reference2Reference returns mappings::Reference2Reference:
	//	left+=ReferenceRef ("," left+=ReferenceRef)* "<-" right+=ReferenceRef ("," right+=ReferenceRef)* converter=Converter?;
	public Reference2ReferenceElements getReference2ReferenceAccess() {
		return (pReference2Reference != null) ? pReference2Reference : (pReference2Reference = new Reference2ReferenceElements());
	}
	
	public ParserRule getReference2ReferenceRule() {
		return getReference2ReferenceAccess().getRule();
	}

	//ReferenceRef returns mappings::ReferenceRef:
	//	(referredElement=[mappings::MatchedElement] ".")? featureName=EString multivalued?="*"?;
	public ReferenceRefElements getReferenceRefAccess() {
		return (pReferenceRef != null) ? pReferenceRef : (pReferenceRef = new ReferenceRefElements());
	}
	
	public ParserRule getReferenceRefRule() {
		return getReferenceRefAccess().getRule();
	}

	//Converter returns mappings::Converter:
	//	"convert" (module=[core::UseDeclaration] isExternal?=".")? converterName=EString;
	public ConverterElements getConverterAccess() {
		return (pConverter != null) ? pConverter : (pConverter = new ConverterElements());
	}
	
	public ParserRule getConverterRule() {
		return getConverterAccess().getRule();
	}

	//// Not sure if this has be factorized somewhere...
	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EDouble returns ecore::EDouble:
	//	INT "." INT;
	public EDoubleElements getEDoubleAccess() {
		return (pEDouble != null) ? pEDouble : (pEDouble = new EDoubleElements());
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return (pEBoolean != null) ? pEBoolean : (pEBoolean = new EBooleanElements());
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//StrictString returns ecore::EString:
	//	STRING;
	public StrictStringElements getStrictStringAccess() {
		return (pStrictString != null) ? pStrictString : (pStrictString = new StrictStringElements());
	}
	
	public ParserRule getStrictStringRule() {
		return getStrictStringAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
