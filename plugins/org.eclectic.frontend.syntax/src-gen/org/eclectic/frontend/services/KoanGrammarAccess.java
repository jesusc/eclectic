/*
* generated by Xtext
*/

package org.eclectic.frontend.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class KoanGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MappingTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKoanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInModelsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInModelsTransformationDefinitionParameterParserRuleCall_3_0 = (RuleCall)cInModelsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOutModelsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOutModelsTransformationDefinitionParameterParserRuleCall_7_0 = (RuleCall)cOutModelsAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cTraceInterfaceAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cTraceInterfaceTraceInterfaceParserRuleCall_9_0 = (RuleCall)cTraceInterfaceAssignment_9.eContents().get(0);
		private final Assignment cRulesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cRulesKoanRuleParserRuleCall_10_0 = (RuleCall)cRulesAssignment_10.eContents().get(0);
		
		////import "platform:/resource/modelum.eclectic.compiler/model/family/eclectic.frontend.ecore#//frontend" as frontend
		//MappingTransformation returns koan::KoanTransformation:
		//	"koan" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
		//	//'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//	"(" inModels+=TransformationDefinitionParameter ")" "->" "(" outModels+=TransformationDefinitionParameter ")" // like this to resolve a reference: it is not the case
		//	//'(' right=[core::TransformationDefinitionParameter|EString] ')'
		//	// ('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		//	//('inModels' '{' inModels+=TransformationDefinitionParameter ( "," inModels+=TransformationDefinitionParameter)* '}' )?
		//	// ('outModels' '{' outModels+=TransformationDefinitionParameter ( "," outModels+=TransformationDefinitionParameter)* '}' )?
		//	traceInterface=TraceInterface rules+=KoanRule+;
		public ParserRule getRule() { return rule; }

		//"koan" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
		////'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//"(" inModels+=TransformationDefinitionParameter ")" "->" "(" outModels+=TransformationDefinitionParameter ")" // like this to resolve a reference: it is not the case
		////'(' right=[core::TransformationDefinitionParameter|EString] ')'
		//// ('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		////('inModels' '{' inModels+=TransformationDefinitionParameter ( "," inModels+=TransformationDefinitionParameter)* '}' )?
		//// ('outModels' '{' outModels+=TransformationDefinitionParameter ( "," outModels+=TransformationDefinitionParameter)* '}' )?
		//traceInterface=TraceInterface rules+=KoanRule+
		public Group getGroup() { return cGroup; }

		//"koan"
		public Keyword getKoanKeyword_0() { return cKoanKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//// '(' left=[core::TransformationDefinitionParameter|EString] ')'
		////'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//inModels+=TransformationDefinitionParameter
		public Assignment getInModelsAssignment_3() { return cInModelsAssignment_3; }

		//TransformationDefinitionParameter
		public RuleCall getInModelsTransformationDefinitionParameterParserRuleCall_3_0() { return cInModelsTransformationDefinitionParameterParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//outModels+=TransformationDefinitionParameter
		public Assignment getOutModelsAssignment_7() { return cOutModelsAssignment_7; }

		//TransformationDefinitionParameter
		public RuleCall getOutModelsTransformationDefinitionParameterParserRuleCall_7_0() { return cOutModelsTransformationDefinitionParameterParserRuleCall_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//traceInterface=TraceInterface
		public Assignment getTraceInterfaceAssignment_9() { return cTraceInterfaceAssignment_9; }

		//TraceInterface
		public RuleCall getTraceInterfaceTraceInterfaceParserRuleCall_9_0() { return cTraceInterfaceTraceInterfaceParserRuleCall_9_0; }

		//rules+=KoanRule+
		public Assignment getRulesAssignment_10() { return cRulesAssignment_10; }

		//KoanRule
		public RuleCall getRulesKoanRuleParserRuleCall_10_0() { return cRulesKoanRuleParserRuleCall_10_0; }
	}

	public class TransformationDefinitionParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransformationDefinitionParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransformationDefinitionParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TransformationDefinitionParameter returns core::TransformationDefinitionParameter:
		//	{core::TransformationDefinitionParameter} name=EString;
		public ParserRule getRule() { return rule; }

		//{core::TransformationDefinitionParameter} name=EString
		public Group getGroup() { return cGroup; }

		//{core::TransformationDefinitionParameter}
		public Action getTransformationDefinitionParameterAction_0() { return cTransformationDefinitionParameterAction_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class TraceInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TraceInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTraceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDefinitionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefinitionsTraceDefinitionParserRuleCall_2_0 = (RuleCall)cDefinitionsAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Begin-of Core
		//TraceInterface returns core::TraceInterface:
		//	"trace" name=EString definitions+=TraceDefinition+ "end";
		public ParserRule getRule() { return rule; }

		//"trace" name=EString definitions+=TraceDefinition+ "end"
		public Group getGroup() { return cGroup; }

		//"trace"
		public Keyword getTraceKeyword_0() { return cTraceKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//definitions+=TraceDefinition+
		public Assignment getDefinitionsAssignment_2() { return cDefinitionsAssignment_2; }

		//TraceDefinition
		public RuleCall getDefinitionsTraceDefinitionParserRuleCall_2_0() { return cDefinitionsTraceDefinitionParserRuleCall_2_0; }

		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}

	public class TraceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TraceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cElementsAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cElementsTraceElementInlineParserRuleCall_2_0_1_0 = (RuleCall)cElementsAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0_2_0 = (Keyword)cGroup_2_0_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_0_2_1 = (Assignment)cGroup_2_0_2.eContents().get(1);
		private final RuleCall cElementsTraceElementInlineParserRuleCall_2_0_2_1_0 = (RuleCall)cElementsAssignment_2_0_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cElementsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cElementsTraceElementExpandedParserRuleCall_2_1_0_0 = (RuleCall)cElementsAssignment_2_1_0.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsTraceElementExpandedParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cEndKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//TraceDefinition returns core::TraceDefinition:
		//	"link" name=EString ("{" elements+=TraceElementInline (";" elements+=TraceElementInline)* "}" |
		//	elements+=TraceElementExpanded elements+=TraceElementExpanded* "end");
		public ParserRule getRule() { return rule; }

		//"link" name=EString ("{" elements+=TraceElementInline (";" elements+=TraceElementInline)* "}" |
		//elements+=TraceElementExpanded elements+=TraceElementExpanded* "end")
		public Group getGroup() { return cGroup; }

		//"link"
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{" elements+=TraceElementInline (";" elements+=TraceElementInline)* "}" | elements+=TraceElementExpanded
		//elements+=TraceElementExpanded* "end"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"{" elements+=TraceElementInline (";" elements+=TraceElementInline)* "}"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0_0() { return cLeftCurlyBracketKeyword_2_0_0; }

		//elements+=TraceElementInline
		public Assignment getElementsAssignment_2_0_1() { return cElementsAssignment_2_0_1; }

		//TraceElementInline
		public RuleCall getElementsTraceElementInlineParserRuleCall_2_0_1_0() { return cElementsTraceElementInlineParserRuleCall_2_0_1_0; }

		//(";" elements+=TraceElementInline)*
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }

		//";"
		public Keyword getSemicolonKeyword_2_0_2_0() { return cSemicolonKeyword_2_0_2_0; }

		//elements+=TraceElementInline
		public Assignment getElementsAssignment_2_0_2_1() { return cElementsAssignment_2_0_2_1; }

		//TraceElementInline
		public RuleCall getElementsTraceElementInlineParserRuleCall_2_0_2_1_0() { return cElementsTraceElementInlineParserRuleCall_2_0_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_0_3() { return cRightCurlyBracketKeyword_2_0_3; }

		//elements+=TraceElementExpanded elements+=TraceElementExpanded* "end"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//elements+=TraceElementExpanded
		public Assignment getElementsAssignment_2_1_0() { return cElementsAssignment_2_1_0; }

		//TraceElementExpanded
		public RuleCall getElementsTraceElementExpandedParserRuleCall_2_1_0_0() { return cElementsTraceElementExpandedParserRuleCall_2_1_0_0; }

		//elements+=TraceElementExpanded*
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }

		//TraceElementExpanded
		public RuleCall getElementsTraceElementExpandedParserRuleCall_2_1_1_0() { return cElementsTraceElementExpandedParserRuleCall_2_1_1_0; }

		//"end"
		public Keyword getEndKeyword_2_1_2() { return cEndKeyword_2_1_2; }
	}

	public class TraceElementInlineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TraceElementInline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeExpressionParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//TraceElementInline returns core::TraceElement:
		//	name=EString ":" type=TypeExpression;
		public ParserRule getRule() { return rule; }

		//name=EString ":" type=TypeExpression
		public Group getGroup() { return cGroup; }

		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=TypeExpression
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//TypeExpression
		public RuleCall getTypeTypeExpressionParserRuleCall_2_0() { return cTypeTypeExpressionParserRuleCall_2_0; }
	}

	public class TraceElementExpandedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TraceElementExpanded");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeExpressionParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//TraceElementExpanded returns core::TraceElement:
		//	"var" name=EString ":" type=TypeExpression;
		public ParserRule getRule() { return rule; }

		//"var" name=EString ":" type=TypeExpression
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=TypeExpression
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeExpression
		public RuleCall getTypeTypeExpressionParserRuleCall_3_0() { return cTypeTypeExpressionParserRuleCall_3_0; }
	}

	public class TypeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeExpression");
		private final RuleCall cClassUseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TypeExpression returns core::TypeExpression:
		//	ClassUse;
		public ParserRule getRule() { return rule; }

		//ClassUse
		public RuleCall getClassUseParserRuleCall() { return cClassUseParserRuleCall; }
	}

	public class ClassUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cModelRepresentModelCrossReference_0_0 = (CrossReference)cModelAssignment_0.eContents().get(0);
		private final RuleCall cModelRepresentModelIDTerminalRuleCall_0_0_1 = (RuleCall)cModelRepresentModelCrossReference_0_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassNameEStringParserRuleCall_2_0 = (RuleCall)cClassNameAssignment_2.eContents().get(0);
		
		//ClassUse returns core::ClassUse:
		//	model=[core::RepresentModel] "!" className=EString;
		public ParserRule getRule() { return rule; }

		//model=[core::RepresentModel] "!" className=EString
		public Group getGroup() { return cGroup; }

		//model=[core::RepresentModel]
		public Assignment getModelAssignment_0() { return cModelAssignment_0; }

		//[core::RepresentModel]
		public CrossReference getModelRepresentModelCrossReference_0_0() { return cModelRepresentModelCrossReference_0_0; }

		//ID
		public RuleCall getModelRepresentModelIDTerminalRuleCall_0_0_1() { return cModelRepresentModelIDTerminalRuleCall_0_0_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }

		//className=EString
		public Assignment getClassNameAssignment_2() { return cClassNameAssignment_2; }

		//EString
		public RuleCall getClassNameEStringParserRuleCall_2_0() { return cClassNameEStringParserRuleCall_2_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefineVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPutTraceExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPropertyWriteParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Statement returns core::Statement:
		//	DefineVariable | Expression | PutTraceExpression | PropertyWrite;
		public ParserRule getRule() { return rule; }

		//DefineVariable | Expression | PutTraceExpression | PropertyWrite
		public Alternatives getAlternatives() { return cAlternatives; }

		//DefineVariable
		public RuleCall getDefineVariableParserRuleCall_0() { return cDefineVariableParserRuleCall_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//PutTraceExpression
		public RuleCall getPutTraceExpressionParserRuleCall_2() { return cPutTraceExpressionParserRuleCall_2; }

		//PropertyWrite
		public RuleCall getPropertyWriteParserRuleCall_3() { return cPropertyWriteParserRuleCall_3; }
	}

	public class PropertyWriteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyWrite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReceptorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cReceptorVariableCrossReference_0_0 = (CrossReference)cReceptorAssignment_0.eContents().get(0);
		private final RuleCall cReceptorVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cReceptorVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyIDTerminalRuleCall_2_0 = (RuleCall)cPropertyAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		//PropertyWrite returns core::PropertyWrite:
		//	receptor=[core::Variable] "." property=ID "=" expression=Expression;
		public ParserRule getRule() { return rule; }

		//receptor=[core::Variable] "." property=ID "=" expression=Expression
		public Group getGroup() { return cGroup; }

		//receptor=[core::Variable]
		public Assignment getReceptorAssignment_0() { return cReceptorAssignment_0; }

		//[core::Variable]
		public CrossReference getReceptorVariableCrossReference_0_0() { return cReceptorVariableCrossReference_0_0; }

		//ID
		public RuleCall getReceptorVariableIDTerminalRuleCall_0_0_1() { return cReceptorVariableIDTerminalRuleCall_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//property=ID
		public Assignment getPropertyAssignment_2() { return cPropertyAssignment_2; }

		//ID
		public RuleCall getPropertyIDTerminalRuleCall_2_0() { return cPropertyIDTerminalRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
	}

	public class DefineVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefineVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//DefineVariable returns core::DefineVariable:
		//	name=EString "=" expression=Expression;
		public ParserRule getRule() { return rule; }

		//name=EString "=" expression=Expression
		public Group getGroup() { return cGroup; }

		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}

	public class ModelReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cModelRepresentModelCrossReference_0_0 = (CrossReference)cModelAssignment_0.eContents().get(0);
		private final RuleCall cModelRepresentModelIDTerminalRuleCall_0_0_1 = (RuleCall)cModelRepresentModelCrossReference_0_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassNameEStringParserRuleCall_2_0 = (RuleCall)cClassNameAssignment_2.eContents().get(0);
		
		//// ClassUse How to reuse ClassUse?? 
		//ModelReference returns core::ModelReference:
		//	model=[core::RepresentModel] "!" className=EString;
		public ParserRule getRule() { return rule; }

		//model=[core::RepresentModel] "!" className=EString
		public Group getGroup() { return cGroup; }

		//model=[core::RepresentModel]
		public Assignment getModelAssignment_0() { return cModelAssignment_0; }

		//[core::RepresentModel]
		public CrossReference getModelRepresentModelCrossReference_0_0() { return cModelRepresentModelCrossReference_0_0; }

		//ID
		public RuleCall getModelRepresentModelIDTerminalRuleCall_0_0_1() { return cModelRepresentModelIDTerminalRuleCall_0_0_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }

		//className=EString
		public Assignment getClassNameAssignment_2() { return cClassNameAssignment_2; }

		//EString
		public RuleCall getClassNameEStringParserRuleCall_2_0() { return cClassNameEStringParserRuleCall_2_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cMethodCallParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression returns core::Expression:
		//	MethodCall;
		public ParserRule getRule() { return rule; }

		//MethodCall
		public RuleCall getMethodCallParserRuleCall() { return cMethodCallParserRuleCall; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cModelReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cParenthesizedExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMatchTraceExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cClosureDeclarationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//// should be in another language?
		////| BinaryExpr
		//PrimaryExpression returns core::Expression:
		//	Literal | VariableReference | ModelReference | ParenthesizedExpression | MatchTraceExpression | ClosureDeclaration;
		public ParserRule getRule() { return rule; }

		//Literal | VariableReference | ModelReference | ParenthesizedExpression | MatchTraceExpression | ClosureDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_1() { return cVariableReferenceParserRuleCall_1; }

		//ModelReference
		public RuleCall getModelReferenceParserRuleCall_2() { return cModelReferenceParserRuleCall_2; }

		//ParenthesizedExpression
		public RuleCall getParenthesizedExpressionParserRuleCall_3() { return cParenthesizedExpressionParserRuleCall_3; }

		//MatchTraceExpression
		public RuleCall getMatchTraceExpressionParserRuleCall_4() { return cMatchTraceExpressionParserRuleCall_4; }

		//ClosureDeclaration
		public RuleCall getClosureDeclarationParserRuleCall_5() { return cClosureDeclarationParserRuleCall_5; }
	}

	public class ParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParenthesizedExpression returns core::Expression:
		//	"(" Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final RuleCall cNumLiteralParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Literal returns core::Expression:
		//	NumLiteral;
		public ParserRule getRule() { return rule; }

		//NumLiteral
		public RuleCall getNumLiteralParserRuleCall() { return cNumLiteralParserRuleCall; }
	}

	public class VariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableReference");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_0 = (CrossReference)cVariableAssignment.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_0_1 = (RuleCall)cVariableVariableCrossReference_0.eContents().get(1);
		
		//VariableReference returns core::VariableReference:
		//	variable=[core::Variable];
		public ParserRule getRule() { return rule; }

		//variable=[core::Variable]
		public Assignment getVariableAssignment() { return cVariableAssignment; }

		//[core::Variable]
		public CrossReference getVariableVariableCrossReference_0() { return cVariableVariableCrossReference_0; }

		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_0_1() { return cVariableVariableIDTerminalRuleCall_0_1; }
	}

	public class ClosureDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClosureDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFormalParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFormalParametersClosureParameterParserRuleCall_1_1_0 = (RuleCall)cFormalParametersAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cFormalParametersAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cFormalParametersClosureParameterParserRuleCall_1_2_1_0 = (RuleCall)cFormalParametersAssignment_1_2_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ClosureDeclaration returns core::ClosureDeclaration:
		//	"{" ("|" formalParameters+=ClosureParameter ("," formalParameters+=ClosureParameter)* "|")? statements+=Statement+
		//	"}";
		public ParserRule getRule() { return rule; }

		//"{" ("|" formalParameters+=ClosureParameter ("," formalParameters+=ClosureParameter)* "|")? statements+=Statement+ "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//("|" formalParameters+=ClosureParameter ("," formalParameters+=ClosureParameter)* "|")?
		public Group getGroup_1() { return cGroup_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }

		//formalParameters+=ClosureParameter
		public Assignment getFormalParametersAssignment_1_1() { return cFormalParametersAssignment_1_1; }

		//ClosureParameter
		public RuleCall getFormalParametersClosureParameterParserRuleCall_1_1_0() { return cFormalParametersClosureParameterParserRuleCall_1_1_0; }

		//("," formalParameters+=ClosureParameter)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//formalParameters+=ClosureParameter
		public Assignment getFormalParametersAssignment_1_2_1() { return cFormalParametersAssignment_1_2_1; }

		//ClosureParameter
		public RuleCall getFormalParametersClosureParameterParserRuleCall_1_2_1_0() { return cFormalParametersClosureParameterParserRuleCall_1_2_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_3() { return cVerticalLineKeyword_1_3; }

		//statements+=Statement+
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ClosureParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClosureParameter");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ClosureParameter returns core::ClosureParameter:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class MethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cBinaryOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cBinaryOpBinaryOpEnumRuleCall_1_0_1_0 = (RuleCall)cBinaryOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Action cMethodCallReceptorAction_1_1_0_0 = (Action)cGroup_1_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cMethodNameAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cMethodNameEStringParserRuleCall_1_1_2_0 = (RuleCall)cMethodNameAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Assignment cWithParametersAssignment_1_1_3_0 = (Assignment)cGroup_1_1_3.eContents().get(0);
		private final Keyword cWithParametersLeftParenthesisKeyword_1_1_3_0_0 = (Keyword)cWithParametersAssignment_1_1_3_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_1_1_3_1_0 = (RuleCall)cParametersAssignment_1_1_3_1.eContents().get(0);
		private final Group cGroup_1_1_3_2 = (Group)cGroup_1_1_3.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_3_2_0 = (Keyword)cGroup_1_1_3_2.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_3_2_1 = (Assignment)cGroup_1_1_3_2.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_1_1_3_2_1_0 = (RuleCall)cParametersAssignment_1_1_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_3_3 = (Keyword)cGroup_1_1_3.eContents().get(3);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cKeywordMethodCallReceptorAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cFullStopKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cParametersAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cParametersKeywordParameterParserRuleCall_1_2_2_0 = (RuleCall)cParametersAssignment_1_2_2.eContents().get(0);
		
		//MethodCall returns core::Expression:
		//	PrimaryExpression ({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression | (=>
		//	({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
		//	parameters+=Expression)* ")")?)+ | {core::KeywordMethodCall.receptor=current} "." parameters+=KeywordParameter+)?;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression ({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression | (=>
		//({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
		//parameters+=Expression)* ")")?)+ | {core::KeywordMethodCall.receptor=current} "." parameters+=KeywordParameter+)?
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression | (=> ({core::MethodCall.receptor=current}) "."
		//methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")")?)+ |
		//{core::KeywordMethodCall.receptor=current} "." parameters+=KeywordParameter+)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{core::BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0() { return cBinaryExprLeftAction_1_0_0; }

		//binaryOp=BinaryOp
		public Assignment getBinaryOpAssignment_1_0_1() { return cBinaryOpAssignment_1_0_1; }

		//BinaryOp
		public RuleCall getBinaryOpBinaryOpEnumRuleCall_1_0_1_0() { return cBinaryOpBinaryOpEnumRuleCall_1_0_1_0; }

		//right=Expression
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_0_2_0() { return cRightExpressionParserRuleCall_1_0_2_0; }

		//(=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
		//parameters+=Expression)* ")")?)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({core::MethodCall.receptor=current})
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{core::MethodCall.receptor=current}
		public Action getMethodCallReceptorAction_1_1_0_0() { return cMethodCallReceptorAction_1_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_1_1() { return cFullStopKeyword_1_1_1; }

		//methodName=EString
		public Assignment getMethodNameAssignment_1_1_2() { return cMethodNameAssignment_1_1_2; }

		//EString
		public RuleCall getMethodNameEStringParserRuleCall_1_1_2_0() { return cMethodNameEStringParserRuleCall_1_1_2_0; }

		//(withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")")?
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }

		//withParameters?="("
		public Assignment getWithParametersAssignment_1_1_3_0() { return cWithParametersAssignment_1_1_3_0; }

		//"("
		public Keyword getWithParametersLeftParenthesisKeyword_1_1_3_0_0() { return cWithParametersLeftParenthesisKeyword_1_1_3_0_0; }

		//parameters+=Expression
		public Assignment getParametersAssignment_1_1_3_1() { return cParametersAssignment_1_1_3_1; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_1_1_3_1_0() { return cParametersExpressionParserRuleCall_1_1_3_1_0; }

		//("," parameters+=Expression)*
		public Group getGroup_1_1_3_2() { return cGroup_1_1_3_2; }

		//","
		public Keyword getCommaKeyword_1_1_3_2_0() { return cCommaKeyword_1_1_3_2_0; }

		//parameters+=Expression
		public Assignment getParametersAssignment_1_1_3_2_1() { return cParametersAssignment_1_1_3_2_1; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_1_1_3_2_1_0() { return cParametersExpressionParserRuleCall_1_1_3_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_3_3() { return cRightParenthesisKeyword_1_1_3_3; }

		//{core::KeywordMethodCall.receptor=current} "." parameters+=KeywordParameter+
		public Group getGroup_1_2() { return cGroup_1_2; }

		//{core::KeywordMethodCall.receptor=current}
		public Action getKeywordMethodCallReceptorAction_1_2_0() { return cKeywordMethodCallReceptorAction_1_2_0; }

		//"."
		public Keyword getFullStopKeyword_1_2_1() { return cFullStopKeyword_1_2_1; }

		//parameters+=KeywordParameter+
		public Assignment getParametersAssignment_1_2_2() { return cParametersAssignment_1_2_2; }

		//KeywordParameter
		public RuleCall getParametersKeywordParameterParserRuleCall_1_2_2_0() { return cParametersKeywordParameterParserRuleCall_1_2_2_0; }
	}

	public class KeywordParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KeywordParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeywordKEYWORD_IDTerminalRuleCall_0_0 = (RuleCall)cKeywordAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//KeywordParameter returns core::KeywordParameter:
		//	keyword=KEYWORD_ID value=Expression;
		public ParserRule getRule() { return rule; }

		//keyword=KEYWORD_ID value=Expression
		public Group getGroup() { return cGroup; }

		//keyword=KEYWORD_ID
		public Assignment getKeywordAssignment_0() { return cKeywordAssignment_0; }

		//KEYWORD_ID
		public RuleCall getKeywordKEYWORD_IDTerminalRuleCall_0_0() { return cKeywordKEYWORD_IDTerminalRuleCall_0_0; }

		//value=Expression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0() { return cValueExpressionParserRuleCall_1_0; }
	}

	public class MatchTraceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MatchTraceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTraceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTraceTraceDefinitionCrossReference_2_0 = (CrossReference)cTraceAssignment_2.eContents().get(0);
		private final RuleCall cTraceTraceDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cTraceTraceDefinitionCrossReference_2_0.eContents().get(1);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTraceExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTraceExprTraceExprLanguageParserRuleCall_5_0 = (RuleCall)cTraceExprAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//MatchTraceExpression returns core::MatchTrace:
		//	"match" (ID "!")? trace=[core::TraceDefinition] "with" "[" traceExpr=TraceExprLanguage "]";
		public ParserRule getRule() { return rule; }

		//"match" (ID "!")? trace=[core::TraceDefinition] "with" "[" traceExpr=TraceExprLanguage "]"
		public Group getGroup() { return cGroup; }

		//"match"
		public Keyword getMatchKeyword_0() { return cMatchKeyword_0; }

		//(ID "!")?
		public Group getGroup_1() { return cGroup_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }

		//trace=[core::TraceDefinition]
		public Assignment getTraceAssignment_2() { return cTraceAssignment_2; }

		//[core::TraceDefinition]
		public CrossReference getTraceTraceDefinitionCrossReference_2_0() { return cTraceTraceDefinitionCrossReference_2_0; }

		//ID
		public RuleCall getTraceTraceDefinitionIDTerminalRuleCall_2_0_1() { return cTraceTraceDefinitionIDTerminalRuleCall_2_0_1; }

		//"with"
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//traceExpr=TraceExprLanguage
		public Assignment getTraceExprAssignment_5() { return cTraceExprAssignment_5; }

		//TraceExprLanguage
		public RuleCall getTraceExprTraceExprLanguageParserRuleCall_5_0() { return cTraceExprTraceExprLanguageParserRuleCall_5_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}

	public class TraceExprLanguageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TraceExprLanguage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTraceVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTraceVarTraceElementCrossReference_0_0 = (CrossReference)cTraceVarAssignment_0.eContents().get(0);
		private final RuleCall cTraceVarTraceElementIDTerminalRuleCall_0_0_1 = (RuleCall)cTraceVarTraceElementCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//// TODO: Resolve!! 
		//TraceExprLanguage returns core::TraceCompareExpression:
		//	traceVar=[core::TraceElement] "=" expr=Expression;
		public ParserRule getRule() { return rule; }

		//traceVar=[core::TraceElement] "=" expr=Expression
		public Group getGroup() { return cGroup; }

		//traceVar=[core::TraceElement]
		public Assignment getTraceVarAssignment_0() { return cTraceVarAssignment_0; }

		//[core::TraceElement]
		public CrossReference getTraceVarTraceElementCrossReference_0_0() { return cTraceVarTraceElementCrossReference_0_0; }

		//ID
		public RuleCall getTraceVarTraceElementIDTerminalRuleCall_0_0_1() { return cTraceVarTraceElementIDTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
	}

	public class PutTraceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PutTraceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTraceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTraceTraceDefinitionCrossReference_2_0 = (CrossReference)cTraceAssignment_2.eContents().get(0);
		private final RuleCall cTraceTraceDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cTraceTraceDefinitionCrossReference_2_0.eContents().get(1);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParametersPutTraceParameterParserRuleCall_5_0 = (RuleCall)cParametersAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cParametersAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cParametersPutTraceParameterParserRuleCall_6_1_0 = (RuleCall)cParametersAssignment_6_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//PutTraceExpression returns core::PutTrace:
		//	"put" (ID "!")? trace=[core::TraceDefinition] "with" "[" parameters+=PutTraceParameter (","
		//	parameters+=PutTraceParameter)+ "]";
		public ParserRule getRule() { return rule; }

		//"put" (ID "!")? trace=[core::TraceDefinition] "with" "[" parameters+=PutTraceParameter (","
		//parameters+=PutTraceParameter)+ "]"
		public Group getGroup() { return cGroup; }

		//"put"
		public Keyword getPutKeyword_0() { return cPutKeyword_0; }

		//(ID "!")?
		public Group getGroup_1() { return cGroup_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }

		//trace=[core::TraceDefinition]
		public Assignment getTraceAssignment_2() { return cTraceAssignment_2; }

		//[core::TraceDefinition]
		public CrossReference getTraceTraceDefinitionCrossReference_2_0() { return cTraceTraceDefinitionCrossReference_2_0; }

		//ID
		public RuleCall getTraceTraceDefinitionIDTerminalRuleCall_2_0_1() { return cTraceTraceDefinitionIDTerminalRuleCall_2_0_1; }

		//"with"
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//parameters+=PutTraceParameter
		public Assignment getParametersAssignment_5() { return cParametersAssignment_5; }

		//PutTraceParameter
		public RuleCall getParametersPutTraceParameterParserRuleCall_5_0() { return cParametersPutTraceParameterParserRuleCall_5_0; }

		//("," parameters+=PutTraceParameter)+
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//parameters+=PutTraceParameter
		public Assignment getParametersAssignment_6_1() { return cParametersAssignment_6_1; }

		//PutTraceParameter
		public RuleCall getParametersPutTraceParameterParserRuleCall_6_1_0() { return cParametersPutTraceParameterParserRuleCall_6_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
	}

	public class PutTraceParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PutTraceParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTraceVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTraceVarTraceElementCrossReference_0_0 = (CrossReference)cTraceVarAssignment_0.eContents().get(0);
		private final RuleCall cTraceVarTraceElementIDTerminalRuleCall_0_0_1 = (RuleCall)cTraceVarTraceElementCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//PutTraceParameter returns core::PutTraceParameter:
		//	traceVar=[core::TraceElement] "=" value=Expression;
		public ParserRule getRule() { return rule; }

		//traceVar=[core::TraceElement] "=" value=Expression
		public Group getGroup() { return cGroup; }

		//traceVar=[core::TraceElement]
		public Assignment getTraceVarAssignment_0() { return cTraceVarAssignment_0; }

		//[core::TraceElement]
		public CrossReference getTraceVarTraceElementCrossReference_0_0() { return cTraceVarTraceElementCrossReference_0_0; }

		//ID
		public RuleCall getTraceVarTraceElementIDTerminalRuleCall_0_0_1() { return cTraceVarTraceElementIDTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}

	public class NumLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		/// *
		//MethodCall returns core::MethodCall:
		//	receptor=Expression "." methodName=EString
		//	("(" parameters+=Expression ("," parameters+=Expression)* ")")?
		//; 
		// * / / *
		// 
		// => indica precedencia
		//XMemberFeatureCall returns XExpression:
		//        XPrimaryExpression
		//        (=>({XAssignment.assignable=current} '.' feature=[types::JvmIdentifiableElement|ValidID] OpSingleAssign) value=XAssignment
		//        |=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|spreading?="*.")) 
		//                ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
		//                feature=[types::JvmIdentifiableElement|ValidID] (
		//                        =>explicitOperationCall?='(' 
		//                                (
		//                                    memberCallArguments+=XShortClosure
		//                                  |     memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
		//                                )? 
		//                        ')')?
		//                )*;
		//
		//XPrimaryExpression returns XExpression:
		//        XConstructorCall |
		//        XBlockExpression |
		//        XSwitchExpression |
		//        XFeatureCall |
		//        XLiteral |
		//        XIfExpression |
		//        XForLoopExpression |
		//        XWhileExpression |
		//        XDoWhileExpression |
		//        XThrowExpression |
		//        XReturnExpression |
		//        XTryCatchFinallyExpression |
		//        XParenthesizedExpression;
		// * / NumLiteral returns core::NumLiteral:
		//	value=EInt;
		public ParserRule getRule() { return rule; }

		//value=EInt
		public Assignment getValueAssignment() { return cValueAssignment; }

		//EInt
		public RuleCall getValueEIntParserRuleCall_0() { return cValueEIntParserRuleCall_0; }
	}

	public class KoanRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KoanRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cMatcherAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMatcherMatcherParserRuleCall_2_0 = (RuleCall)cMatcherAssignment_2.eContents().get(0);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// End-of Core
		//KoanRule returns koan::KoanRule:
		//	"rule" name=EString matcher=Matcher statements+=Statement+ "end";
		public ParserRule getRule() { return rule; }

		//"rule" name=EString matcher=Matcher statements+=Statement+ "end"
		public Group getGroup() { return cGroup; }

		//"rule"
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//matcher=Matcher
		public Assignment getMatcherAssignment_2() { return cMatcherAssignment_2; }

		//Matcher
		public RuleCall getMatcherMatcherParserRuleCall_2_0() { return cMatcherMatcherParserRuleCall_2_0; }

		//statements+=Statement+
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}

	public class MatcherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Matcher");
		private final RuleCall cForAllMatcherParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Matcher returns koan::Matcher:
		//	ForAllMatcher;
		public ParserRule getRule() { return rule; }

		//ForAllMatcher
		public RuleCall getForAllMatcherParserRuleCall() { return cForAllMatcherParserRuleCall; }
	}

	public class ForAllMatcherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForAllMatcher");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForAllKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeClassUseParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cChildAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cChildMatcherParserRuleCall_4_0 = (RuleCall)cChildAssignment_4.eContents().get(0);
		
		//ForAllMatcher returns koan::ForAllMatcher:
		//	"forAll" name=ID ":" type=ClassUse child=Matcher?;
		public ParserRule getRule() { return rule; }

		//"forAll" name=ID ":" type=ClassUse child=Matcher?
		public Group getGroup() { return cGroup; }

		//"forAll"
		public Keyword getForAllKeyword_0() { return cForAllKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=ClassUse
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//ClassUse
		public RuleCall getTypeClassUseParserRuleCall_3_0() { return cTypeClassUseParserRuleCall_3_0; }

		//child=Matcher?
		public Assignment getChildAssignment_4() { return cChildAssignment_4; }

		//Matcher
		public RuleCall getChildMatcherParserRuleCall_4_0() { return cChildMatcherParserRuleCall_4_0; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	public class BinaryOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDPlusSignKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBHyphenMinusKeyword_1_0 = (Keyword)cSUBEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMULEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMULAsteriskKeyword_2_0 = (Keyword)cMULEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDIVSolidusKeyword_3_0 = (Keyword)cDIVEnumLiteralDeclaration_3.eContents().get(0);
		
		////BinaryExpr returns core::BinaryExpr:
		////	left=Expression  binaryOp=BinaryOp right=Expression 
		////;
		//enum BinaryOp returns core::BinaryOp:
		//	ADD="+" | SUB="-" | MUL="*" | DIV="/";
		public EnumRule getRule() { return rule; }

		//ADD="+" | SUB="-" | MUL="*" | DIV="/"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ADD="+"
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getADDPlusSignKeyword_0_0() { return cADDPlusSignKeyword_0_0; }

		//SUB="-"
		public EnumLiteralDeclaration getSUBEnumLiteralDeclaration_1() { return cSUBEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getSUBHyphenMinusKeyword_1_0() { return cSUBHyphenMinusKeyword_1_0; }

		//MUL="*"
		public EnumLiteralDeclaration getMULEnumLiteralDeclaration_2() { return cMULEnumLiteralDeclaration_2; }

		//"*"
		public Keyword getMULAsteriskKeyword_2_0() { return cMULAsteriskKeyword_2_0; }

		//DIV="/"
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_3() { return cDIVEnumLiteralDeclaration_3; }

		//"/"
		public Keyword getDIVSolidusKeyword_3_0() { return cDIVSolidusKeyword_3_0; }
	}
	
	private MappingTransformationElements pMappingTransformation;
	private TransformationDefinitionParameterElements pTransformationDefinitionParameter;
	private TraceInterfaceElements pTraceInterface;
	private TraceDefinitionElements pTraceDefinition;
	private TraceElementInlineElements pTraceElementInline;
	private TraceElementExpandedElements pTraceElementExpanded;
	private TypeExpressionElements pTypeExpression;
	private ClassUseElements pClassUse;
	private StatementElements pStatement;
	private PropertyWriteElements pPropertyWrite;
	private DefineVariableElements pDefineVariable;
	private ModelReferenceElements pModelReference;
	private ExpressionElements pExpression;
	private PrimaryExpressionElements pPrimaryExpression;
	private BinaryOpElements unknownRuleBinaryOp;
	private ParenthesizedExpressionElements pParenthesizedExpression;
	private LiteralElements pLiteral;
	private VariableReferenceElements pVariableReference;
	private ClosureDeclarationElements pClosureDeclaration;
	private ClosureParameterElements pClosureParameter;
	private MethodCallElements pMethodCall;
	private KeywordParameterElements pKeywordParameter;
	private TerminalRule tKEYWORD_ID;
	private TerminalRule tID;
	private MatchTraceExpressionElements pMatchTraceExpression;
	private TraceExprLanguageElements pTraceExprLanguage;
	private PutTraceExpressionElements pPutTraceExpression;
	private PutTraceParameterElements pPutTraceParameter;
	private NumLiteralElements pNumLiteral;
	private KoanRuleElements pKoanRule;
	private MatcherElements pMatcher;
	private ForAllMatcherElements pForAllMatcher;
	private EStringElements pEString;
	private EIntElements pEInt;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public KoanGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////import "platform:/resource/modelum.eclectic.compiler/model/family/eclectic.frontend.ecore#//frontend" as frontend
	//MappingTransformation returns koan::KoanTransformation:
	//	"koan" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
	//	//'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
	//	"(" inModels+=TransformationDefinitionParameter ")" "->" "(" outModels+=TransformationDefinitionParameter ")" // like this to resolve a reference: it is not the case
	//	//'(' right=[core::TransformationDefinitionParameter|EString] ')'
	//	// ('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
	//	//('inModels' '{' inModels+=TransformationDefinitionParameter ( "," inModels+=TransformationDefinitionParameter)* '}' )?
	//	// ('outModels' '{' outModels+=TransformationDefinitionParameter ( "," outModels+=TransformationDefinitionParameter)* '}' )?
	//	traceInterface=TraceInterface rules+=KoanRule+;
	public MappingTransformationElements getMappingTransformationAccess() {
		return (pMappingTransformation != null) ? pMappingTransformation : (pMappingTransformation = new MappingTransformationElements());
	}
	
	public ParserRule getMappingTransformationRule() {
		return getMappingTransformationAccess().getRule();
	}

	//TransformationDefinitionParameter returns core::TransformationDefinitionParameter:
	//	{core::TransformationDefinitionParameter} name=EString;
	public TransformationDefinitionParameterElements getTransformationDefinitionParameterAccess() {
		return (pTransformationDefinitionParameter != null) ? pTransformationDefinitionParameter : (pTransformationDefinitionParameter = new TransformationDefinitionParameterElements());
	}
	
	public ParserRule getTransformationDefinitionParameterRule() {
		return getTransformationDefinitionParameterAccess().getRule();
	}

	//// Begin-of Core
	//TraceInterface returns core::TraceInterface:
	//	"trace" name=EString definitions+=TraceDefinition+ "end";
	public TraceInterfaceElements getTraceInterfaceAccess() {
		return (pTraceInterface != null) ? pTraceInterface : (pTraceInterface = new TraceInterfaceElements());
	}
	
	public ParserRule getTraceInterfaceRule() {
		return getTraceInterfaceAccess().getRule();
	}

	//TraceDefinition returns core::TraceDefinition:
	//	"link" name=EString ("{" elements+=TraceElementInline (";" elements+=TraceElementInline)* "}" |
	//	elements+=TraceElementExpanded elements+=TraceElementExpanded* "end");
	public TraceDefinitionElements getTraceDefinitionAccess() {
		return (pTraceDefinition != null) ? pTraceDefinition : (pTraceDefinition = new TraceDefinitionElements());
	}
	
	public ParserRule getTraceDefinitionRule() {
		return getTraceDefinitionAccess().getRule();
	}

	//TraceElementInline returns core::TraceElement:
	//	name=EString ":" type=TypeExpression;
	public TraceElementInlineElements getTraceElementInlineAccess() {
		return (pTraceElementInline != null) ? pTraceElementInline : (pTraceElementInline = new TraceElementInlineElements());
	}
	
	public ParserRule getTraceElementInlineRule() {
		return getTraceElementInlineAccess().getRule();
	}

	//TraceElementExpanded returns core::TraceElement:
	//	"var" name=EString ":" type=TypeExpression;
	public TraceElementExpandedElements getTraceElementExpandedAccess() {
		return (pTraceElementExpanded != null) ? pTraceElementExpanded : (pTraceElementExpanded = new TraceElementExpandedElements());
	}
	
	public ParserRule getTraceElementExpandedRule() {
		return getTraceElementExpandedAccess().getRule();
	}

	//TypeExpression returns core::TypeExpression:
	//	ClassUse;
	public TypeExpressionElements getTypeExpressionAccess() {
		return (pTypeExpression != null) ? pTypeExpression : (pTypeExpression = new TypeExpressionElements());
	}
	
	public ParserRule getTypeExpressionRule() {
		return getTypeExpressionAccess().getRule();
	}

	//ClassUse returns core::ClassUse:
	//	model=[core::RepresentModel] "!" className=EString;
	public ClassUseElements getClassUseAccess() {
		return (pClassUse != null) ? pClassUse : (pClassUse = new ClassUseElements());
	}
	
	public ParserRule getClassUseRule() {
		return getClassUseAccess().getRule();
	}

	//Statement returns core::Statement:
	//	DefineVariable | Expression | PutTraceExpression | PropertyWrite;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//PropertyWrite returns core::PropertyWrite:
	//	receptor=[core::Variable] "." property=ID "=" expression=Expression;
	public PropertyWriteElements getPropertyWriteAccess() {
		return (pPropertyWrite != null) ? pPropertyWrite : (pPropertyWrite = new PropertyWriteElements());
	}
	
	public ParserRule getPropertyWriteRule() {
		return getPropertyWriteAccess().getRule();
	}

	//DefineVariable returns core::DefineVariable:
	//	name=EString "=" expression=Expression;
	public DefineVariableElements getDefineVariableAccess() {
		return (pDefineVariable != null) ? pDefineVariable : (pDefineVariable = new DefineVariableElements());
	}
	
	public ParserRule getDefineVariableRule() {
		return getDefineVariableAccess().getRule();
	}

	//// ClassUse How to reuse ClassUse?? 
	//ModelReference returns core::ModelReference:
	//	model=[core::RepresentModel] "!" className=EString;
	public ModelReferenceElements getModelReferenceAccess() {
		return (pModelReference != null) ? pModelReference : (pModelReference = new ModelReferenceElements());
	}
	
	public ParserRule getModelReferenceRule() {
		return getModelReferenceAccess().getRule();
	}

	//Expression returns core::Expression:
	//	MethodCall;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//// should be in another language?
	////| BinaryExpr
	//PrimaryExpression returns core::Expression:
	//	Literal | VariableReference | ModelReference | ParenthesizedExpression | MatchTraceExpression | ClosureDeclaration;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	////BinaryExpr returns core::BinaryExpr:
	////	left=Expression  binaryOp=BinaryOp right=Expression 
	////;
	//enum BinaryOp returns core::BinaryOp:
	//	ADD="+" | SUB="-" | MUL="*" | DIV="/";
	public BinaryOpElements getBinaryOpAccess() {
		return (unknownRuleBinaryOp != null) ? unknownRuleBinaryOp : (unknownRuleBinaryOp = new BinaryOpElements());
	}
	
	public EnumRule getBinaryOpRule() {
		return getBinaryOpAccess().getRule();
	}

	//ParenthesizedExpression returns core::Expression:
	//	"(" Expression ")";
	public ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return (pParenthesizedExpression != null) ? pParenthesizedExpression : (pParenthesizedExpression = new ParenthesizedExpressionElements());
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//Literal returns core::Expression:
	//	NumLiteral;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//VariableReference returns core::VariableReference:
	//	variable=[core::Variable];
	public VariableReferenceElements getVariableReferenceAccess() {
		return (pVariableReference != null) ? pVariableReference : (pVariableReference = new VariableReferenceElements());
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	//ClosureDeclaration returns core::ClosureDeclaration:
	//	"{" ("|" formalParameters+=ClosureParameter ("," formalParameters+=ClosureParameter)* "|")? statements+=Statement+
	//	"}";
	public ClosureDeclarationElements getClosureDeclarationAccess() {
		return (pClosureDeclaration != null) ? pClosureDeclaration : (pClosureDeclaration = new ClosureDeclarationElements());
	}
	
	public ParserRule getClosureDeclarationRule() {
		return getClosureDeclarationAccess().getRule();
	}

	//ClosureParameter returns core::ClosureParameter:
	//	name=ID;
	public ClosureParameterElements getClosureParameterAccess() {
		return (pClosureParameter != null) ? pClosureParameter : (pClosureParameter = new ClosureParameterElements());
	}
	
	public ParserRule getClosureParameterRule() {
		return getClosureParameterAccess().getRule();
	}

	//MethodCall returns core::Expression:
	//	PrimaryExpression ({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression | (=>
	//	({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
	//	parameters+=Expression)* ")")?)+ | {core::KeywordMethodCall.receptor=current} "." parameters+=KeywordParameter+)?;
	public MethodCallElements getMethodCallAccess() {
		return (pMethodCall != null) ? pMethodCall : (pMethodCall = new MethodCallElements());
	}
	
	public ParserRule getMethodCallRule() {
		return getMethodCallAccess().getRule();
	}

	//KeywordParameter returns core::KeywordParameter:
	//	keyword=KEYWORD_ID value=Expression;
	public KeywordParameterElements getKeywordParameterAccess() {
		return (pKeywordParameter != null) ? pKeywordParameter : (pKeywordParameter = new KeywordParameterElements());
	}
	
	public ParserRule getKeywordParameterRule() {
		return getKeywordParameterAccess().getRule();
	}

	//terminal KEYWORD_ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")* ":";
	public TerminalRule getKEYWORD_IDRule() {
		return (tKEYWORD_ID != null) ? tKEYWORD_ID : (tKEYWORD_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "KEYWORD_ID"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//MatchTraceExpression returns core::MatchTrace:
	//	"match" (ID "!")? trace=[core::TraceDefinition] "with" "[" traceExpr=TraceExprLanguage "]";
	public MatchTraceExpressionElements getMatchTraceExpressionAccess() {
		return (pMatchTraceExpression != null) ? pMatchTraceExpression : (pMatchTraceExpression = new MatchTraceExpressionElements());
	}
	
	public ParserRule getMatchTraceExpressionRule() {
		return getMatchTraceExpressionAccess().getRule();
	}

	//// TODO: Resolve!! 
	//TraceExprLanguage returns core::TraceCompareExpression:
	//	traceVar=[core::TraceElement] "=" expr=Expression;
	public TraceExprLanguageElements getTraceExprLanguageAccess() {
		return (pTraceExprLanguage != null) ? pTraceExprLanguage : (pTraceExprLanguage = new TraceExprLanguageElements());
	}
	
	public ParserRule getTraceExprLanguageRule() {
		return getTraceExprLanguageAccess().getRule();
	}

	//PutTraceExpression returns core::PutTrace:
	//	"put" (ID "!")? trace=[core::TraceDefinition] "with" "[" parameters+=PutTraceParameter (","
	//	parameters+=PutTraceParameter)+ "]";
	public PutTraceExpressionElements getPutTraceExpressionAccess() {
		return (pPutTraceExpression != null) ? pPutTraceExpression : (pPutTraceExpression = new PutTraceExpressionElements());
	}
	
	public ParserRule getPutTraceExpressionRule() {
		return getPutTraceExpressionAccess().getRule();
	}

	//PutTraceParameter returns core::PutTraceParameter:
	//	traceVar=[core::TraceElement] "=" value=Expression;
	public PutTraceParameterElements getPutTraceParameterAccess() {
		return (pPutTraceParameter != null) ? pPutTraceParameter : (pPutTraceParameter = new PutTraceParameterElements());
	}
	
	public ParserRule getPutTraceParameterRule() {
		return getPutTraceParameterAccess().getRule();
	}

	/// *
	//MethodCall returns core::MethodCall:
	//	receptor=Expression "." methodName=EString
	//	("(" parameters+=Expression ("," parameters+=Expression)* ")")?
	//; 
	// * / / *
	// 
	// => indica precedencia
	//XMemberFeatureCall returns XExpression:
	//        XPrimaryExpression
	//        (=>({XAssignment.assignable=current} '.' feature=[types::JvmIdentifiableElement|ValidID] OpSingleAssign) value=XAssignment
	//        |=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|spreading?="*.")) 
	//                ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
	//                feature=[types::JvmIdentifiableElement|ValidID] (
	//                        =>explicitOperationCall?='(' 
	//                                (
	//                                    memberCallArguments+=XShortClosure
	//                                  |     memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	//                                )? 
	//                        ')')?
	//                )*;
	//
	//XPrimaryExpression returns XExpression:
	//        XConstructorCall |
	//        XBlockExpression |
	//        XSwitchExpression |
	//        XFeatureCall |
	//        XLiteral |
	//        XIfExpression |
	//        XForLoopExpression |
	//        XWhileExpression |
	//        XDoWhileExpression |
	//        XThrowExpression |
	//        XReturnExpression |
	//        XTryCatchFinallyExpression |
	//        XParenthesizedExpression;
	// * / NumLiteral returns core::NumLiteral:
	//	value=EInt;
	public NumLiteralElements getNumLiteralAccess() {
		return (pNumLiteral != null) ? pNumLiteral : (pNumLiteral = new NumLiteralElements());
	}
	
	public ParserRule getNumLiteralRule() {
		return getNumLiteralAccess().getRule();
	}

	//// End-of Core
	//KoanRule returns koan::KoanRule:
	//	"rule" name=EString matcher=Matcher statements+=Statement+ "end";
	public KoanRuleElements getKoanRuleAccess() {
		return (pKoanRule != null) ? pKoanRule : (pKoanRule = new KoanRuleElements());
	}
	
	public ParserRule getKoanRuleRule() {
		return getKoanRuleAccess().getRule();
	}

	//Matcher returns koan::Matcher:
	//	ForAllMatcher;
	public MatcherElements getMatcherAccess() {
		return (pMatcher != null) ? pMatcher : (pMatcher = new MatcherElements());
	}
	
	public ParserRule getMatcherRule() {
		return getMatcherAccess().getRule();
	}

	//ForAllMatcher returns koan::ForAllMatcher:
	//	"forAll" name=ID ":" type=ClassUse child=Matcher?;
	public ForAllMatcherElements getForAllMatcherAccess() {
		return (pForAllMatcher != null) ? pForAllMatcher : (pForAllMatcher = new ForAllMatcherElements());
	}
	
	public ParserRule getForAllMatcherRule() {
		return getForAllMatcherAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
