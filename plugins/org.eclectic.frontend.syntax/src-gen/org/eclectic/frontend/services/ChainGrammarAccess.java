/*
* generated by Xtext
*/

package org.eclectic.frontend.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ChainGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MappingTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInModelsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInModelsTransformationDefinitionParameterParserRuleCall_3_0 = (RuleCall)cInModelsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInModelsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInModelsTransformationDefinitionParameterParserRuleCall_4_1_0 = (RuleCall)cInModelsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOutModelsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOutModelsTransformationDefinitionParameterParserRuleCall_8_0 = (RuleCall)cOutModelsAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cOutModelsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cOutModelsTransformationDefinitionParameterParserRuleCall_9_1_0 = (RuleCall)cOutModelsAssignment_9_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cExternalsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cExternalsExternalTransformationParserRuleCall_11_0 = (RuleCall)cExternalsAssignment_11.eContents().get(0);
		private final Assignment cCompositesAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cCompositesCompositeTransformationParserRuleCall_12_0 = (RuleCall)cCompositesAssignment_12.eContents().get(0);
		private final Assignment cExecutionsAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cExecutionsTransformationExecutionParserRuleCall_13_0 = (RuleCall)cExecutionsAssignment_13.eContents().get(0);
		private final Keyword cEndKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		////import "platform:/resource/modelum.eclectic.compiler/model/family/eclectic.frontend.ecore#//frontend" as frontend
		//MappingTransformation returns chain::ChainTransformation:
		//	"chain" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
		//	//'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//	"(" inModels+=TransformationDefinitionParameter? ("," inModels+=TransformationDefinitionParameter)* ")" "->" "("
		//	outModels+=TransformationDefinitionParameter? ("," outModels+=TransformationDefinitionParameter)* ")"
		//	externals+=ExternalTransformation* // THIS IS NO LONGER NEEDED, BUT 
		//	composites+=CompositeTransformation* executions+=TransformationExecution+ "end";
		public ParserRule getRule() { return rule; }

		//"chain" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
		////'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//"(" inModels+=TransformationDefinitionParameter? ("," inModels+=TransformationDefinitionParameter)* ")" "->" "("
		//outModels+=TransformationDefinitionParameter? ("," outModels+=TransformationDefinitionParameter)* ")"
		//externals+=ExternalTransformation* // THIS IS NO LONGER NEEDED, BUT 
		//composites+=CompositeTransformation* executions+=TransformationExecution+ "end"
		public Group getGroup() { return cGroup; }

		//"chain"
		public Keyword getChainKeyword_0() { return cChainKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//// '(' left=[core::TransformationDefinitionParameter|EString] ')'
		////'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//inModels+=TransformationDefinitionParameter?
		public Assignment getInModelsAssignment_3() { return cInModelsAssignment_3; }

		//TransformationDefinitionParameter
		public RuleCall getInModelsTransformationDefinitionParameterParserRuleCall_3_0() { return cInModelsTransformationDefinitionParameterParserRuleCall_3_0; }

		//("," inModels+=TransformationDefinitionParameter)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//inModels+=TransformationDefinitionParameter
		public Assignment getInModelsAssignment_4_1() { return cInModelsAssignment_4_1; }

		//TransformationDefinitionParameter
		public RuleCall getInModelsTransformationDefinitionParameterParserRuleCall_4_1_0() { return cInModelsTransformationDefinitionParameterParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_6() { return cHyphenMinusGreaterThanSignKeyword_6; }

		//"("
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }

		//outModels+=TransformationDefinitionParameter?
		public Assignment getOutModelsAssignment_8() { return cOutModelsAssignment_8; }

		//TransformationDefinitionParameter
		public RuleCall getOutModelsTransformationDefinitionParameterParserRuleCall_8_0() { return cOutModelsTransformationDefinitionParameterParserRuleCall_8_0; }

		//("," outModels+=TransformationDefinitionParameter)*
		public Group getGroup_9() { return cGroup_9; }

		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }

		//outModels+=TransformationDefinitionParameter
		public Assignment getOutModelsAssignment_9_1() { return cOutModelsAssignment_9_1; }

		//TransformationDefinitionParameter
		public RuleCall getOutModelsTransformationDefinitionParameterParserRuleCall_9_1_0() { return cOutModelsTransformationDefinitionParameterParserRuleCall_9_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }

		//externals+=ExternalTransformation*
		public Assignment getExternalsAssignment_11() { return cExternalsAssignment_11; }

		//ExternalTransformation
		public RuleCall getExternalsExternalTransformationParserRuleCall_11_0() { return cExternalsExternalTransformationParserRuleCall_11_0; }

		//composites+=CompositeTransformation*
		public Assignment getCompositesAssignment_12() { return cCompositesAssignment_12; }

		//CompositeTransformation
		public RuleCall getCompositesCompositeTransformationParserRuleCall_12_0() { return cCompositesCompositeTransformationParserRuleCall_12_0; }

		//executions+=TransformationExecution+
		public Assignment getExecutionsAssignment_13() { return cExecutionsAssignment_13; }

		//TransformationExecution
		public RuleCall getExecutionsTransformationExecutionParserRuleCall_13_0() { return cExecutionsTransformationExecutionParserRuleCall_13_0; }

		//"end"
		public Keyword getEndKeyword_14() { return cEndKeyword_14; }
	}

	public class TransformationDefinitionParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransformationDefinitionParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransformationDefinitionParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// @common
		//TransformationDefinitionParameter returns core::TransformationDefinitionParameter:
		//	{core::TransformationDefinitionParameter} name=EString;
		public ParserRule getRule() { return rule; }

		//{core::TransformationDefinitionParameter} name=EString
		public Group getGroup() { return cGroup; }

		//{core::TransformationDefinitionParameter}
		public Action getTransformationDefinitionParameterAction_0() { return cTransformationDefinitionParameterAction_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class CompositeTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompositeTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompositeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInModelsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInModelsTransformationDefinitionParameterParserRuleCall_3_0 = (RuleCall)cInModelsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInModelsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInModelsTransformationDefinitionParameterParserRuleCall_4_1_0 = (RuleCall)cInModelsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOutModelsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOutModelsTransformationDefinitionParameterParserRuleCall_8_0 = (RuleCall)cOutModelsAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cOutModelsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cOutModelsTransformationDefinitionParameterParserRuleCall_9_1_0 = (RuleCall)cOutModelsAssignment_9_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cExecutionsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cExecutionsTransformationExecutionParserRuleCall_11_0 = (RuleCall)cExecutionsAssignment_11.eContents().get(0);
		private final Keyword cEndKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//// end-of-common
		//CompositeTransformation returns chain::CompositeTransformation:
		//	"composite" name=EString "(" inModels+=TransformationDefinitionParameter? (","
		//	inModels+=TransformationDefinitionParameter)* ")" "->" "(" outModels+=TransformationDefinitionParameter? (","
		//	outModels+=TransformationDefinitionParameter)* ")" executions+=TransformationExecution+ "end";
		public ParserRule getRule() { return rule; }

		//"composite" name=EString "(" inModels+=TransformationDefinitionParameter? (","
		//inModels+=TransformationDefinitionParameter)* ")" "->" "(" outModels+=TransformationDefinitionParameter? (","
		//outModels+=TransformationDefinitionParameter)* ")" executions+=TransformationExecution+ "end"
		public Group getGroup() { return cGroup; }

		//"composite"
		public Keyword getCompositeKeyword_0() { return cCompositeKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//inModels+=TransformationDefinitionParameter?
		public Assignment getInModelsAssignment_3() { return cInModelsAssignment_3; }

		//TransformationDefinitionParameter
		public RuleCall getInModelsTransformationDefinitionParameterParserRuleCall_3_0() { return cInModelsTransformationDefinitionParameterParserRuleCall_3_0; }

		//("," inModels+=TransformationDefinitionParameter)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//inModels+=TransformationDefinitionParameter
		public Assignment getInModelsAssignment_4_1() { return cInModelsAssignment_4_1; }

		//TransformationDefinitionParameter
		public RuleCall getInModelsTransformationDefinitionParameterParserRuleCall_4_1_0() { return cInModelsTransformationDefinitionParameterParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_6() { return cHyphenMinusGreaterThanSignKeyword_6; }

		//"("
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }

		//outModels+=TransformationDefinitionParameter?
		public Assignment getOutModelsAssignment_8() { return cOutModelsAssignment_8; }

		//TransformationDefinitionParameter
		public RuleCall getOutModelsTransformationDefinitionParameterParserRuleCall_8_0() { return cOutModelsTransformationDefinitionParameterParserRuleCall_8_0; }

		//("," outModels+=TransformationDefinitionParameter)*
		public Group getGroup_9() { return cGroup_9; }

		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }

		//outModels+=TransformationDefinitionParameter
		public Assignment getOutModelsAssignment_9_1() { return cOutModelsAssignment_9_1; }

		//TransformationDefinitionParameter
		public RuleCall getOutModelsTransformationDefinitionParameterParserRuleCall_9_1_0() { return cOutModelsTransformationDefinitionParameterParserRuleCall_9_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }

		//executions+=TransformationExecution+
		public Assignment getExecutionsAssignment_11() { return cExecutionsAssignment_11; }

		//TransformationExecution
		public RuleCall getExecutionsTransformationExecutionParserRuleCall_11_0() { return cExecutionsTransformationExecutionParserRuleCall_11_0; }

		//"end"
		public Keyword getEndKeyword_12() { return cEndKeyword_12; }
	}

	public class TransformationExecutionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransformationExecution");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOutputModelsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cOutputModelsRepresentModelCrossReference_0_0 = (CrossReference)cOutputModelsAssignment_0.eContents().get(0);
		private final RuleCall cOutputModelsRepresentModelIDTerminalRuleCall_0_0_1 = (RuleCall)cOutputModelsRepresentModelCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOutputModelsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cOutputModelsRepresentModelCrossReference_1_1_0 = (CrossReference)cOutputModelsAssignment_1_1.eContents().get(0);
		private final RuleCall cOutputModelsRepresentModelIDTerminalRuleCall_1_1_0_1 = (RuleCall)cOutputModelsRepresentModelCrossReference_1_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTransformationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTransformationAvailableTransformationCrossReference_3_0 = (CrossReference)cTransformationAssignment_3.eContents().get(0);
		private final RuleCall cTransformationAvailableTransformationIDTerminalRuleCall_3_0_1 = (RuleCall)cTransformationAvailableTransformationCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cInputModelsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cInputModelsRepresentModelCrossReference_5_0 = (CrossReference)cInputModelsAssignment_5.eContents().get(0);
		private final RuleCall cInputModelsRepresentModelIDTerminalRuleCall_5_0_1 = (RuleCall)cInputModelsRepresentModelCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cInputModelsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cInputModelsRepresentModelCrossReference_6_1_0 = (CrossReference)cInputModelsAssignment_6_1.eContents().get(0);
		private final RuleCall cInputModelsRepresentModelIDTerminalRuleCall_6_1_0_1 = (RuleCall)cInputModelsRepresentModelCrossReference_6_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//TransformationExecution returns chain::TransformationExecution:
		//	outputModels+=[core::RepresentModel] ("," outputModels+=[core::RepresentModel])* "="
		//	transformation=[chain::AvailableTransformation] "(" inputModels+=[core::RepresentModel] (","
		//	inputModels+=[core::RepresentModel])* ")";
		public ParserRule getRule() { return rule; }

		//outputModels+=[core::RepresentModel] ("," outputModels+=[core::RepresentModel])* "="
		//transformation=[chain::AvailableTransformation] "(" inputModels+=[core::RepresentModel] (","
		//inputModels+=[core::RepresentModel])* ")"
		public Group getGroup() { return cGroup; }

		//outputModels+=[core::RepresentModel]
		public Assignment getOutputModelsAssignment_0() { return cOutputModelsAssignment_0; }

		//[core::RepresentModel]
		public CrossReference getOutputModelsRepresentModelCrossReference_0_0() { return cOutputModelsRepresentModelCrossReference_0_0; }

		//ID
		public RuleCall getOutputModelsRepresentModelIDTerminalRuleCall_0_0_1() { return cOutputModelsRepresentModelIDTerminalRuleCall_0_0_1; }

		//("," outputModels+=[core::RepresentModel])*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//outputModels+=[core::RepresentModel]
		public Assignment getOutputModelsAssignment_1_1() { return cOutputModelsAssignment_1_1; }

		//[core::RepresentModel]
		public CrossReference getOutputModelsRepresentModelCrossReference_1_1_0() { return cOutputModelsRepresentModelCrossReference_1_1_0; }

		//ID
		public RuleCall getOutputModelsRepresentModelIDTerminalRuleCall_1_1_0_1() { return cOutputModelsRepresentModelIDTerminalRuleCall_1_1_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//transformation=[chain::AvailableTransformation]
		public Assignment getTransformationAssignment_3() { return cTransformationAssignment_3; }

		//[chain::AvailableTransformation]
		public CrossReference getTransformationAvailableTransformationCrossReference_3_0() { return cTransformationAvailableTransformationCrossReference_3_0; }

		//ID
		public RuleCall getTransformationAvailableTransformationIDTerminalRuleCall_3_0_1() { return cTransformationAvailableTransformationIDTerminalRuleCall_3_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//inputModels+=[core::RepresentModel]
		public Assignment getInputModelsAssignment_5() { return cInputModelsAssignment_5; }

		//[core::RepresentModel]
		public CrossReference getInputModelsRepresentModelCrossReference_5_0() { return cInputModelsRepresentModelCrossReference_5_0; }

		//ID
		public RuleCall getInputModelsRepresentModelIDTerminalRuleCall_5_0_1() { return cInputModelsRepresentModelIDTerminalRuleCall_5_0_1; }

		//("," inputModels+=[core::RepresentModel])*
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//inputModels+=[core::RepresentModel]
		public Assignment getInputModelsAssignment_6_1() { return cInputModelsAssignment_6_1; }

		//[core::RepresentModel]
		public CrossReference getInputModelsRepresentModelCrossReference_6_1_0() { return cInputModelsRepresentModelCrossReference_6_1_0; }

		//ID
		public RuleCall getInputModelsRepresentModelIDTerminalRuleCall_6_1_0_1() { return cInputModelsRepresentModelIDTerminalRuleCall_6_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class ExternalTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExternalTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExternalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ExternalTransformation returns chain::ExternalTransformation:
		//	"external" name=EString;
		public ParserRule getRule() { return rule; }

		//"external" name=EString
		public Group getGroup() { return cGroup; }

		//"external"
		public Keyword getExternalKeyword_0() { return cExternalKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Not sure if this has be factorized somewhere...
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private MappingTransformationElements pMappingTransformation;
	private TransformationDefinitionParameterElements pTransformationDefinitionParameter;
	private CompositeTransformationElements pCompositeTransformation;
	private TransformationExecutionElements pTransformationExecution;
	private ExternalTransformationElements pExternalTransformation;
	private EStringElements pEString;
	private EIntElements pEInt;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ChainGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////import "platform:/resource/modelum.eclectic.compiler/model/family/eclectic.frontend.ecore#//frontend" as frontend
	//MappingTransformation returns chain::ChainTransformation:
	//	"chain" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
	//	//'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
	//	"(" inModels+=TransformationDefinitionParameter? ("," inModels+=TransformationDefinitionParameter)* ")" "->" "("
	//	outModels+=TransformationDefinitionParameter? ("," outModels+=TransformationDefinitionParameter)* ")"
	//	externals+=ExternalTransformation* // THIS IS NO LONGER NEEDED, BUT 
	//	composites+=CompositeTransformation* executions+=TransformationExecution+ "end";
	public MappingTransformationElements getMappingTransformationAccess() {
		return (pMappingTransformation != null) ? pMappingTransformation : (pMappingTransformation = new MappingTransformationElements());
	}
	
	public ParserRule getMappingTransformationRule() {
		return getMappingTransformationAccess().getRule();
	}

	//// @common
	//TransformationDefinitionParameter returns core::TransformationDefinitionParameter:
	//	{core::TransformationDefinitionParameter} name=EString;
	public TransformationDefinitionParameterElements getTransformationDefinitionParameterAccess() {
		return (pTransformationDefinitionParameter != null) ? pTransformationDefinitionParameter : (pTransformationDefinitionParameter = new TransformationDefinitionParameterElements());
	}
	
	public ParserRule getTransformationDefinitionParameterRule() {
		return getTransformationDefinitionParameterAccess().getRule();
	}

	//// end-of-common
	//CompositeTransformation returns chain::CompositeTransformation:
	//	"composite" name=EString "(" inModels+=TransformationDefinitionParameter? (","
	//	inModels+=TransformationDefinitionParameter)* ")" "->" "(" outModels+=TransformationDefinitionParameter? (","
	//	outModels+=TransformationDefinitionParameter)* ")" executions+=TransformationExecution+ "end";
	public CompositeTransformationElements getCompositeTransformationAccess() {
		return (pCompositeTransformation != null) ? pCompositeTransformation : (pCompositeTransformation = new CompositeTransformationElements());
	}
	
	public ParserRule getCompositeTransformationRule() {
		return getCompositeTransformationAccess().getRule();
	}

	//TransformationExecution returns chain::TransformationExecution:
	//	outputModels+=[core::RepresentModel] ("," outputModels+=[core::RepresentModel])* "="
	//	transformation=[chain::AvailableTransformation] "(" inputModels+=[core::RepresentModel] (","
	//	inputModels+=[core::RepresentModel])* ")";
	public TransformationExecutionElements getTransformationExecutionAccess() {
		return (pTransformationExecution != null) ? pTransformationExecution : (pTransformationExecution = new TransformationExecutionElements());
	}
	
	public ParserRule getTransformationExecutionRule() {
		return getTransformationExecutionAccess().getRule();
	}

	//ExternalTransformation returns chain::ExternalTransformation:
	//	"external" name=EString;
	public ExternalTransformationElements getExternalTransformationAccess() {
		return (pExternalTransformation != null) ? pExternalTransformation : (pExternalTransformation = new ExternalTransformationElements());
	}
	
	public ParserRule getExternalTransformationRule() {
		return getExternalTransformationAccess().getRule();
	}

	//// Not sure if this has be factorized somewhere...
	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
