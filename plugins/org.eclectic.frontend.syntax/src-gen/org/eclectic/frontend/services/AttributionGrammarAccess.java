/*
* generated by Xtext
*/

package org.eclectic.frontend.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclectic.frontend.syntax.services.ExpressionsGrammarAccess;

@Singleton
public class AttributionGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AttributionTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributionTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInModelsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInModelsTransformationDefinitionParameterParserRuleCall_3_0 = (RuleCall)cInModelsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInModelsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInModelsTransformationDefinitionParameterParserRuleCall_4_1_0 = (RuleCall)cInModelsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOutModelsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOutModelsTransformationDefinitionParameterParserRuleCall_8_0 = (RuleCall)cOutModelsAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cInModelsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cInModelsTransformationDefinitionParameterParserRuleCall_9_1_0 = (RuleCall)cInModelsAssignment_9_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cAnnotationsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_11_0 = (RuleCall)cAnnotationsAssignment_11.eContents().get(0);
		private final Assignment cUsesAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cUsesUsesStatementsParserRuleCall_12_0 = (RuleCall)cUsesAssignment_12.eContents().get(0);
		private final Assignment cAttributesAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cAttributesAttributeDclParserRuleCall_13_0 = (RuleCall)cAttributesAssignment_13.eContents().get(0);
		private final Assignment cRulesAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cRulesAttributionRuleParserRuleCall_14_0 = (RuleCall)cRulesAssignment_14.eContents().get(0);
		private final Keyword cEndKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		////import "platform:/resource/modelum.eclectic.compiler/model/family/eclectic.frontend.ecore#//frontend" as frontend
		//AttributionTransformation returns attr::AttributionTransformation:
		//	"attribution" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
		//	//'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//	"(" inModels+=TransformationDefinitionParameter ("," inModels+=TransformationDefinitionParameter)* ")" "->" "("
		//	outModels+=TransformationDefinitionParameter? ("," inModels+=TransformationDefinitionParameter)* ")"
		//	annotations+=Annotation* // like this to resolve a reference: it is not the case
		//	//'(' right=[core::TransformationDefinitionParameter|EString] ')'
		//	// ('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		//	//('inModels' '{' inModels+=TransformationDefinitionParameter ( "," inModels+=TransformationDefinitionParameter)* '}' )?
		//	// ('outModels' '{' outModels+=TransformationDefinitionParameter ( "," outModels+=TransformationDefinitionParameter)* '}' )?
		//	// (traceInterface = TraceInterface)
		//	uses+=UsesStatements* attributes+=AttributeDcl* rules+=AttributionRule+ "end";
		public ParserRule getRule() { return rule; }

		//"attribution" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
		////'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//"(" inModels+=TransformationDefinitionParameter ("," inModels+=TransformationDefinitionParameter)* ")" "->" "("
		//outModels+=TransformationDefinitionParameter? ("," inModels+=TransformationDefinitionParameter)* ")"
		//annotations+=Annotation* // like this to resolve a reference: it is not the case
		////'(' right=[core::TransformationDefinitionParameter|EString] ')'
		//// ('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		////('inModels' '{' inModels+=TransformationDefinitionParameter ( "," inModels+=TransformationDefinitionParameter)* '}' )?
		//// ('outModels' '{' outModels+=TransformationDefinitionParameter ( "," outModels+=TransformationDefinitionParameter)* '}' )?
		//// (traceInterface = TraceInterface)
		//uses+=UsesStatements* attributes+=AttributeDcl* rules+=AttributionRule+ "end"
		public Group getGroup() { return cGroup; }

		//"attribution"
		public Keyword getAttributionKeyword_0() { return cAttributionKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//// '(' left=[core::TransformationDefinitionParameter|EString] ')'
		////'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//inModels+=TransformationDefinitionParameter
		public Assignment getInModelsAssignment_3() { return cInModelsAssignment_3; }

		//TransformationDefinitionParameter
		public RuleCall getInModelsTransformationDefinitionParameterParserRuleCall_3_0() { return cInModelsTransformationDefinitionParameterParserRuleCall_3_0; }

		//("," inModels+=TransformationDefinitionParameter)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//inModels+=TransformationDefinitionParameter
		public Assignment getInModelsAssignment_4_1() { return cInModelsAssignment_4_1; }

		//TransformationDefinitionParameter
		public RuleCall getInModelsTransformationDefinitionParameterParserRuleCall_4_1_0() { return cInModelsTransformationDefinitionParameterParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_6() { return cHyphenMinusGreaterThanSignKeyword_6; }

		//"("
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }

		//outModels+=TransformationDefinitionParameter?
		public Assignment getOutModelsAssignment_8() { return cOutModelsAssignment_8; }

		//TransformationDefinitionParameter
		public RuleCall getOutModelsTransformationDefinitionParameterParserRuleCall_8_0() { return cOutModelsTransformationDefinitionParameterParserRuleCall_8_0; }

		//("," inModels+=TransformationDefinitionParameter)*
		public Group getGroup_9() { return cGroup_9; }

		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }

		//inModels+=TransformationDefinitionParameter
		public Assignment getInModelsAssignment_9_1() { return cInModelsAssignment_9_1; }

		//TransformationDefinitionParameter
		public RuleCall getInModelsTransformationDefinitionParameterParserRuleCall_9_1_0() { return cInModelsTransformationDefinitionParameterParserRuleCall_9_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_11() { return cAnnotationsAssignment_11; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_11_0() { return cAnnotationsAnnotationParserRuleCall_11_0; }

		//uses+=UsesStatements*
		public Assignment getUsesAssignment_12() { return cUsesAssignment_12; }

		//UsesStatements
		public RuleCall getUsesUsesStatementsParserRuleCall_12_0() { return cUsesUsesStatementsParserRuleCall_12_0; }

		//attributes+=AttributeDcl*
		public Assignment getAttributesAssignment_13() { return cAttributesAssignment_13; }

		//AttributeDcl
		public RuleCall getAttributesAttributeDclParserRuleCall_13_0() { return cAttributesAttributeDclParserRuleCall_13_0; }

		//rules+=AttributionRule+
		public Assignment getRulesAssignment_14() { return cRulesAssignment_14; }

		//AttributionRule
		public RuleCall getRulesAttributionRuleParserRuleCall_14_0() { return cRulesAttributionRuleParserRuleCall_14_0; }

		//"end"
		public Keyword getEndKeyword_15() { return cEndKeyword_15; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final RuleCall cMetamodelModelAnnotationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// @common
		//Annotation returns core::Annotation:
		//	MetamodelModelAnnotation;
		public ParserRule getRule() { return rule; }

		//MetamodelModelAnnotation
		public RuleCall getMetamodelModelAnnotationParserRuleCall() { return cMetamodelModelAnnotationParserRuleCall; }
	}

	public class MetamodelModelAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetamodelModelAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotatedElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAnnotatedElementRepresentModelCrossReference_0_0 = (CrossReference)cAnnotatedElementAssignment_0.eContents().get(0);
		private final RuleCall cAnnotatedElementRepresentModelIDTerminalRuleCall_0_0_1 = (RuleCall)cAnnotatedElementRepresentModelCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMetamodelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMetamodelSTRINGTerminalRuleCall_2_0 = (RuleCall)cMetamodelAssignment_2.eContents().get(0);
		
		//MetamodelModelAnnotation returns core::MetamodelModelAnnotation:
		//	annotatedElement=[core::RepresentModel] ":" metamodel=STRING;
		public ParserRule getRule() { return rule; }

		//annotatedElement=[core::RepresentModel] ":" metamodel=STRING
		public Group getGroup() { return cGroup; }

		//annotatedElement=[core::RepresentModel]
		public Assignment getAnnotatedElementAssignment_0() { return cAnnotatedElementAssignment_0; }

		//[core::RepresentModel]
		public CrossReference getAnnotatedElementRepresentModelCrossReference_0_0() { return cAnnotatedElementRepresentModelCrossReference_0_0; }

		//ID
		public RuleCall getAnnotatedElementRepresentModelIDTerminalRuleCall_0_0_1() { return cAnnotatedElementRepresentModelIDTerminalRuleCall_0_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//metamodel=STRING
		public Assignment getMetamodelAssignment_2() { return cMetamodelAssignment_2; }

		//STRING
		public RuleCall getMetamodelSTRINGTerminalRuleCall_2_0() { return cMetamodelSTRINGTerminalRuleCall_2_0; }
	}

	public class TransformationDefinitionParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransformationDefinitionParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransformationDefinitionParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TransformationDefinitionParameter returns core::TransformationDefinitionParameter:
		//	{core::TransformationDefinitionParameter} name=EString;
		public ParserRule getRule() { return rule; }

		//{core::TransformationDefinitionParameter} name=EString
		public Group getGroup() { return cGroup; }

		//{core::TransformationDefinitionParameter}
		public Action getTransformationDefinitionParameterAction_0() { return cTransformationDefinitionParameterAction_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class ClassUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cModelRepresentModelCrossReference_0_0 = (CrossReference)cModelAssignment_0.eContents().get(0);
		private final RuleCall cModelRepresentModelIDTerminalRuleCall_0_0_1 = (RuleCall)cModelRepresentModelCrossReference_0_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassNameIDTerminalRuleCall_2_0 = (RuleCall)cClassNameAssignment_2.eContents().get(0);
		
		//ClassUse returns core::ClassUse:
		//	model=[core::RepresentModel] "!" className=ID;
		public ParserRule getRule() { return rule; }

		//model=[core::RepresentModel] "!" className=ID
		public Group getGroup() { return cGroup; }

		//model=[core::RepresentModel]
		public Assignment getModelAssignment_0() { return cModelAssignment_0; }

		//[core::RepresentModel]
		public CrossReference getModelRepresentModelCrossReference_0_0() { return cModelRepresentModelCrossReference_0_0; }

		//ID
		public RuleCall getModelRepresentModelIDTerminalRuleCall_0_0_1() { return cModelRepresentModelIDTerminalRuleCall_0_0_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }

		//className=ID
		public Assignment getClassNameAssignment_2() { return cClassNameAssignment_2; }

		//ID
		public RuleCall getClassNameIDTerminalRuleCall_2_0() { return cClassNameIDTerminalRuleCall_2_0; }
	}

	public class UsesStatementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UsesStatements");
		private final RuleCall cUseDeclarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UsesStatements returns core::UseDeclaration: // TODO: Allow several declarations together
		//	UseDeclaration;
		public ParserRule getRule() { return rule; }

		//// TODO: Allow several declarations together
		//UseDeclaration
		public RuleCall getUseDeclarationParserRuleCall() { return cUseDeclarationParserRuleCall; }
	}

	public class UseDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UseDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModuleEStringParserRuleCall_1_0 = (RuleCall)cModuleAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAsEStringParserRuleCall_2_1_0 = (RuleCall)cAsAssignment_2_1.eContents().get(0);
		
		//UseDeclaration returns core::UseDeclaration:
		//	"uses" module=EString ("as" ^as=EString)?;
		public ParserRule getRule() { return rule; }

		//"uses" module=EString ("as" ^as=EString)?
		public Group getGroup() { return cGroup; }

		//"uses"
		public Keyword getUsesKeyword_0() { return cUsesKeyword_0; }

		//module=EString
		public Assignment getModuleAssignment_1() { return cModuleAssignment_1; }

		//EString
		public RuleCall getModuleEStringParserRuleCall_1_0() { return cModuleEStringParserRuleCall_1_0; }

		//("as" ^as=EString)?
		public Group getGroup_2() { return cGroup_2; }

		//"as"
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//^as=EString
		public Assignment getAsAssignment_2_1() { return cAsAssignment_2_1; }

		//EString
		public RuleCall getAsEStringParserRuleCall_2_1_0() { return cAsEStringParserRuleCall_2_1_0; }
	}

	public class AttributeDclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeDcl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInheritedAttributeDclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSynthesizedAttributeDclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// End of @common
		//AttributeDcl returns attr::AttributeDcl:
		//	InheritedAttributeDcl | SynthesizedAttributeDcl;
		public ParserRule getRule() { return rule; }

		//InheritedAttributeDcl | SynthesizedAttributeDcl
		public Alternatives getAlternatives() { return cAlternatives; }

		//InheritedAttributeDcl
		public RuleCall getInheritedAttributeDclParserRuleCall_0() { return cInheritedAttributeDclParserRuleCall_0; }

		//SynthesizedAttributeDcl
		public RuleCall getSynthesizedAttributeDclParserRuleCall_1() { return cSynthesizedAttributeDclParserRuleCall_1; }
	}

	public class InheritedAttributeDclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InheritedAttributeDcl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInhKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cType_Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cType_ClassUseParserRuleCall_3_0 = (RuleCall)cType_Assignment_3.eContents().get(0);
		
		//InheritedAttributeDcl returns attr::InheritedAttributeDcl:
		//	"inh" name=ID ":" type_=ClassUse;
		public ParserRule getRule() { return rule; }

		//"inh" name=ID ":" type_=ClassUse
		public Group getGroup() { return cGroup; }

		//"inh"
		public Keyword getInhKeyword_0() { return cInhKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type_=ClassUse
		public Assignment getType_Assignment_3() { return cType_Assignment_3; }

		//ClassUse
		public RuleCall getType_ClassUseParserRuleCall_3_0() { return cType_ClassUseParserRuleCall_3_0; }
	}

	public class SynthesizedAttributeDclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SynthesizedAttributeDcl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSynKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cType_Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cType_ClassUseParserRuleCall_3_0 = (RuleCall)cType_Assignment_3.eContents().get(0);
		
		//SynthesizedAttributeDcl returns attr::SynthesizedAttributeDcl:
		//	"syn" name=ID ":" type_=ClassUse;
		public ParserRule getRule() { return rule; }

		//"syn" name=ID ":" type_=ClassUse
		public Group getGroup() { return cGroup; }

		//"syn"
		public Keyword getSynKeyword_0() { return cSynKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type_=ClassUse
		public Assignment getType_Assignment_3() { return cType_Assignment_3; }

		//ClassUse
		public RuleCall getType_ClassUseParserRuleCall_3_0() { return cType_ClassUseParserRuleCall_3_0; }
	}

	public class AttributionRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributionRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeClassUseParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AttributionRule returns attr::AttributionRule:
		//	"rule" type=ClassUse statements+=Statement+ //		("properties:"
		//	//		(statements+=PropertyWrite)+)? // It does not recognize property writes as parts of statements!
		//	"end";
		public ParserRule getRule() { return rule; }

		//"rule" type=ClassUse statements+=Statement+ //		("properties:"
		////		(statements+=PropertyWrite)+)? // It does not recognize property writes as parts of statements!
		//"end"
		public Group getGroup() { return cGroup; }

		//"rule"
		public Keyword getRuleKeyword_0() { return cRuleKeyword_0; }

		//type=ClassUse
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ClassUse
		public RuleCall getTypeClassUseParserRuleCall_1_0() { return cTypeClassUseParserRuleCall_1_0; }

		//statements+=Statement+
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }

		////		("properties:"
		////		(statements+=PropertyWrite)+)? // It does not recognize property writes as parts of statements!
		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefineVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeInitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPropertyWriteParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// redefine
		////| SynthesizedInit
		//Statement returns core::Statement:
		//	DefineVariable // | Expression // This is to avoid conflicts, but I don't think standalone expressions are really needed here
		//	| AttributeInit | PropertyWrite;
		public ParserRule getRule() { return rule; }

		//DefineVariable // | Expression // This is to avoid conflicts, but I don't think standalone expressions are really needed here
		//| AttributeInit | PropertyWrite
		public Alternatives getAlternatives() { return cAlternatives; }

		//DefineVariable
		public RuleCall getDefineVariableParserRuleCall_0() { return cDefineVariableParserRuleCall_0; }

		//AttributeInit
		public RuleCall getAttributeInitParserRuleCall_1() { return cAttributeInitParserRuleCall_1; }

		//PropertyWrite
		public RuleCall getPropertyWriteParserRuleCall_2() { return cPropertyWriteParserRuleCall_2; }
	}

	public class ClosureStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClosureStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefineVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyWriteParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAttributeInitParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// TODO: Allow normal expressions in closures... conflict currently
		//ClosureStatement returns core::Statement:
		//	DefineVariable // | Expression 
		//	| PropertyWrite | VariableReference | // Let's see if this compile and works...
		//	AttributeInit;
		public ParserRule getRule() { return rule; }

		//DefineVariable // | Expression 
		//| PropertyWrite | VariableReference | // Let's see if this compile and works...
		//AttributeInit
		public Alternatives getAlternatives() { return cAlternatives; }

		//DefineVariable
		public RuleCall getDefineVariableParserRuleCall_0() { return cDefineVariableParserRuleCall_0; }

		//PropertyWrite
		public RuleCall getPropertyWriteParserRuleCall_1() { return cPropertyWriteParserRuleCall_1; }

		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_2() { return cVariableReferenceParserRuleCall_2; }

		//// Let's see if this compile and works...
		//AttributeInit
		public RuleCall getAttributeInitParserRuleCall_3() { return cAttributeInitParserRuleCall_3; }
	}

	public class ClosureDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClosureDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFormalParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFormalParametersClosureParameterParserRuleCall_1_1_0 = (RuleCall)cFormalParametersAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cFormalParametersAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cFormalParametersClosureParameterParserRuleCall_1_2_1_0 = (RuleCall)cFormalParametersAssignment_1_2_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsClosureStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Redefined
		//ClosureDeclaration returns core::ClosureDeclaration:
		//	"{" ("|" formalParameters+=ClosureParameter ("," formalParameters+=ClosureParameter)* "|")?
		//	statements+=ClosureStatement+ "}";
		public ParserRule getRule() { return rule; }

		//"{" ("|" formalParameters+=ClosureParameter ("," formalParameters+=ClosureParameter)* "|")?
		//statements+=ClosureStatement+ "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//("|" formalParameters+=ClosureParameter ("," formalParameters+=ClosureParameter)* "|")?
		public Group getGroup_1() { return cGroup_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }

		//formalParameters+=ClosureParameter
		public Assignment getFormalParametersAssignment_1_1() { return cFormalParametersAssignment_1_1; }

		//ClosureParameter
		public RuleCall getFormalParametersClosureParameterParserRuleCall_1_1_0() { return cFormalParametersClosureParameterParserRuleCall_1_1_0; }

		//("," formalParameters+=ClosureParameter)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//formalParameters+=ClosureParameter
		public Assignment getFormalParametersAssignment_1_2_1() { return cFormalParametersAssignment_1_2_1; }

		//ClosureParameter
		public RuleCall getFormalParametersClosureParameterParserRuleCall_1_2_1_0() { return cFormalParametersClosureParameterParserRuleCall_1_2_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_3() { return cVerticalLineKeyword_1_3; }

		//statements+=ClosureStatement+
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//ClosureStatement
		public RuleCall getStatementsClosureStatementParserRuleCall_2_0() { return cStatementsClosureStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cModelReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cParenthesizedExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cClosureDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//// redefine
		////	| InheritedAttributeUse   // <-- added for attribution
		//// | SynthesizedAttributeUse // <-- added for attribution
		//PrimaryExpression returns core::Expression:
		//	Literal | VariableReference | ModelReference | ParenthesizedExpression | ClosureDeclaration;
		public ParserRule getRule() { return rule; }

		//Literal | VariableReference | ModelReference | ParenthesizedExpression | ClosureDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_1() { return cVariableReferenceParserRuleCall_1; }

		//ModelReference
		public RuleCall getModelReferenceParserRuleCall_2() { return cModelReferenceParserRuleCall_2; }

		//ParenthesizedExpression
		public RuleCall getParenthesizedExpressionParserRuleCall_3() { return cParenthesizedExpressionParserRuleCall_3; }

		//ClosureDeclaration
		public RuleCall getClosureDeclarationParserRuleCall_4() { return cClosureDeclarationParserRuleCall_4; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cMethodCallParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression returns core::Expression:
		//	MethodCall;
		public ParserRule getRule() { return rule; }

		//MethodCall
		public RuleCall getMethodCallParserRuleCall() { return cMethodCallParserRuleCall; }
	}

	public class InitiableExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InitiableExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVariableReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cVariableReferenceParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Action cMethodCallReceptorAction_1_1_0_0 = (Action)cGroup_1_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cMethodNameAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cMethodNameEStringParserRuleCall_1_1_2_0 = (RuleCall)cMethodNameAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Assignment cWithParametersAssignment_1_1_3_0 = (Assignment)cGroup_1_1_3.eContents().get(0);
		private final Keyword cWithParametersLeftParenthesisKeyword_1_1_3_0_0 = (Keyword)cWithParametersAssignment_1_1_3_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_1_1_3_1_0 = (RuleCall)cParametersAssignment_1_1_3_1.eContents().get(0);
		private final Group cGroup_1_1_3_2 = (Group)cGroup_1_1_3.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_3_2_0 = (Keyword)cGroup_1_1_3_2.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_3_2_1 = (Assignment)cGroup_1_1_3_2.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_1_1_3_2_1_0 = (RuleCall)cParametersAssignment_1_1_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_3_3 = (Keyword)cGroup_1_1_3.eContents().get(3);
		private final Assignment cParametersAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cParametersClosureDeclarationParserRuleCall_1_1_4_0 = (RuleCall)cParametersAssignment_1_1_4.eContents().get(0);
		
		//InitiableExpression returns core::Expression:
		//	VariableReference | VariableReference (=> ({core::MethodCall.receptor=current}) "." methodName=EString
		//	(withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)+;
		public ParserRule getRule() { return rule; }

		//VariableReference | VariableReference (=> ({core::MethodCall.receptor=current}) "." methodName=EString
		//(withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)+
		public Alternatives getAlternatives() { return cAlternatives; }

		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_0() { return cVariableReferenceParserRuleCall_0; }

		//VariableReference (=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="("
		//parameters+=Expression ("," parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)+
		public Group getGroup_1() { return cGroup_1; }

		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_1_0() { return cVariableReferenceParserRuleCall_1_0; }

		//(=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
		//parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({core::MethodCall.receptor=current})
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{core::MethodCall.receptor=current}
		public Action getMethodCallReceptorAction_1_1_0_0() { return cMethodCallReceptorAction_1_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_1_1() { return cFullStopKeyword_1_1_1; }

		//methodName=EString
		public Assignment getMethodNameAssignment_1_1_2() { return cMethodNameAssignment_1_1_2; }

		//EString
		public RuleCall getMethodNameEStringParserRuleCall_1_1_2_0() { return cMethodNameEStringParserRuleCall_1_1_2_0; }

		//(withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")")?
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }

		//withParameters?="("
		public Assignment getWithParametersAssignment_1_1_3_0() { return cWithParametersAssignment_1_1_3_0; }

		//"("
		public Keyword getWithParametersLeftParenthesisKeyword_1_1_3_0_0() { return cWithParametersLeftParenthesisKeyword_1_1_3_0_0; }

		//parameters+=Expression
		public Assignment getParametersAssignment_1_1_3_1() { return cParametersAssignment_1_1_3_1; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_1_1_3_1_0() { return cParametersExpressionParserRuleCall_1_1_3_1_0; }

		//("," parameters+=Expression)*
		public Group getGroup_1_1_3_2() { return cGroup_1_1_3_2; }

		//","
		public Keyword getCommaKeyword_1_1_3_2_0() { return cCommaKeyword_1_1_3_2_0; }

		//parameters+=Expression
		public Assignment getParametersAssignment_1_1_3_2_1() { return cParametersAssignment_1_1_3_2_1; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_1_1_3_2_1_0() { return cParametersExpressionParserRuleCall_1_1_3_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_3_3() { return cRightParenthesisKeyword_1_1_3_3; }

		//parameters+=ClosureDeclaration?
		public Assignment getParametersAssignment_1_1_4() { return cParametersAssignment_1_1_4; }

		//ClosureDeclaration
		public RuleCall getParametersClosureDeclarationParserRuleCall_1_1_4_0() { return cParametersClosureDeclarationParserRuleCall_1_1_4_0; }
	}

	public class MethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cBinaryOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cBinaryOpBinaryOpEnumRuleCall_1_0_1_0 = (RuleCall)cBinaryOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Action cAttributeUseExprAction_1_1_0_0 = (Action)cGroup_1_1_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_0_1 = (Keyword)cGroup_1_1_0.eContents().get(1);
		private final Assignment cAttributeAssignment_1_1_0_2 = (Assignment)cGroup_1_1_0.eContents().get(2);
		private final CrossReference cAttributeAttributeDclCrossReference_1_1_0_2_0 = (CrossReference)cAttributeAssignment_1_1_0_2.eContents().get(0);
		private final RuleCall cAttributeAttributeDclIDTerminalRuleCall_1_1_0_2_0_1 = (RuleCall)cAttributeAttributeDclCrossReference_1_1_0_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_1_0_3 = (Keyword)cGroup_1_1_0.eContents().get(3);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_1_1_0 = (Group)cGroup_1_1_1.eContents().get(0);
		private final Action cMethodCallReceptorAction_1_1_1_0_0 = (Action)cGroup_1_1_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		private final Assignment cMethodNameAssignment_1_1_1_2 = (Assignment)cGroup_1_1_1.eContents().get(2);
		private final RuleCall cMethodNameEStringParserRuleCall_1_1_1_2_0 = (RuleCall)cMethodNameAssignment_1_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_1_3 = (Group)cGroup_1_1_1.eContents().get(3);
		private final Assignment cWithParametersAssignment_1_1_1_3_0 = (Assignment)cGroup_1_1_1_3.eContents().get(0);
		private final Keyword cWithParametersLeftParenthesisKeyword_1_1_1_3_0_0 = (Keyword)cWithParametersAssignment_1_1_1_3_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_1_3_1 = (Assignment)cGroup_1_1_1_3.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_1_1_1_3_1_0 = (RuleCall)cParametersAssignment_1_1_1_3_1.eContents().get(0);
		private final Group cGroup_1_1_1_3_2 = (Group)cGroup_1_1_1_3.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_1_3_2_0 = (Keyword)cGroup_1_1_1_3_2.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_1_3_2_1 = (Assignment)cGroup_1_1_1_3_2.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_1_1_1_3_2_1_0 = (RuleCall)cParametersAssignment_1_1_1_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_1_3_3 = (Keyword)cGroup_1_1_1_3.eContents().get(3);
		private final Assignment cParametersAssignment_1_1_1_4 = (Assignment)cGroup_1_1_1.eContents().get(4);
		private final RuleCall cParametersClosureDeclarationParserRuleCall_1_1_1_4_0 = (RuleCall)cParametersAssignment_1_1_1_4.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cGroup_1_2.eContents().get(0);
		private final Group cGroup_1_2_0_0 = (Group)cGroup_1_2_0.eContents().get(0);
		private final Action cMethodCallReceptorAction_1_2_0_0_0 = (Action)cGroup_1_2_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_2_0_1 = (Keyword)cGroup_1_2_0.eContents().get(1);
		private final Assignment cMethodNameAssignment_1_2_0_2 = (Assignment)cGroup_1_2_0.eContents().get(2);
		private final RuleCall cMethodNameEStringParserRuleCall_1_2_0_2_0 = (RuleCall)cMethodNameAssignment_1_2_0_2.eContents().get(0);
		private final Group cGroup_1_2_0_3 = (Group)cGroup_1_2_0.eContents().get(3);
		private final Assignment cWithParametersAssignment_1_2_0_3_0 = (Assignment)cGroup_1_2_0_3.eContents().get(0);
		private final Keyword cWithParametersLeftParenthesisKeyword_1_2_0_3_0_0 = (Keyword)cWithParametersAssignment_1_2_0_3_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_2_0_3_1 = (Assignment)cGroup_1_2_0_3.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_1_2_0_3_1_0 = (RuleCall)cParametersAssignment_1_2_0_3_1.eContents().get(0);
		private final Group cGroup_1_2_0_3_2 = (Group)cGroup_1_2_0_3.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0_3_2_0 = (Keyword)cGroup_1_2_0_3_2.eContents().get(0);
		private final Assignment cParametersAssignment_1_2_0_3_2_1 = (Assignment)cGroup_1_2_0_3_2.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_1_2_0_3_2_1_0 = (RuleCall)cParametersAssignment_1_2_0_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_0_3_3 = (Keyword)cGroup_1_2_0_3.eContents().get(3);
		private final Assignment cParametersAssignment_1_2_0_4 = (Assignment)cGroup_1_2_0.eContents().get(4);
		private final RuleCall cParametersClosureDeclarationParserRuleCall_1_2_0_4_0 = (RuleCall)cParametersAssignment_1_2_0_4.eContents().get(0);
		private final Alternatives cAlternatives_1_2_1 = (Alternatives)cGroup_1_2.eContents().get(1);
		private final Group cGroup_1_2_1_0 = (Group)cAlternatives_1_2_1.eContents().get(0);
		private final Action cAttributeUseExprAction_1_2_1_0_0 = (Action)cGroup_1_2_1_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_2_1_0_1 = (Keyword)cGroup_1_2_1_0.eContents().get(1);
		private final Assignment cAttributeAssignment_1_2_1_0_2 = (Assignment)cGroup_1_2_1_0.eContents().get(2);
		private final CrossReference cAttributeAttributeDclCrossReference_1_2_1_0_2_0 = (CrossReference)cAttributeAssignment_1_2_1_0_2.eContents().get(0);
		private final RuleCall cAttributeAttributeDclIDTerminalRuleCall_1_2_1_0_2_0_1 = (RuleCall)cAttributeAttributeDclCrossReference_1_2_1_0_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2_1_0_3 = (Keyword)cGroup_1_2_1_0.eContents().get(3);
		private final Group cGroup_1_2_1_1 = (Group)cAlternatives_1_2_1.eContents().get(1);
		private final Action cResolveLinkExprAction_1_2_1_1_0 = (Action)cGroup_1_2_1_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_2_1_1_1 = (Keyword)cGroup_1_2_1_1.eContents().get(1);
		private final Assignment cModuleAssignment_1_2_1_1_2 = (Assignment)cGroup_1_2_1_1.eContents().get(2);
		private final CrossReference cModuleUseDeclarationCrossReference_1_2_1_1_2_0 = (CrossReference)cModuleAssignment_1_2_1_1_2.eContents().get(0);
		private final RuleCall cModuleUseDeclarationIDTerminalRuleCall_1_2_1_1_2_0_1 = (RuleCall)cModuleUseDeclarationCrossReference_1_2_1_1_2_0.eContents().get(1);
		private final Assignment cIsExternalAssignment_1_2_1_1_3 = (Assignment)cGroup_1_2_1_1.eContents().get(3);
		private final Keyword cIsExternalExclamationMarkKeyword_1_2_1_1_3_0 = (Keyword)cIsExternalAssignment_1_2_1_1_3.eContents().get(0);
		private final Assignment cLinkNameAssignment_1_2_1_1_4 = (Assignment)cGroup_1_2_1_1.eContents().get(4);
		private final RuleCall cLinkNameEStringParserRuleCall_1_2_1_1_4_0 = (RuleCall)cLinkNameAssignment_1_2_1_1_4.eContents().get(0);
		private final Group cGroup_1_2_1_1_5 = (Group)cGroup_1_2_1_1.eContents().get(5);
		private final Keyword cFullStopKeyword_1_2_1_1_5_0 = (Keyword)cGroup_1_2_1_1_5.eContents().get(0);
		private final Assignment cFeatureNameAssignment_1_2_1_1_5_1 = (Assignment)cGroup_1_2_1_1_5.eContents().get(1);
		private final RuleCall cFeatureNameEStringParserRuleCall_1_2_1_1_5_1_0 = (RuleCall)cFeatureNameAssignment_1_2_1_1_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_1_1_6 = (Keyword)cGroup_1_2_1_1.eContents().get(6);
		
		//MethodCall returns core::Expression:
		//	PrimaryExpression ({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression // to allow accessing attributes	
		//	| (({attr::AttributeUse.expr=current} "[" attribute=[attr::AttributeDcl] "]") (=> ({core::MethodCall.receptor=current})
		//	"." methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")")?
		//	parameters+=ClosureDeclaration?)?)+ | ((=> ({core::MethodCall.receptor=current}) "." methodName=EString
		//	(withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)
		//	({attr::AttributeUse.expr=current} "[" attribute=[attr::AttributeDcl] "]" | {core::ResolveLink.expr=current} "["
		//	module=[core::UseDeclaration] isExternal?="!" linkName=EString ("." featureName=EString)? "]")?)+)? // ? ( ({attr::AttributeUse.expr = current}) "[" attribute=[attr::AttributeDcl] "]" )?
		//;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression ({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression // to allow accessing attributes	
		//| (({attr::AttributeUse.expr=current} "[" attribute=[attr::AttributeDcl] "]") (=> ({core::MethodCall.receptor=current})
		//"." methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")")?
		//parameters+=ClosureDeclaration?)?)+ | ((=> ({core::MethodCall.receptor=current}) "." methodName=EString
		//(withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)
		//({attr::AttributeUse.expr=current} "[" attribute=[attr::AttributeDcl] "]" | {core::ResolveLink.expr=current} "["
		//module=[core::UseDeclaration] isExternal?="!" linkName=EString ("." featureName=EString)? "]")?)+)? // ? ( ({attr::AttributeUse.expr = current}) "[" attribute=[attr::AttributeDcl] "]" )?
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression // to allow accessing attributes	
		//| (({attr::AttributeUse.expr=current} "[" attribute=[attr::AttributeDcl] "]") (=> ({core::MethodCall.receptor=current})
		//"." methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")")?
		//parameters+=ClosureDeclaration?)?)+ | ((=> ({core::MethodCall.receptor=current}) "." methodName=EString
		//(withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)
		//({attr::AttributeUse.expr=current} "[" attribute=[attr::AttributeDcl] "]" | {core::ResolveLink.expr=current} "["
		//module=[core::UseDeclaration] isExternal?="!" linkName=EString ("." featureName=EString)? "]")?)+)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{core::BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0() { return cBinaryExprLeftAction_1_0_0; }

		//binaryOp=BinaryOp
		public Assignment getBinaryOpAssignment_1_0_1() { return cBinaryOpAssignment_1_0_1; }

		//BinaryOp
		public RuleCall getBinaryOpBinaryOpEnumRuleCall_1_0_1_0() { return cBinaryOpBinaryOpEnumRuleCall_1_0_1_0; }

		//right=Expression
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_0_2_0() { return cRightExpressionParserRuleCall_1_0_2_0; }

		//(({attr::AttributeUse.expr=current} "[" attribute=[attr::AttributeDcl] "]") (=> ({core::MethodCall.receptor=current})
		//"." methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")")?
		//parameters+=ClosureDeclaration?)?)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{attr::AttributeUse.expr=current} "[" attribute=[attr::AttributeDcl] "]"
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{attr::AttributeUse.expr=current}
		public Action getAttributeUseExprAction_1_1_0_0() { return cAttributeUseExprAction_1_1_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_0_1() { return cLeftSquareBracketKeyword_1_1_0_1; }

		//attribute=[attr::AttributeDcl]
		public Assignment getAttributeAssignment_1_1_0_2() { return cAttributeAssignment_1_1_0_2; }

		//[attr::AttributeDcl]
		public CrossReference getAttributeAttributeDclCrossReference_1_1_0_2_0() { return cAttributeAttributeDclCrossReference_1_1_0_2_0; }

		//ID
		public RuleCall getAttributeAttributeDclIDTerminalRuleCall_1_1_0_2_0_1() { return cAttributeAttributeDclIDTerminalRuleCall_1_1_0_2_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_0_3() { return cRightSquareBracketKeyword_1_1_0_3; }

		//(=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
		//parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//=> ({core::MethodCall.receptor=current})
		public Group getGroup_1_1_1_0() { return cGroup_1_1_1_0; }

		//{core::MethodCall.receptor=current}
		public Action getMethodCallReceptorAction_1_1_1_0_0() { return cMethodCallReceptorAction_1_1_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_1_1_1() { return cFullStopKeyword_1_1_1_1; }

		//methodName=EString
		public Assignment getMethodNameAssignment_1_1_1_2() { return cMethodNameAssignment_1_1_1_2; }

		//EString
		public RuleCall getMethodNameEStringParserRuleCall_1_1_1_2_0() { return cMethodNameEStringParserRuleCall_1_1_1_2_0; }

		//(withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")")?
		public Group getGroup_1_1_1_3() { return cGroup_1_1_1_3; }

		//withParameters?="("
		public Assignment getWithParametersAssignment_1_1_1_3_0() { return cWithParametersAssignment_1_1_1_3_0; }

		//"("
		public Keyword getWithParametersLeftParenthesisKeyword_1_1_1_3_0_0() { return cWithParametersLeftParenthesisKeyword_1_1_1_3_0_0; }

		//parameters+=Expression
		public Assignment getParametersAssignment_1_1_1_3_1() { return cParametersAssignment_1_1_1_3_1; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_1_1_1_3_1_0() { return cParametersExpressionParserRuleCall_1_1_1_3_1_0; }

		//("," parameters+=Expression)*
		public Group getGroup_1_1_1_3_2() { return cGroup_1_1_1_3_2; }

		//","
		public Keyword getCommaKeyword_1_1_1_3_2_0() { return cCommaKeyword_1_1_1_3_2_0; }

		//parameters+=Expression
		public Assignment getParametersAssignment_1_1_1_3_2_1() { return cParametersAssignment_1_1_1_3_2_1; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_1_1_1_3_2_1_0() { return cParametersExpressionParserRuleCall_1_1_1_3_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_1_3_3() { return cRightParenthesisKeyword_1_1_1_3_3; }

		//parameters+=ClosureDeclaration?
		public Assignment getParametersAssignment_1_1_1_4() { return cParametersAssignment_1_1_1_4; }

		//ClosureDeclaration
		public RuleCall getParametersClosureDeclarationParserRuleCall_1_1_1_4_0() { return cParametersClosureDeclarationParserRuleCall_1_1_1_4_0; }

		//((=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
		//parameters+=Expression)* ")")? parameters+=ClosureDeclaration?) ({attr::AttributeUse.expr=current} "["
		//attribute=[attr::AttributeDcl] "]" | {core::ResolveLink.expr=current} "[" module=[core::UseDeclaration] isExternal?="!"
		//linkName=EString ("." featureName=EString)? "]")?)+
		public Group getGroup_1_2() { return cGroup_1_2; }

		//=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
		//parameters+=Expression)* ")")? parameters+=ClosureDeclaration?
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }

		//=> ({core::MethodCall.receptor=current})
		public Group getGroup_1_2_0_0() { return cGroup_1_2_0_0; }

		//{core::MethodCall.receptor=current}
		public Action getMethodCallReceptorAction_1_2_0_0_0() { return cMethodCallReceptorAction_1_2_0_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_2_0_1() { return cFullStopKeyword_1_2_0_1; }

		//methodName=EString
		public Assignment getMethodNameAssignment_1_2_0_2() { return cMethodNameAssignment_1_2_0_2; }

		//EString
		public RuleCall getMethodNameEStringParserRuleCall_1_2_0_2_0() { return cMethodNameEStringParserRuleCall_1_2_0_2_0; }

		//(withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")")?
		public Group getGroup_1_2_0_3() { return cGroup_1_2_0_3; }

		//withParameters?="("
		public Assignment getWithParametersAssignment_1_2_0_3_0() { return cWithParametersAssignment_1_2_0_3_0; }

		//"("
		public Keyword getWithParametersLeftParenthesisKeyword_1_2_0_3_0_0() { return cWithParametersLeftParenthesisKeyword_1_2_0_3_0_0; }

		//parameters+=Expression
		public Assignment getParametersAssignment_1_2_0_3_1() { return cParametersAssignment_1_2_0_3_1; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_1_2_0_3_1_0() { return cParametersExpressionParserRuleCall_1_2_0_3_1_0; }

		//("," parameters+=Expression)*
		public Group getGroup_1_2_0_3_2() { return cGroup_1_2_0_3_2; }

		//","
		public Keyword getCommaKeyword_1_2_0_3_2_0() { return cCommaKeyword_1_2_0_3_2_0; }

		//parameters+=Expression
		public Assignment getParametersAssignment_1_2_0_3_2_1() { return cParametersAssignment_1_2_0_3_2_1; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_1_2_0_3_2_1_0() { return cParametersExpressionParserRuleCall_1_2_0_3_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2_0_3_3() { return cRightParenthesisKeyword_1_2_0_3_3; }

		//parameters+=ClosureDeclaration?
		public Assignment getParametersAssignment_1_2_0_4() { return cParametersAssignment_1_2_0_4; }

		//ClosureDeclaration
		public RuleCall getParametersClosureDeclarationParserRuleCall_1_2_0_4_0() { return cParametersClosureDeclarationParserRuleCall_1_2_0_4_0; }

		//({attr::AttributeUse.expr=current} "[" attribute=[attr::AttributeDcl] "]" | {core::ResolveLink.expr=current} "["
		//module=[core::UseDeclaration] isExternal?="!" linkName=EString ("." featureName=EString)? "]")?
		public Alternatives getAlternatives_1_2_1() { return cAlternatives_1_2_1; }

		//{attr::AttributeUse.expr=current} "[" attribute=[attr::AttributeDcl] "]"
		public Group getGroup_1_2_1_0() { return cGroup_1_2_1_0; }

		//{attr::AttributeUse.expr=current}
		public Action getAttributeUseExprAction_1_2_1_0_0() { return cAttributeUseExprAction_1_2_1_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2_1_0_1() { return cLeftSquareBracketKeyword_1_2_1_0_1; }

		//attribute=[attr::AttributeDcl]
		public Assignment getAttributeAssignment_1_2_1_0_2() { return cAttributeAssignment_1_2_1_0_2; }

		//[attr::AttributeDcl]
		public CrossReference getAttributeAttributeDclCrossReference_1_2_1_0_2_0() { return cAttributeAttributeDclCrossReference_1_2_1_0_2_0; }

		//ID
		public RuleCall getAttributeAttributeDclIDTerminalRuleCall_1_2_1_0_2_0_1() { return cAttributeAttributeDclIDTerminalRuleCall_1_2_1_0_2_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2_1_0_3() { return cRightSquareBracketKeyword_1_2_1_0_3; }

		//{core::ResolveLink.expr=current} "[" module=[core::UseDeclaration] isExternal?="!" linkName=EString ("."
		//featureName=EString)? "]"
		public Group getGroup_1_2_1_1() { return cGroup_1_2_1_1; }

		//{core::ResolveLink.expr=current}
		public Action getResolveLinkExprAction_1_2_1_1_0() { return cResolveLinkExprAction_1_2_1_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2_1_1_1() { return cLeftSquareBracketKeyword_1_2_1_1_1; }

		//module=[core::UseDeclaration]
		public Assignment getModuleAssignment_1_2_1_1_2() { return cModuleAssignment_1_2_1_1_2; }

		//[core::UseDeclaration]
		public CrossReference getModuleUseDeclarationCrossReference_1_2_1_1_2_0() { return cModuleUseDeclarationCrossReference_1_2_1_1_2_0; }

		//ID
		public RuleCall getModuleUseDeclarationIDTerminalRuleCall_1_2_1_1_2_0_1() { return cModuleUseDeclarationIDTerminalRuleCall_1_2_1_1_2_0_1; }

		//isExternal?="!"
		public Assignment getIsExternalAssignment_1_2_1_1_3() { return cIsExternalAssignment_1_2_1_1_3; }

		//"!"
		public Keyword getIsExternalExclamationMarkKeyword_1_2_1_1_3_0() { return cIsExternalExclamationMarkKeyword_1_2_1_1_3_0; }

		//linkName=EString
		public Assignment getLinkNameAssignment_1_2_1_1_4() { return cLinkNameAssignment_1_2_1_1_4; }

		//EString
		public RuleCall getLinkNameEStringParserRuleCall_1_2_1_1_4_0() { return cLinkNameEStringParserRuleCall_1_2_1_1_4_0; }

		//("." featureName=EString)?
		public Group getGroup_1_2_1_1_5() { return cGroup_1_2_1_1_5; }

		//"."
		public Keyword getFullStopKeyword_1_2_1_1_5_0() { return cFullStopKeyword_1_2_1_1_5_0; }

		//featureName=EString
		public Assignment getFeatureNameAssignment_1_2_1_1_5_1() { return cFeatureNameAssignment_1_2_1_1_5_1; }

		//EString
		public RuleCall getFeatureNameEStringParserRuleCall_1_2_1_1_5_1_0() { return cFeatureNameEStringParserRuleCall_1_2_1_1_5_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2_1_1_6() { return cRightSquareBracketKeyword_1_2_1_1_6; }
	}

	public class AttributeInitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttributeInit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReceptorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReceptorInitiableExpressionParserRuleCall_0_0 = (RuleCall)cReceptorAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAttributeAttributeDclCrossReference_2_0 = (CrossReference)cAttributeAssignment_2.eContents().get(0);
		private final RuleCall cAttributeAttributeDclIDTerminalRuleCall_2_0_1 = (RuleCall)cAttributeAttributeDclCrossReference_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLessThanSignHyphenMinusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRightAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRightExpressionParserRuleCall_5_0 = (RuleCall)cRightAssignment_5.eContents().get(0);
		
		////SynthesizedInit returns attr::SynthesizedInit: 
		////	"self" "[" attribute=[attr::SynthesizedAttributeDcl] "]" "<-" right=Expression
		////;
		////InheritedAttributeUse returns attr::InheritedAttributeUse: 
		////	"self" "[" attribute=[attr::InheritedAttributeDcl] "]"
		////;
		/// *
		//SynthesizedAttributeUse returns attr::SynthesizedAttributeUse: 
		//	expr=Expression "[" attribute=[attr::SynthesizedAttributeDcl] "]"
		//;
		// * / AttributeInit returns attr::AttributeInit:
		//	receptor=InitiableExpression "[" attribute=[attr::AttributeDcl] "]" "<-" right=Expression;
		public ParserRule getRule() { return rule; }

		//receptor=InitiableExpression "[" attribute=[attr::AttributeDcl] "]" "<-" right=Expression
		public Group getGroup() { return cGroup; }

		//receptor=InitiableExpression
		public Assignment getReceptorAssignment_0() { return cReceptorAssignment_0; }

		//InitiableExpression
		public RuleCall getReceptorInitiableExpressionParserRuleCall_0_0() { return cReceptorInitiableExpressionParserRuleCall_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//attribute=[attr::AttributeDcl]
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }

		//[attr::AttributeDcl]
		public CrossReference getAttributeAttributeDclCrossReference_2_0() { return cAttributeAttributeDclCrossReference_2_0; }

		//ID
		public RuleCall getAttributeAttributeDclIDTerminalRuleCall_2_0_1() { return cAttributeAttributeDclIDTerminalRuleCall_2_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_4() { return cLessThanSignHyphenMinusKeyword_4; }

		//right=Expression
		public Assignment getRightAssignment_5() { return cRightAssignment_5; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_5_0() { return cRightExpressionParserRuleCall_5_0; }
	}
	
	
	private AttributionTransformationElements pAttributionTransformation;
	private AnnotationElements pAnnotation;
	private MetamodelModelAnnotationElements pMetamodelModelAnnotation;
	private TransformationDefinitionParameterElements pTransformationDefinitionParameter;
	private ClassUseElements pClassUse;
	private UsesStatementsElements pUsesStatements;
	private UseDeclarationElements pUseDeclaration;
	private AttributeDclElements pAttributeDcl;
	private InheritedAttributeDclElements pInheritedAttributeDcl;
	private SynthesizedAttributeDclElements pSynthesizedAttributeDcl;
	private AttributionRuleElements pAttributionRule;
	private StatementElements pStatement;
	private ClosureStatementElements pClosureStatement;
	private ClosureDeclarationElements pClosureDeclaration;
	private PrimaryExpressionElements pPrimaryExpression;
	private ExpressionElements pExpression;
	private InitiableExpressionElements pInitiableExpression;
	private MethodCallElements pMethodCall;
	private AttributeInitElements pAttributeInit;
	
	private final GrammarProvider grammarProvider;

	private ExpressionsGrammarAccess gaExpressions;

	@Inject
	public AttributionGrammarAccess(GrammarProvider grammarProvider,
		ExpressionsGrammarAccess gaExpressions) {
		this.grammarProvider = grammarProvider;
		this.gaExpressions = gaExpressions;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public ExpressionsGrammarAccess getExpressionsGrammarAccess() {
		return gaExpressions;
	}

	
	////import "platform:/resource/modelum.eclectic.compiler/model/family/eclectic.frontend.ecore#//frontend" as frontend
	//AttributionTransformation returns attr::AttributionTransformation:
	//	"attribution" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
	//	//'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
	//	"(" inModels+=TransformationDefinitionParameter ("," inModels+=TransformationDefinitionParameter)* ")" "->" "("
	//	outModels+=TransformationDefinitionParameter? ("," inModels+=TransformationDefinitionParameter)* ")"
	//	annotations+=Annotation* // like this to resolve a reference: it is not the case
	//	//'(' right=[core::TransformationDefinitionParameter|EString] ')'
	//	// ('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
	//	//('inModels' '{' inModels+=TransformationDefinitionParameter ( "," inModels+=TransformationDefinitionParameter)* '}' )?
	//	// ('outModels' '{' outModels+=TransformationDefinitionParameter ( "," outModels+=TransformationDefinitionParameter)* '}' )?
	//	// (traceInterface = TraceInterface)
	//	uses+=UsesStatements* attributes+=AttributeDcl* rules+=AttributionRule+ "end";
	public AttributionTransformationElements getAttributionTransformationAccess() {
		return (pAttributionTransformation != null) ? pAttributionTransformation : (pAttributionTransformation = new AttributionTransformationElements());
	}
	
	public ParserRule getAttributionTransformationRule() {
		return getAttributionTransformationAccess().getRule();
	}

	//// @common
	//Annotation returns core::Annotation:
	//	MetamodelModelAnnotation;
	public AnnotationElements getAnnotationAccess() {
		return (pAnnotation != null) ? pAnnotation : (pAnnotation = new AnnotationElements());
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//MetamodelModelAnnotation returns core::MetamodelModelAnnotation:
	//	annotatedElement=[core::RepresentModel] ":" metamodel=STRING;
	public MetamodelModelAnnotationElements getMetamodelModelAnnotationAccess() {
		return (pMetamodelModelAnnotation != null) ? pMetamodelModelAnnotation : (pMetamodelModelAnnotation = new MetamodelModelAnnotationElements());
	}
	
	public ParserRule getMetamodelModelAnnotationRule() {
		return getMetamodelModelAnnotationAccess().getRule();
	}

	//TransformationDefinitionParameter returns core::TransformationDefinitionParameter:
	//	{core::TransformationDefinitionParameter} name=EString;
	public TransformationDefinitionParameterElements getTransformationDefinitionParameterAccess() {
		return (pTransformationDefinitionParameter != null) ? pTransformationDefinitionParameter : (pTransformationDefinitionParameter = new TransformationDefinitionParameterElements());
	}
	
	public ParserRule getTransformationDefinitionParameterRule() {
		return getTransformationDefinitionParameterAccess().getRule();
	}

	//ClassUse returns core::ClassUse:
	//	model=[core::RepresentModel] "!" className=ID;
	public ClassUseElements getClassUseAccess() {
		return (pClassUse != null) ? pClassUse : (pClassUse = new ClassUseElements());
	}
	
	public ParserRule getClassUseRule() {
		return getClassUseAccess().getRule();
	}

	//UsesStatements returns core::UseDeclaration: // TODO: Allow several declarations together
	//	UseDeclaration;
	public UsesStatementsElements getUsesStatementsAccess() {
		return (pUsesStatements != null) ? pUsesStatements : (pUsesStatements = new UsesStatementsElements());
	}
	
	public ParserRule getUsesStatementsRule() {
		return getUsesStatementsAccess().getRule();
	}

	//UseDeclaration returns core::UseDeclaration:
	//	"uses" module=EString ("as" ^as=EString)?;
	public UseDeclarationElements getUseDeclarationAccess() {
		return (pUseDeclaration != null) ? pUseDeclaration : (pUseDeclaration = new UseDeclarationElements());
	}
	
	public ParserRule getUseDeclarationRule() {
		return getUseDeclarationAccess().getRule();
	}

	//// End of @common
	//AttributeDcl returns attr::AttributeDcl:
	//	InheritedAttributeDcl | SynthesizedAttributeDcl;
	public AttributeDclElements getAttributeDclAccess() {
		return (pAttributeDcl != null) ? pAttributeDcl : (pAttributeDcl = new AttributeDclElements());
	}
	
	public ParserRule getAttributeDclRule() {
		return getAttributeDclAccess().getRule();
	}

	//InheritedAttributeDcl returns attr::InheritedAttributeDcl:
	//	"inh" name=ID ":" type_=ClassUse;
	public InheritedAttributeDclElements getInheritedAttributeDclAccess() {
		return (pInheritedAttributeDcl != null) ? pInheritedAttributeDcl : (pInheritedAttributeDcl = new InheritedAttributeDclElements());
	}
	
	public ParserRule getInheritedAttributeDclRule() {
		return getInheritedAttributeDclAccess().getRule();
	}

	//SynthesizedAttributeDcl returns attr::SynthesizedAttributeDcl:
	//	"syn" name=ID ":" type_=ClassUse;
	public SynthesizedAttributeDclElements getSynthesizedAttributeDclAccess() {
		return (pSynthesizedAttributeDcl != null) ? pSynthesizedAttributeDcl : (pSynthesizedAttributeDcl = new SynthesizedAttributeDclElements());
	}
	
	public ParserRule getSynthesizedAttributeDclRule() {
		return getSynthesizedAttributeDclAccess().getRule();
	}

	//AttributionRule returns attr::AttributionRule:
	//	"rule" type=ClassUse statements+=Statement+ //		("properties:"
	//	//		(statements+=PropertyWrite)+)? // It does not recognize property writes as parts of statements!
	//	"end";
	public AttributionRuleElements getAttributionRuleAccess() {
		return (pAttributionRule != null) ? pAttributionRule : (pAttributionRule = new AttributionRuleElements());
	}
	
	public ParserRule getAttributionRuleRule() {
		return getAttributionRuleAccess().getRule();
	}

	//// redefine
	////| SynthesizedInit
	//Statement returns core::Statement:
	//	DefineVariable // | Expression // This is to avoid conflicts, but I don't think standalone expressions are really needed here
	//	| AttributeInit | PropertyWrite;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//// TODO: Allow normal expressions in closures... conflict currently
	//ClosureStatement returns core::Statement:
	//	DefineVariable // | Expression 
	//	| PropertyWrite | VariableReference | // Let's see if this compile and works...
	//	AttributeInit;
	public ClosureStatementElements getClosureStatementAccess() {
		return (pClosureStatement != null) ? pClosureStatement : (pClosureStatement = new ClosureStatementElements());
	}
	
	public ParserRule getClosureStatementRule() {
		return getClosureStatementAccess().getRule();
	}

	//// Redefined
	//ClosureDeclaration returns core::ClosureDeclaration:
	//	"{" ("|" formalParameters+=ClosureParameter ("," formalParameters+=ClosureParameter)* "|")?
	//	statements+=ClosureStatement+ "}";
	public ClosureDeclarationElements getClosureDeclarationAccess() {
		return (pClosureDeclaration != null) ? pClosureDeclaration : (pClosureDeclaration = new ClosureDeclarationElements());
	}
	
	public ParserRule getClosureDeclarationRule() {
		return getClosureDeclarationAccess().getRule();
	}

	//// redefine
	////	| InheritedAttributeUse   // <-- added for attribution
	//// | SynthesizedAttributeUse // <-- added for attribution
	//PrimaryExpression returns core::Expression:
	//	Literal | VariableReference | ModelReference | ParenthesizedExpression | ClosureDeclaration;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//Expression returns core::Expression:
	//	MethodCall;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//InitiableExpression returns core::Expression:
	//	VariableReference | VariableReference (=> ({core::MethodCall.receptor=current}) "." methodName=EString
	//	(withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)+;
	public InitiableExpressionElements getInitiableExpressionAccess() {
		return (pInitiableExpression != null) ? pInitiableExpression : (pInitiableExpression = new InitiableExpressionElements());
	}
	
	public ParserRule getInitiableExpressionRule() {
		return getInitiableExpressionAccess().getRule();
	}

	//MethodCall returns core::Expression:
	//	PrimaryExpression ({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression // to allow accessing attributes	
	//	| (({attr::AttributeUse.expr=current} "[" attribute=[attr::AttributeDcl] "]") (=> ({core::MethodCall.receptor=current})
	//	"." methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")")?
	//	parameters+=ClosureDeclaration?)?)+ | ((=> ({core::MethodCall.receptor=current}) "." methodName=EString
	//	(withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)
	//	({attr::AttributeUse.expr=current} "[" attribute=[attr::AttributeDcl] "]" | {core::ResolveLink.expr=current} "["
	//	module=[core::UseDeclaration] isExternal?="!" linkName=EString ("." featureName=EString)? "]")?)+)? // ? ( ({attr::AttributeUse.expr = current}) "[" attribute=[attr::AttributeDcl] "]" )?
	//;
	public MethodCallElements getMethodCallAccess() {
		return (pMethodCall != null) ? pMethodCall : (pMethodCall = new MethodCallElements());
	}
	
	public ParserRule getMethodCallRule() {
		return getMethodCallAccess().getRule();
	}

	////SynthesizedInit returns attr::SynthesizedInit: 
	////	"self" "[" attribute=[attr::SynthesizedAttributeDcl] "]" "<-" right=Expression
	////;
	////InheritedAttributeUse returns attr::InheritedAttributeUse: 
	////	"self" "[" attribute=[attr::InheritedAttributeDcl] "]"
	////;
	/// *
	//SynthesizedAttributeUse returns attr::SynthesizedAttributeUse: 
	//	expr=Expression "[" attribute=[attr::SynthesizedAttributeDcl] "]"
	//;
	// * / AttributeInit returns attr::AttributeInit:
	//	receptor=InitiableExpression "[" attribute=[attr::AttributeDcl] "]" "<-" right=Expression;
	public AttributeInitElements getAttributeInitAccess() {
		return (pAttributeInit != null) ? pAttributeInit : (pAttributeInit = new AttributeInitElements());
	}
	
	public ParserRule getAttributeInitRule() {
		return getAttributeInitAccess().getRule();
	}

	//// Begin-of Core
	//TraceInterface returns core::TraceInterface:
	//	"trace" name=EString definitions+=TraceDefinition+ "end";
	public ExpressionsGrammarAccess.TraceInterfaceElements getTraceInterfaceAccess() {
		return gaExpressions.getTraceInterfaceAccess();
	}
	
	public ParserRule getTraceInterfaceRule() {
		return getTraceInterfaceAccess().getRule();
	}

	//TraceDefinition returns core::TraceDefinition:
	//	"link" name=EString ("{" elements+=TraceElementInline (";" elements+=TraceElementInline)* "}" |
	//	elements+=TraceElementExpanded elements+=TraceElementExpanded* "end");
	public ExpressionsGrammarAccess.TraceDefinitionElements getTraceDefinitionAccess() {
		return gaExpressions.getTraceDefinitionAccess();
	}
	
	public ParserRule getTraceDefinitionRule() {
		return getTraceDefinitionAccess().getRule();
	}

	//TraceElementInline returns core::TraceElement:
	//	name=EString ":" type=TypeExpression;
	public ExpressionsGrammarAccess.TraceElementInlineElements getTraceElementInlineAccess() {
		return gaExpressions.getTraceElementInlineAccess();
	}
	
	public ParserRule getTraceElementInlineRule() {
		return getTraceElementInlineAccess().getRule();
	}

	//TraceElementExpanded returns core::TraceElement:
	//	"var" name=EString ":" type=TypeExpression;
	public ExpressionsGrammarAccess.TraceElementExpandedElements getTraceElementExpandedAccess() {
		return gaExpressions.getTraceElementExpandedAccess();
	}
	
	public ParserRule getTraceElementExpandedRule() {
		return getTraceElementExpandedAccess().getRule();
	}

	//TypeExpression returns core::TypeExpression:
	//	ClassUse;
	public ExpressionsGrammarAccess.TypeExpressionElements getTypeExpressionAccess() {
		return gaExpressions.getTypeExpressionAccess();
	}
	
	public ParserRule getTypeExpressionRule() {
		return getTypeExpressionAccess().getRule();
	}

	//SingleAnnotation returns core::SingleAnnotation:
	//	PotencyAnnotation;
	public ExpressionsGrammarAccess.SingleAnnotationElements getSingleAnnotationAccess() {
		return gaExpressions.getSingleAnnotationAccess();
	}
	
	public ParserRule getSingleAnnotationRule() {
		return getSingleAnnotationAccess().getRule();
	}

	//PotencyAnnotation returns core::PotencyAnnotation:
	//	("@" | "^") value=INT;
	public ExpressionsGrammarAccess.PotencyAnnotationElements getPotencyAnnotationAccess() {
		return gaExpressions.getPotencyAnnotationAccess();
	}
	
	public ParserRule getPotencyAnnotationRule() {
		return getPotencyAnnotationAccess().getRule();
	}

	//PropertyWrite returns core::PropertyWrite:
	//	receptor=[core::Variable] "." property=ID "=" expression=Expression;
	public ExpressionsGrammarAccess.PropertyWriteElements getPropertyWriteAccess() {
		return gaExpressions.getPropertyWriteAccess();
	}
	
	public ParserRule getPropertyWriteRule() {
		return getPropertyWriteAccess().getRule();
	}

	//DefineVariable returns core::DefineVariable:
	//	name=EString "=" expression=Expression;
	public ExpressionsGrammarAccess.DefineVariableElements getDefineVariableAccess() {
		return gaExpressions.getDefineVariableAccess();
	}
	
	public ParserRule getDefineVariableRule() {
		return getDefineVariableAccess().getRule();
	}

	//// ClassUse How to reuse ClassUse?? 
	//ModelReference returns core::ModelReference:
	//	model=[core::RepresentModel] "!" className=EString;
	public ExpressionsGrammarAccess.ModelReferenceElements getModelReferenceAccess() {
		return gaExpressions.getModelReferenceAccess();
	}
	
	public ParserRule getModelReferenceRule() {
		return getModelReferenceAccess().getRule();
	}

	////BinaryExpr returns core::BinaryExpr:
	////	left=Expression  binaryOp=BinaryOp right=Expression 
	////;
	//enum BinaryOp returns core::BinaryOp:
	//	ADD="+" | SUB="-" | MUL="*" | DIV="/";
	public ExpressionsGrammarAccess.BinaryOpElements getBinaryOpAccess() {
		return gaExpressions.getBinaryOpAccess();
	}
	
	public EnumRule getBinaryOpRule() {
		return getBinaryOpAccess().getRule();
	}

	//ParenthesizedExpression returns core::Expression:
	//	"(" Expression ")";
	public ExpressionsGrammarAccess.ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return gaExpressions.getParenthesizedExpressionAccess();
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//Literal returns core::Expression:
	//	FloatLiteral | NumLiteral | StringLiteral | BooleanLiteral;
	public ExpressionsGrammarAccess.LiteralElements getLiteralAccess() {
		return gaExpressions.getLiteralAccess();
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//VariableReference returns core::VariableReference:
	//	variable=[core::Variable];
	public ExpressionsGrammarAccess.VariableReferenceElements getVariableReferenceAccess() {
		return gaExpressions.getVariableReferenceAccess();
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	//ClosureParameter returns core::ClosureParameter:
	//	name=ID;
	public ExpressionsGrammarAccess.ClosureParameterElements getClosureParameterAccess() {
		return gaExpressions.getClosureParameterAccess();
	}
	
	public ParserRule getClosureParameterRule() {
		return getClosureParameterAccess().getRule();
	}

	//WithResolveMethodCall returns core::Expression:
	//	PrimaryExpression ({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression // to allow accessing attributes	
	//	| (({core::ResolveLink.expr=current} "[" (module=[core::UseDeclaration] isExternal?="!")? linkName=EString ("."
	//	featureName=EString)? "]") (=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="("
	//	parameters+=Expression ("," parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)?)+ | ((=>
	//	({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
	//	parameters+=Expression)* ")")? parameters+=ClosureDeclaration?) ({core::ResolveLink.expr=current} "["
	//	(module=[core::UseDeclaration] isExternal?="!")? linkName=EString ("." featureName=EString)? "]")?)+)? // ? ( ({attr::AttributeUse.expr = current}) "[" attribute=[attr::AttributeDcl] "]" )?
	//;
	public ExpressionsGrammarAccess.WithResolveMethodCallElements getWithResolveMethodCallAccess() {
		return gaExpressions.getWithResolveMethodCallAccess();
	}
	
	public ParserRule getWithResolveMethodCallRule() {
		return getWithResolveMethodCallAccess().getRule();
	}

	/// *
	//WithResolveMethodCall returns core::Expression:
	//	PrimaryExpression
	//	(
	//		( ({core::BinaryExpr.left = current}) binaryOp=BinaryOp right=Expression)		
	//		| ( ( ({core::ResolveLink.expr = current}) "[" linkName=EString "]" )
	//			(=> ({core::MethodCall.receptor = current}) "." methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")" )? (parameters+=ClosureDeclaration)?  )?
	//			)+
	//	    | ( (=> ({core::MethodCall.receptor = current}) "." methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")" )? (parameters+=ClosureDeclaration)?  )
	//			  (({core::ResolveLink.expr = current}) "[" linkName=EString "]")? )+
	//        // to allow accessing attributes	
	//	)? // ? ( ({attr::AttributeUse.expr = current}) "[" attribute=[attr::AttributeDcl] "]" )?
	//;
	// * / / *
	//class ResolveLink extends Expression {
	//   val Expression[1] expr;
	//   attr Boolean[1] isExternal = false;
	//   ref UseDeclaration[0..1] module;
	//
	//   attr String[1] linkName;
	//   attr String[0..1] featureName;
	//}
	// * / KeywordParameter returns core::KeywordParameter:
	//	keyword=KEYWORD_ID value=Expression;
	public ExpressionsGrammarAccess.KeywordParameterElements getKeywordParameterAccess() {
		return gaExpressions.getKeywordParameterAccess();
	}
	
	public ParserRule getKeywordParameterRule() {
		return getKeywordParameterAccess().getRule();
	}

	//terminal KEYWORD_ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")* ":";
	public TerminalRule getKEYWORD_IDRule() {
		return gaExpressions.getKEYWORD_IDRule();
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaExpressions.getIDRule();
	} 

	//MatchTraceExpression returns core::MatchTrace:
	//	"match" (ID "!")? trace=[core::TraceDefinition] "with" "[" traceExpr=TraceExprLanguage "]";
	public ExpressionsGrammarAccess.MatchTraceExpressionElements getMatchTraceExpressionAccess() {
		return gaExpressions.getMatchTraceExpressionAccess();
	}
	
	public ParserRule getMatchTraceExpressionRule() {
		return getMatchTraceExpressionAccess().getRule();
	}

	//// TODO: Resolve!! 
	//TraceExprLanguage returns core::TraceCompareExpression:
	//	traceVar=[core::TraceElement] "=" expr=Expression;
	public ExpressionsGrammarAccess.TraceExprLanguageElements getTraceExprLanguageAccess() {
		return gaExpressions.getTraceExprLanguageAccess();
	}
	
	public ParserRule getTraceExprLanguageRule() {
		return getTraceExprLanguageAccess().getRule();
	}

	//PutTraceExpression returns core::PutTrace:
	//	"put" (ID "!")? trace=[core::TraceDefinition] "with" "[" parameters+=PutTraceParameter (","
	//	parameters+=PutTraceParameter)+ "]";
	public ExpressionsGrammarAccess.PutTraceExpressionElements getPutTraceExpressionAccess() {
		return gaExpressions.getPutTraceExpressionAccess();
	}
	
	public ParserRule getPutTraceExpressionRule() {
		return getPutTraceExpressionAccess().getRule();
	}

	//PutTraceParameter returns core::PutTraceParameter:
	//	traceVar=[core::TraceElement] "=" value=Expression;
	public ExpressionsGrammarAccess.PutTraceParameterElements getPutTraceParameterAccess() {
		return gaExpressions.getPutTraceParameterAccess();
	}
	
	public ParserRule getPutTraceParameterRule() {
		return getPutTraceParameterAccess().getRule();
	}

	/// *
	//MethodCall returns core::MethodCall:
	//	receptor=Expression "." methodName=EString
	//	("(" parameters+=Expression ("," parameters+=Expression)* ")")?
	//; 
	// * / / *
	// 
	// => indica precedencia
	//XMemberFeatureCall returns XExpression:
	//        XPrimaryExpression
	//        (=>({XAssignment.assignable=current} '.' feature=[types::JvmIdentifiableElement|ValidID] OpSingleAssign) value=XAssignment
	//        |=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|spreading?="*.")) 
	//                ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
	//                feature=[types::JvmIdentifiableElement|ValidID] (
	//                        =>explicitOperationCall?='(' 
	//                                (
	//                                    memberCallArguments+=XShortClosure
	//                                  |     memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	//                                )? 
	//                        ')')?
	//                )*;
	//
	//XPrimaryExpression returns XExpression:
	//        XConstructorCall |
	//        XBlockExpression |
	//        XSwitchExpression |
	//        XFeatureCall |
	//        XLiteral |
	//        XIfExpression |
	//        XForLoopExpression |
	//        XWhileExpression |
	//        XDoWhileExpression |
	//        XThrowExpression |
	//        XReturnExpression |
	//        XTryCatchFinallyExpression |
	//        XParenthesizedExpression;
	// * / NumLiteral returns core::NumLiteral:
	//	value=EInt;
	public ExpressionsGrammarAccess.NumLiteralElements getNumLiteralAccess() {
		return gaExpressions.getNumLiteralAccess();
	}
	
	public ParserRule getNumLiteralRule() {
		return getNumLiteralAccess().getRule();
	}

	//FloatLiteral returns core::DoubleLiteral:
	//	value=EDouble;
	public ExpressionsGrammarAccess.FloatLiteralElements getFloatLiteralAccess() {
		return gaExpressions.getFloatLiteralAccess();
	}
	
	public ParserRule getFloatLiteralRule() {
		return getFloatLiteralAccess().getRule();
	}

	//EDouble returns ecore::EDouble:
	//	INT "." INT;
	public ExpressionsGrammarAccess.EDoubleElements getEDoubleAccess() {
		return gaExpressions.getEDoubleAccess();
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}

	//StringLiteral returns core::StringLiteral:
	//	value=STRING;
	public ExpressionsGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaExpressions.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//BooleanLiteral returns core::BooleanLiteral:
	//	value=EBoolean;
	public ExpressionsGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaExpressions.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//// End-of Core
	//EString returns ecore::EString:
	//	STRING | ID;
	public ExpressionsGrammarAccess.EStringElements getEStringAccess() {
		return gaExpressions.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public ExpressionsGrammarAccess.EIntElements getEIntAccess() {
		return gaExpressions.getEIntAccess();
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public ExpressionsGrammarAccess.EBooleanElements getEBooleanAccess() {
		return gaExpressions.getEBooleanAccess();
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//QualifiedName returns ecore::EString:
	//	EString ("." EString)*;
	public ExpressionsGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaExpressions.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaExpressions.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaExpressions.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaExpressions.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaExpressions.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaExpressions.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaExpressions.getANY_OTHERRule();
	} 
}
