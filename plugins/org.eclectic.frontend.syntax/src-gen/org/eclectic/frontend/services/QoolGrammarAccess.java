/*
* generated by Xtext
*/

package org.eclectic.frontend.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclectic.frontend.syntax.services.ExpressionsGrammarAccess;

@Singleton
public class QoolGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class QoolTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QoolTransformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQoolKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInModelsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInModelsTransformationDefinitionParameterParserRuleCall_3_0 = (RuleCall)cInModelsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInModelsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInModelsTransformationDefinitionParameterParserRuleCall_4_1_0 = (RuleCall)cInModelsAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cOutModelsAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cOutModelsTransformationDefinitionParameterParserRuleCall_8_0_0 = (RuleCall)cOutModelsAssignment_8_0.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Keyword cCommaKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cOutModelsAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cOutModelsTransformationDefinitionParameterParserRuleCall_8_1_1_0 = (RuleCall)cOutModelsAssignment_8_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cAnnotationsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cAnnotationsAnnotationParserRuleCall_10_0 = (RuleCall)cAnnotationsAssignment_10.eContents().get(0);
		private final Assignment cInlineModelsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cInlineModelsInlineModelParserRuleCall_11_0 = (RuleCall)cInlineModelsAssignment_11.eContents().get(0);
		private final Assignment cImportedModelsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cImportedModelsImportedModelParserRuleCall_12_0 = (RuleCall)cImportedModelsAssignment_12.eContents().get(0);
		private final Assignment cQueuesAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cQueuesQoolQueueParserRuleCall_13_0 = (RuleCall)cQueuesAssignment_13.eContents().get(0);
		private final Assignment cSegmentsAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cSegmentsSegmentParserRuleCall_14_0 = (RuleCall)cSegmentsAssignment_14.eContents().get(0);
		
		////import "platform:/resource/modelum.eclectic.compiler/model/family/eclectic.frontend.ecore#//frontend" as frontend
		//QoolTransformation returns qool::QoolTransformation:
		//	"qool" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
		//	//'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//	"(" inModels+=TransformationDefinitionParameter ("," inModels+=TransformationDefinitionParameter)* ")" "->" "("
		//	(outModels+=TransformationDefinitionParameter ("," outModels+=TransformationDefinitionParameter)*)? ")"
		//	annotations+=Annotation* // like this to resolve a reference: it is not the case
		//	//'(' right=[core::TransformationDefinitionParameter|EString] ')'
		//	// ('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		//	//('inModels' '{' inModels+=TransformationDefinitionParameter ( "," inModels+=TransformationDefinitionParameter)* '}' )?
		//	// ('outModels' '{' outModels+=TransformationDefinitionParameter ( "," outModels+=TransformationDefinitionParameter)* '}' )?
		//	// (traceInterface = TraceInterface)
		//	inlineModels+=InlineModel* importedModels+=ImportedModel* queues+=QoolQueue+ segments+=Segment+;
		public ParserRule getRule() { return rule; }

		//"qool" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
		////'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//"(" inModels+=TransformationDefinitionParameter ("," inModels+=TransformationDefinitionParameter)* ")" "->" "("
		//(outModels+=TransformationDefinitionParameter ("," outModels+=TransformationDefinitionParameter)*)? ")"
		//annotations+=Annotation* // like this to resolve a reference: it is not the case
		////'(' right=[core::TransformationDefinitionParameter|EString] ')'
		//// ('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
		////('inModels' '{' inModels+=TransformationDefinitionParameter ( "," inModels+=TransformationDefinitionParameter)* '}' )?
		//// ('outModels' '{' outModels+=TransformationDefinitionParameter ( "," outModels+=TransformationDefinitionParameter)* '}' )?
		//// (traceInterface = TraceInterface)
		//inlineModels+=InlineModel* importedModels+=ImportedModel* queues+=QoolQueue+ segments+=Segment+
		public Group getGroup() { return cGroup; }

		//"qool"
		public Keyword getQoolKeyword_0() { return cQoolKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//// '(' left=[core::TransformationDefinitionParameter|EString] ')'
		////'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//inModels+=TransformationDefinitionParameter
		public Assignment getInModelsAssignment_3() { return cInModelsAssignment_3; }

		//TransformationDefinitionParameter
		public RuleCall getInModelsTransformationDefinitionParameterParserRuleCall_3_0() { return cInModelsTransformationDefinitionParameterParserRuleCall_3_0; }

		//("," inModels+=TransformationDefinitionParameter)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//inModels+=TransformationDefinitionParameter
		public Assignment getInModelsAssignment_4_1() { return cInModelsAssignment_4_1; }

		//TransformationDefinitionParameter
		public RuleCall getInModelsTransformationDefinitionParameterParserRuleCall_4_1_0() { return cInModelsTransformationDefinitionParameterParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_6() { return cHyphenMinusGreaterThanSignKeyword_6; }

		//"("
		public Keyword getLeftParenthesisKeyword_7() { return cLeftParenthesisKeyword_7; }

		//(outModels+=TransformationDefinitionParameter ("," outModels+=TransformationDefinitionParameter)*)?
		public Group getGroup_8() { return cGroup_8; }

		//outModels+=TransformationDefinitionParameter
		public Assignment getOutModelsAssignment_8_0() { return cOutModelsAssignment_8_0; }

		//TransformationDefinitionParameter
		public RuleCall getOutModelsTransformationDefinitionParameterParserRuleCall_8_0_0() { return cOutModelsTransformationDefinitionParameterParserRuleCall_8_0_0; }

		//("," outModels+=TransformationDefinitionParameter)*
		public Group getGroup_8_1() { return cGroup_8_1; }

		//","
		public Keyword getCommaKeyword_8_1_0() { return cCommaKeyword_8_1_0; }

		//outModels+=TransformationDefinitionParameter
		public Assignment getOutModelsAssignment_8_1_1() { return cOutModelsAssignment_8_1_1; }

		//TransformationDefinitionParameter
		public RuleCall getOutModelsTransformationDefinitionParameterParserRuleCall_8_1_1_0() { return cOutModelsTransformationDefinitionParameterParserRuleCall_8_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }

		//annotations+=Annotation*
		public Assignment getAnnotationsAssignment_10() { return cAnnotationsAssignment_10; }

		//Annotation
		public RuleCall getAnnotationsAnnotationParserRuleCall_10_0() { return cAnnotationsAnnotationParserRuleCall_10_0; }

		//inlineModels+=InlineModel*
		public Assignment getInlineModelsAssignment_11() { return cInlineModelsAssignment_11; }

		//InlineModel
		public RuleCall getInlineModelsInlineModelParserRuleCall_11_0() { return cInlineModelsInlineModelParserRuleCall_11_0; }

		//importedModels+=ImportedModel*
		public Assignment getImportedModelsAssignment_12() { return cImportedModelsAssignment_12; }

		//ImportedModel
		public RuleCall getImportedModelsImportedModelParserRuleCall_12_0() { return cImportedModelsImportedModelParserRuleCall_12_0; }

		//queues+=QoolQueue+
		public Assignment getQueuesAssignment_13() { return cQueuesAssignment_13; }

		//QoolQueue
		public RuleCall getQueuesQoolQueueParserRuleCall_13_0() { return cQueuesQoolQueueParserRuleCall_13_0; }

		//segments+=Segment+
		public Assignment getSegmentsAssignment_14() { return cSegmentsAssignment_14; }

		//Segment
		public RuleCall getSegmentsSegmentParserRuleCall_14_0() { return cSegmentsSegmentParserRuleCall_14_0; }
	}

	public class ImportedModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportedModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//// This is to allow serialization...
		//ImportedModel returns core::ImportedModel:
		//	"imported" name=EString;
		public ParserRule getRule() { return rule; }

		//"imported" name=EString
		public Group getGroup() { return cGroup; }

		//"imported"
		public Keyword getImportedKeyword_0() { return cImportedKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final RuleCall cMetamodelModelAnnotationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// @common
		//Annotation returns core::Annotation:
		//	MetamodelModelAnnotation;
		public ParserRule getRule() { return rule; }

		//MetamodelModelAnnotation
		public RuleCall getMetamodelModelAnnotationParserRuleCall() { return cMetamodelModelAnnotationParserRuleCall; }
	}

	public class MetamodelModelAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetamodelModelAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotatedElementAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAnnotatedElementRepresentModelCrossReference_0_0 = (CrossReference)cAnnotatedElementAssignment_0.eContents().get(0);
		private final RuleCall cAnnotatedElementRepresentModelIDTerminalRuleCall_0_0_1 = (RuleCall)cAnnotatedElementRepresentModelCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMetamodelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMetamodelSTRINGTerminalRuleCall_2_0 = (RuleCall)cMetamodelAssignment_2.eContents().get(0);
		
		//MetamodelModelAnnotation returns core::MetamodelModelAnnotation:
		//	annotatedElement=[core::RepresentModel] ":" metamodel=STRING;
		public ParserRule getRule() { return rule; }

		//annotatedElement=[core::RepresentModel] ":" metamodel=STRING
		public Group getGroup() { return cGroup; }

		//annotatedElement=[core::RepresentModel]
		public Assignment getAnnotatedElementAssignment_0() { return cAnnotatedElementAssignment_0; }

		//[core::RepresentModel]
		public CrossReference getAnnotatedElementRepresentModelCrossReference_0_0() { return cAnnotatedElementRepresentModelCrossReference_0_0; }

		//ID
		public RuleCall getAnnotatedElementRepresentModelIDTerminalRuleCall_0_0_1() { return cAnnotatedElementRepresentModelIDTerminalRuleCall_0_0_1; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//metamodel=STRING
		public Assignment getMetamodelAssignment_2() { return cMetamodelAssignment_2; }

		//STRING
		public RuleCall getMetamodelSTRINGTerminalRuleCall_2_0() { return cMetamodelSTRINGTerminalRuleCall_2_0; }
	}

	public class TransformationDefinitionParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransformationDefinitionParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransformationDefinitionParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TransformationDefinitionParameter returns core::TransformationDefinitionParameter:
		//	{core::TransformationDefinitionParameter} name=EString;
		public ParserRule getRule() { return rule; }

		//{core::TransformationDefinitionParameter} name=EString
		public Group getGroup() { return cGroup; }

		//{core::TransformationDefinitionParameter}
		public Action getTransformationDefinitionParameterAction_0() { return cTransformationDefinitionParameterAction_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class InlineModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InlineModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cClassesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassesInlineClassParserRuleCall_2_0 = (RuleCall)cClassesAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InlineModel returns core::InlineModel:
		//	"model" name=EString classes+=InlineClass+ "end";
		public ParserRule getRule() { return rule; }

		//"model" name=EString classes+=InlineClass+ "end"
		public Group getGroup() { return cGroup; }

		//"model"
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//classes+=InlineClass+
		public Assignment getClassesAssignment_2() { return cClassesAssignment_2; }

		//InlineClass
		public RuleCall getClassesInlineClassParserRuleCall_2_0() { return cClassesInlineClassParserRuleCall_2_0; }

		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}

	public class InlineClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InlineClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cFeaturesAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cFeaturesInlineReferenceInlineParserRuleCall_2_0_1_0 = (RuleCall)cFeaturesAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0_2_0 = (Keyword)cGroup_2_0_2.eContents().get(0);
		private final Assignment cFeaturesAssignment_2_0_2_1 = (Assignment)cGroup_2_0_2.eContents().get(1);
		private final RuleCall cFeaturesInlineReferenceInlineParserRuleCall_2_0_2_1_0 = (RuleCall)cFeaturesAssignment_2_0_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cFeaturesAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cFeaturesInlineFeatureExpandedParserRuleCall_2_1_0_0 = (RuleCall)cFeaturesAssignment_2_1_0.eContents().get(0);
		private final Assignment cFeaturesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cFeaturesInlineFeatureExpandedParserRuleCall_2_1_1_0 = (RuleCall)cFeaturesAssignment_2_1_1.eContents().get(0);
		private final Keyword cEndKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//InlineClass returns core::InlineClass:
		//	"class" name=EString ("{" features+=InlineReferenceInline (";" features+=InlineReferenceInline)* "}" |
		//	features+=InlineFeatureExpanded features+=InlineFeatureExpanded* "end");
		public ParserRule getRule() { return rule; }

		//"class" name=EString ("{" features+=InlineReferenceInline (";" features+=InlineReferenceInline)* "}" |
		//features+=InlineFeatureExpanded features+=InlineFeatureExpanded* "end")
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{" features+=InlineReferenceInline (";" features+=InlineReferenceInline)* "}" | features+=InlineFeatureExpanded
		//features+=InlineFeatureExpanded* "end"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"{" features+=InlineReferenceInline (";" features+=InlineReferenceInline)* "}"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0_0() { return cLeftCurlyBracketKeyword_2_0_0; }

		//features+=InlineReferenceInline
		public Assignment getFeaturesAssignment_2_0_1() { return cFeaturesAssignment_2_0_1; }

		//InlineReferenceInline
		public RuleCall getFeaturesInlineReferenceInlineParserRuleCall_2_0_1_0() { return cFeaturesInlineReferenceInlineParserRuleCall_2_0_1_0; }

		//(";" features+=InlineReferenceInline)*
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }

		//";"
		public Keyword getSemicolonKeyword_2_0_2_0() { return cSemicolonKeyword_2_0_2_0; }

		//features+=InlineReferenceInline
		public Assignment getFeaturesAssignment_2_0_2_1() { return cFeaturesAssignment_2_0_2_1; }

		//InlineReferenceInline
		public RuleCall getFeaturesInlineReferenceInlineParserRuleCall_2_0_2_1_0() { return cFeaturesInlineReferenceInlineParserRuleCall_2_0_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_0_3() { return cRightCurlyBracketKeyword_2_0_3; }

		//features+=InlineFeatureExpanded features+=InlineFeatureExpanded* "end"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//features+=InlineFeatureExpanded
		public Assignment getFeaturesAssignment_2_1_0() { return cFeaturesAssignment_2_1_0; }

		//InlineFeatureExpanded
		public RuleCall getFeaturesInlineFeatureExpandedParserRuleCall_2_1_0_0() { return cFeaturesInlineFeatureExpandedParserRuleCall_2_1_0_0; }

		//features+=InlineFeatureExpanded*
		public Assignment getFeaturesAssignment_2_1_1() { return cFeaturesAssignment_2_1_1; }

		//InlineFeatureExpanded
		public RuleCall getFeaturesInlineFeatureExpandedParserRuleCall_2_1_1_0() { return cFeaturesInlineFeatureExpandedParserRuleCall_2_1_1_0; }

		//"end"
		public Keyword getEndKeyword_2_1_2() { return cEndKeyword_2_1_2; }
	}

	public class InlineReferenceInlineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InlineReferenceInline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeExpressionParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//InlineReferenceInline returns core::InlineReference:
		//	name=EString ":" type=TypeExpression;
		public ParserRule getRule() { return rule; }

		//name=EString ":" type=TypeExpression
		public Group getGroup() { return cGroup; }

		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=TypeExpression
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//TypeExpression
		public RuleCall getTypeTypeExpressionParserRuleCall_2_0() { return cTypeTypeExpressionParserRuleCall_2_0; }
	}

	public class InlineFeatureExpandedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InlineFeatureExpanded");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInlineAttributeExpandedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInlineReferenceExpandedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InlineFeatureExpanded returns core::InlineFeature:
		//	InlineAttributeExpanded | InlineReferenceExpanded;
		public ParserRule getRule() { return rule; }

		//InlineAttributeExpanded | InlineReferenceExpanded
		public Alternatives getAlternatives() { return cAlternatives; }

		//InlineAttributeExpanded
		public RuleCall getInlineAttributeExpandedParserRuleCall_0() { return cInlineAttributeExpandedParserRuleCall_0; }

		//InlineReferenceExpanded
		public RuleCall getInlineReferenceExpandedParserRuleCall_1() { return cInlineReferenceExpandedParserRuleCall_1; }
	}

	public class InlineAttributeExpandedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InlineAttributeExpanded");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeExpressionParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cMultivaluedAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cMultivaluedAsteriskKeyword_4_0 = (Keyword)cMultivaluedAssignment_4.eContents().get(0);
		
		//InlineAttributeExpanded returns core::InlineAttribute:
		//	"att" name=EString ":" type=TypeExpression multivalued?="*"?;
		public ParserRule getRule() { return rule; }

		//"att" name=EString ":" type=TypeExpression multivalued?="*"?
		public Group getGroup() { return cGroup; }

		//"att"
		public Keyword getAttKeyword_0() { return cAttKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=TypeExpression
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeExpression
		public RuleCall getTypeTypeExpressionParserRuleCall_3_0() { return cTypeTypeExpressionParserRuleCall_3_0; }

		//multivalued?="*"?
		public Assignment getMultivaluedAssignment_4() { return cMultivaluedAssignment_4; }

		//"*"
		public Keyword getMultivaluedAsteriskKeyword_4_0() { return cMultivaluedAsteriskKeyword_4_0; }
	}

	public class InlineReferenceExpandedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InlineReferenceExpanded");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeExpressionParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cMultivaluedAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cMultivaluedAsteriskKeyword_4_0 = (Keyword)cMultivaluedAssignment_4.eContents().get(0);
		
		//InlineReferenceExpanded returns core::InlineReference:
		//	"ref" name=EString ":" type=TypeExpression multivalued?="*"?;
		public ParserRule getRule() { return rule; }

		//"ref" name=EString ":" type=TypeExpression multivalued?="*"?
		public Group getGroup() { return cGroup; }

		//"ref"
		public Keyword getRefKeyword_0() { return cRefKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=TypeExpression
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeExpression
		public RuleCall getTypeTypeExpressionParserRuleCall_3_0() { return cTypeTypeExpressionParserRuleCall_3_0; }

		//multivalued?="*"?
		public Assignment getMultivaluedAssignment_4() { return cMultivaluedAssignment_4; }

		//"*"
		public Keyword getMultivaluedAsteriskKeyword_4_0() { return cMultivaluedAsteriskKeyword_4_0; }
	}

	public class QoolQueueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QoolQueue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalQueueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModelElementQueueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// -- Queue 
		//QoolQueue returns qool::QoolQueue:
		//	LocalQueue | ModelElementQueue;
		public ParserRule getRule() { return rule; }

		//LocalQueue | ModelElementQueue
		public Alternatives getAlternatives() { return cAlternatives; }

		//LocalQueue
		public RuleCall getLocalQueueParserRuleCall_0() { return cLocalQueueParserRuleCall_0; }

		//ModelElementQueue
		public RuleCall getModelElementQueueParserRuleCall_1() { return cModelElementQueueParserRuleCall_1; }
	}

	public class LocalQueueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocalQueue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLocalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cQueueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cType_Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cType_TypeExpressionParserRuleCall_4_0 = (RuleCall)cType_Assignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWithKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOptimizationsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cOptimizationsQueueOptimizationParserRuleCall_5_1_0 = (RuleCall)cOptimizationsAssignment_5_1.eContents().get(0);
		
		//LocalQueue returns qool::LocalQueue:
		//	"local" "queue" name=ID ":" type_=TypeExpression ("with" optimizations+=QueueOptimization+)?;
		public ParserRule getRule() { return rule; }

		//"local" "queue" name=ID ":" type_=TypeExpression ("with" optimizations+=QueueOptimization+)?
		public Group getGroup() { return cGroup; }

		//"local"
		public Keyword getLocalKeyword_0() { return cLocalKeyword_0; }

		//"queue"
		public Keyword getQueueKeyword_1() { return cQueueKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//type_=TypeExpression
		public Assignment getType_Assignment_4() { return cType_Assignment_4; }

		//TypeExpression
		public RuleCall getType_TypeExpressionParserRuleCall_4_0() { return cType_TypeExpressionParserRuleCall_4_0; }

		//("with" optimizations+=QueueOptimization+)?
		public Group getGroup_5() { return cGroup_5; }

		//"with"
		public Keyword getWithKeyword_5_0() { return cWithKeyword_5_0; }

		//optimizations+=QueueOptimization+
		public Assignment getOptimizationsAssignment_5_1() { return cOptimizationsAssignment_5_1; }

		//QueueOptimization
		public RuleCall getOptimizationsQueueOptimizationParserRuleCall_5_1_0() { return cOptimizationsQueueOptimizationParserRuleCall_5_1_0; }
	}

	public class ModelElementQueueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelElementQueue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cQueueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cClass_Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cClass_ClassUseParserRuleCall_4_0 = (RuleCall)cClass_Assignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAdditionalsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cAdditionalsClassUseParserRuleCall_5_1_0 = (RuleCall)cAdditionalsAssignment_5_1.eContents().get(0);
		
		//ModelElementQueue returns qool::ModelElementQueue:
		//	"model" "queue" name=ID ":" class_=ClassUse ("," additionals+=ClassUse)*;
		public ParserRule getRule() { return rule; }

		//"model" "queue" name=ID ":" class_=ClassUse ("," additionals+=ClassUse)*
		public Group getGroup() { return cGroup; }

		//"model"
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }

		//"queue"
		public Keyword getQueueKeyword_1() { return cQueueKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//class_=ClassUse
		public Assignment getClass_Assignment_4() { return cClass_Assignment_4; }

		//ClassUse
		public RuleCall getClass_ClassUseParserRuleCall_4_0() { return cClass_ClassUseParserRuleCall_4_0; }

		//("," additionals+=ClassUse)*
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//additionals+=ClassUse
		public Assignment getAdditionalsAssignment_5_1() { return cAdditionalsAssignment_5_1; }

		//ClassUse
		public RuleCall getAdditionalsClassUseParserRuleCall_5_1_0() { return cAdditionalsClassUseParserRuleCall_5_1_0; }
	}

	public class QueueOptimizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QueueOptimization");
		private final RuleCall cAccessByFeatureOptimizationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//QueueOptimization returns qool::QueueOptimization:
		//	AccessByFeatureOptimization;
		public ParserRule getRule() { return rule; }

		//AccessByFeatureOptimization
		public RuleCall getAccessByFeatureOptimizationParserRuleCall() { return cAccessByFeatureOptimizationParserRuleCall; }
	}

	public class AccessByFeatureOptimizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AccessByFeatureOptimization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAccessByKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeatureNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatureNameEStringParserRuleCall_1_0 = (RuleCall)cFeatureNameAssignment_1.eContents().get(0);
		private final Assignment cForceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cForceExclamationMarkKeyword_2_0 = (Keyword)cForceAssignment_2.eContents().get(0);
		
		//AccessByFeatureOptimization returns qool::AccessByFeatureOptimization:
		//	"access-by" featureName=EString force?="!"?;
		public ParserRule getRule() { return rule; }

		//"access-by" featureName=EString force?="!"?
		public Group getGroup() { return cGroup; }

		//"access-by"
		public Keyword getAccessByKeyword_0() { return cAccessByKeyword_0; }

		//featureName=EString
		public Assignment getFeatureNameAssignment_1() { return cFeatureNameAssignment_1; }

		//EString
		public RuleCall getFeatureNameEStringParserRuleCall_1_0() { return cFeatureNameEStringParserRuleCall_1_0; }

		//force?="!"?
		public Assignment getForceAssignment_2() { return cForceAssignment_2; }

		//"!"
		public Keyword getForceExclamationMarkKeyword_2_0() { return cForceExclamationMarkKeyword_2_0; }
	}

	public class SegmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Segment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSegmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// -- Segments and expressions
		//Segment returns qool::Segment:
		//	"segment" name=EString statements+=Statement+ "end";
		public ParserRule getRule() { return rule; }

		//"segment" name=EString statements+=Statement+ "end"
		public Group getGroup() { return cGroup; }

		//"segment"
		public Keyword getSegmentKeyword_0() { return cSegmentKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//statements+=Statement+
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }

		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefineVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPutTraceExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPropertyWriteParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForAllStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cEmitStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//// redefine
		//Statement returns core::Statement:
		//	DefineVariable // | ForEachStatement
		//	| Expression | PutTraceExpression | PropertyWrite | ForAllStatement | EmitStatement;
		public ParserRule getRule() { return rule; }

		//DefineVariable // | ForEachStatement
		//| Expression | PutTraceExpression | PropertyWrite | ForAllStatement | EmitStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//DefineVariable
		public RuleCall getDefineVariableParserRuleCall_0() { return cDefineVariableParserRuleCall_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//PutTraceExpression
		public RuleCall getPutTraceExpressionParserRuleCall_2() { return cPutTraceExpressionParserRuleCall_2; }

		//PropertyWrite
		public RuleCall getPropertyWriteParserRuleCall_3() { return cPropertyWriteParserRuleCall_3; }

		//ForAllStatement
		public RuleCall getForAllStatementParserRuleCall_4() { return cForAllStatementParserRuleCall_4; }

		//EmitStatement
		public RuleCall getEmitStatementParserRuleCall_5() { return cEmitStatementParserRuleCall_5; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cModelReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cParenthesizedExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMatchTraceExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cClosureDeclarationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMatchExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cInvokeTransformationParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cCopierParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//// redefine
		//PrimaryExpression returns core::Expression:
		//	Literal // Facilities
		//	| VariableReference | ModelReference | ParenthesizedExpression | MatchTraceExpression | ClosureDeclaration | // <-- added for qool
		//	MatchExpression | InvokeTransformation | Copier;
		public ParserRule getRule() { return rule; }

		//Literal // Facilities
		//| VariableReference | ModelReference | ParenthesizedExpression | MatchTraceExpression | ClosureDeclaration | // <-- added for qool
		//MatchExpression | InvokeTransformation | Copier
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_1() { return cVariableReferenceParserRuleCall_1; }

		//ModelReference
		public RuleCall getModelReferenceParserRuleCall_2() { return cModelReferenceParserRuleCall_2; }

		//ParenthesizedExpression
		public RuleCall getParenthesizedExpressionParserRuleCall_3() { return cParenthesizedExpressionParserRuleCall_3; }

		//MatchTraceExpression
		public RuleCall getMatchTraceExpressionParserRuleCall_4() { return cMatchTraceExpressionParserRuleCall_4; }

		//ClosureDeclaration
		public RuleCall getClosureDeclarationParserRuleCall_5() { return cClosureDeclarationParserRuleCall_5; }

		//// <-- added for qool
		//MatchExpression
		public RuleCall getMatchExpressionParserRuleCall_6() { return cMatchExpressionParserRuleCall_6; }

		//InvokeTransformation
		public RuleCall getInvokeTransformationParserRuleCall_7() { return cInvokeTransformationParserRuleCall_7; }

		//Copier
		public RuleCall getCopierParserRuleCall_8() { return cCopierParserRuleCall_8; }
	}

	public class NamedInvocationParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamedInvocationParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFormalNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFormalNameEStringParserRuleCall_0_0 = (RuleCall)cFormalNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActualParameterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActualParameterExpressionParserRuleCall_2_0 = (RuleCall)cActualParameterAssignment_2.eContents().get(0);
		
		//NamedInvocationParameter returns qool::NamedInvocationParameter:
		//	formalName=EString "=" actualParameter=Expression;
		public ParserRule getRule() { return rule; }

		//formalName=EString "=" actualParameter=Expression
		public Group getGroup() { return cGroup; }

		//formalName=EString
		public Assignment getFormalNameAssignment_0() { return cFormalNameAssignment_0; }

		//EString
		public RuleCall getFormalNameEStringParserRuleCall_0_0() { return cFormalNameEStringParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//actualParameter=Expression
		public Assignment getActualParameterAssignment_2() { return cActualParameterAssignment_2; }

		//Expression
		public RuleCall getActualParameterExpressionParserRuleCall_2_0() { return cActualParameterExpressionParserRuleCall_2_0; }
	}

	public class InvokeTransformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InvokeTransformation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInvokeExternalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInvokeInternalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//InvokeTransformation returns qool::InvokeTransformation:
		//	InvokeExternal | InvokeInternal;
		public ParserRule getRule() { return rule; }

		//InvokeExternal | InvokeInternal
		public Alternatives getAlternatives() { return cAlternatives; }

		//InvokeExternal
		public RuleCall getInvokeExternalParserRuleCall_0() { return cInvokeExternalParserRuleCall_0; }

		//InvokeInternal
		public RuleCall getInvokeInternalParserRuleCall_1() { return cInvokeInternalParserRuleCall_1; }
	}

	public class InvokeInternalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InvokeInternal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvokeInternalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTransformationNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTransformationNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cTransformationNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cSourceModelsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cSourceModelsInvocationParameterParserRuleCall_3_0_0 = (RuleCall)cSourceModelsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cSourceModelsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cSourceModelsInvocationParameterParserRuleCall_3_1_1_0 = (RuleCall)cSourceModelsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cTargetModelsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cTargetModelsInvocationParameterParserRuleCall_7_0_0 = (RuleCall)cTargetModelsAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cTargetModelsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cTargetModelsInvocationParameterParserRuleCall_7_1_1_0 = (RuleCall)cTargetModelsAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cInputViewFilterKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cInputViewFilterAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final CrossReference cInputViewFilterDefineVariableCrossReference_9_1_0 = (CrossReference)cInputViewFilterAssignment_9_1.eContents().get(0);
		private final RuleCall cInputViewFilterDefineVariableIDTerminalRuleCall_9_1_0_1 = (RuleCall)cInputViewFilterDefineVariableCrossReference_9_1_0.eContents().get(1);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cEntrypointKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cEntryPointNameAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cEntryPointNameIDTerminalRuleCall_10_1_0 = (RuleCall)cEntryPointNameAssignment_10_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Assignment cEntryPointParametersAssignment_10_3 = (Assignment)cGroup_10.eContents().get(3);
		private final RuleCall cEntryPointParametersExpressionParserRuleCall_10_3_0 = (RuleCall)cEntryPointParametersAssignment_10_3.eContents().get(0);
		private final Group cGroup_10_4 = (Group)cGroup_10.eContents().get(4);
		private final Keyword cCommaKeyword_10_4_0 = (Keyword)cGroup_10_4.eContents().get(0);
		private final Assignment cEntryPointParametersAssignment_10_4_1 = (Assignment)cGroup_10_4.eContents().get(1);
		private final RuleCall cEntryPointParametersExpressionParserRuleCall_10_4_1_0 = (RuleCall)cEntryPointParametersAssignment_10_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_5 = (Keyword)cGroup_10.eContents().get(5);
		
		//InvokeInternal returns qool::InvokeInternal:
		//	"invoke-internal" transformationName=QualifiedName "(" (sourceModels+=InvocationParameter (","
		//	sourceModels+=InvocationParameter)*)? ")" "->" "(" (targetModels+=InvocationParameter (","
		//	targetModels+=InvocationParameter)*)? ")" ("input-view-filter" inputViewFilter=[core::DefineVariable])? ("entrypoint"
		//	entryPointName=ID "(" entryPointParameters+=Expression? ("," entryPointParameters+=Expression)* ")")?;
		public ParserRule getRule() { return rule; }

		//"invoke-internal" transformationName=QualifiedName "(" (sourceModels+=InvocationParameter (","
		//sourceModels+=InvocationParameter)*)? ")" "->" "(" (targetModels+=InvocationParameter (","
		//targetModels+=InvocationParameter)*)? ")" ("input-view-filter" inputViewFilter=[core::DefineVariable])? ("entrypoint"
		//entryPointName=ID "(" entryPointParameters+=Expression? ("," entryPointParameters+=Expression)* ")")?
		public Group getGroup() { return cGroup; }

		//"invoke-internal"
		public Keyword getInvokeInternalKeyword_0() { return cInvokeInternalKeyword_0; }

		//transformationName=QualifiedName
		public Assignment getTransformationNameAssignment_1() { return cTransformationNameAssignment_1; }

		//QualifiedName
		public RuleCall getTransformationNameQualifiedNameParserRuleCall_1_0() { return cTransformationNameQualifiedNameParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(sourceModels+=InvocationParameter ("," sourceModels+=InvocationParameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//sourceModels+=InvocationParameter
		public Assignment getSourceModelsAssignment_3_0() { return cSourceModelsAssignment_3_0; }

		//InvocationParameter
		public RuleCall getSourceModelsInvocationParameterParserRuleCall_3_0_0() { return cSourceModelsInvocationParameterParserRuleCall_3_0_0; }

		//("," sourceModels+=InvocationParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//sourceModels+=InvocationParameter
		public Assignment getSourceModelsAssignment_3_1_1() { return cSourceModelsAssignment_3_1_1; }

		//InvocationParameter
		public RuleCall getSourceModelsInvocationParameterParserRuleCall_3_1_1_0() { return cSourceModelsInvocationParameterParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//(targetModels+=InvocationParameter ("," targetModels+=InvocationParameter)*)?
		public Group getGroup_7() { return cGroup_7; }

		//targetModels+=InvocationParameter
		public Assignment getTargetModelsAssignment_7_0() { return cTargetModelsAssignment_7_0; }

		//InvocationParameter
		public RuleCall getTargetModelsInvocationParameterParserRuleCall_7_0_0() { return cTargetModelsInvocationParameterParserRuleCall_7_0_0; }

		//("," targetModels+=InvocationParameter)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//","
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }

		//targetModels+=InvocationParameter
		public Assignment getTargetModelsAssignment_7_1_1() { return cTargetModelsAssignment_7_1_1; }

		//InvocationParameter
		public RuleCall getTargetModelsInvocationParameterParserRuleCall_7_1_1_0() { return cTargetModelsInvocationParameterParserRuleCall_7_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//("input-view-filter" inputViewFilter=[core::DefineVariable])?
		public Group getGroup_9() { return cGroup_9; }

		//"input-view-filter"
		public Keyword getInputViewFilterKeyword_9_0() { return cInputViewFilterKeyword_9_0; }

		//inputViewFilter=[core::DefineVariable]
		public Assignment getInputViewFilterAssignment_9_1() { return cInputViewFilterAssignment_9_1; }

		//[core::DefineVariable]
		public CrossReference getInputViewFilterDefineVariableCrossReference_9_1_0() { return cInputViewFilterDefineVariableCrossReference_9_1_0; }

		//ID
		public RuleCall getInputViewFilterDefineVariableIDTerminalRuleCall_9_1_0_1() { return cInputViewFilterDefineVariableIDTerminalRuleCall_9_1_0_1; }

		//("entrypoint" entryPointName=ID "(" entryPointParameters+=Expression? ("," entryPointParameters+=Expression)* ")")?
		public Group getGroup_10() { return cGroup_10; }

		//"entrypoint"
		public Keyword getEntrypointKeyword_10_0() { return cEntrypointKeyword_10_0; }

		//entryPointName=ID
		public Assignment getEntryPointNameAssignment_10_1() { return cEntryPointNameAssignment_10_1; }

		//ID
		public RuleCall getEntryPointNameIDTerminalRuleCall_10_1_0() { return cEntryPointNameIDTerminalRuleCall_10_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_10_2() { return cLeftParenthesisKeyword_10_2; }

		//entryPointParameters+=Expression?
		public Assignment getEntryPointParametersAssignment_10_3() { return cEntryPointParametersAssignment_10_3; }

		//Expression
		public RuleCall getEntryPointParametersExpressionParserRuleCall_10_3_0() { return cEntryPointParametersExpressionParserRuleCall_10_3_0; }

		//("," entryPointParameters+=Expression)*
		public Group getGroup_10_4() { return cGroup_10_4; }

		//","
		public Keyword getCommaKeyword_10_4_0() { return cCommaKeyword_10_4_0; }

		//entryPointParameters+=Expression
		public Assignment getEntryPointParametersAssignment_10_4_1() { return cEntryPointParametersAssignment_10_4_1; }

		//Expression
		public RuleCall getEntryPointParametersExpressionParserRuleCall_10_4_1_0() { return cEntryPointParametersExpressionParserRuleCall_10_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10_5() { return cRightParenthesisKeyword_10_5; }
	}

	public class InvokeExternalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InvokeExternal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvokeExternalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTransformationNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTransformationNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cTransformationNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cSourceModelsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cSourceModelsInvocationParameterParserRuleCall_3_0_0 = (RuleCall)cSourceModelsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cSourceModelsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cSourceModelsInvocationParameterParserRuleCall_3_1_1_0 = (RuleCall)cSourceModelsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cTargetModelsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cTargetModelsInvocationParameterParserRuleCall_7_0_0 = (RuleCall)cTargetModelsAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cTargetModelsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cTargetModelsInvocationParameterParserRuleCall_7_1_1_0 = (RuleCall)cTargetModelsAssignment_7_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cPlusSignKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cParametersAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cParametersNamedInvocationParameterParserRuleCall_9_2_0 = (RuleCall)cParametersAssignment_9_2.eContents().get(0);
		private final Group cGroup_9_3 = (Group)cGroup_9.eContents().get(3);
		private final Keyword cCommaKeyword_9_3_0 = (Keyword)cGroup_9_3.eContents().get(0);
		private final Assignment cParametersAssignment_9_3_1 = (Assignment)cGroup_9_3.eContents().get(1);
		private final RuleCall cParametersNamedInvocationParameterParserRuleCall_9_3_1_0 = (RuleCall)cParametersAssignment_9_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		private final Alternatives cAlternatives_10 = (Alternatives)cGroup.eContents().get(10);
		private final Group cGroup_10_0 = (Group)cAlternatives_10.eContents().get(0);
		private final Keyword cEntrypointKeyword_10_0_0 = (Keyword)cGroup_10_0.eContents().get(0);
		private final Assignment cEntryPointNameAssignment_10_0_1 = (Assignment)cGroup_10_0.eContents().get(1);
		private final RuleCall cEntryPointNameIDTerminalRuleCall_10_0_1_0 = (RuleCall)cEntryPointNameAssignment_10_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_10_0_2 = (Keyword)cGroup_10_0.eContents().get(2);
		private final Assignment cEntryPointParametersAssignment_10_0_3 = (Assignment)cGroup_10_0.eContents().get(3);
		private final RuleCall cEntryPointParametersExpressionParserRuleCall_10_0_3_0 = (RuleCall)cEntryPointParametersAssignment_10_0_3.eContents().get(0);
		private final Group cGroup_10_0_4 = (Group)cGroup_10_0.eContents().get(4);
		private final Keyword cCommaKeyword_10_0_4_0 = (Keyword)cGroup_10_0_4.eContents().get(0);
		private final Assignment cEntryPointParametersAssignment_10_0_4_1 = (Assignment)cGroup_10_0_4.eContents().get(1);
		private final RuleCall cEntryPointParametersExpressionParserRuleCall_10_0_4_1_0 = (RuleCall)cEntryPointParametersAssignment_10_0_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_0_5 = (Keyword)cGroup_10_0.eContents().get(5);
		private final Group cGroup_10_1 = (Group)cAlternatives_10.eContents().get(1);
		private final Keyword cInputViewFilterKeyword_10_1_0 = (Keyword)cGroup_10_1.eContents().get(0);
		private final Assignment cInputViewFilterAssignment_10_1_1 = (Assignment)cGroup_10_1.eContents().get(1);
		private final CrossReference cInputViewFilterDefineVariableCrossReference_10_1_1_0 = (CrossReference)cInputViewFilterAssignment_10_1_1.eContents().get(0);
		private final RuleCall cInputViewFilterDefineVariableIDTerminalRuleCall_10_1_1_0_1 = (RuleCall)cInputViewFilterDefineVariableCrossReference_10_1_1_0.eContents().get(1);
		private final Group cGroup_10_1_2 = (Group)cGroup_10_1.eContents().get(2);
		private final Keyword cOutputElementKeyword_10_1_2_0 = (Keyword)cGroup_10_1_2.eContents().get(0);
		private final Assignment cOutputResolutionSourceElementAssignment_10_1_2_1 = (Assignment)cGroup_10_1_2.eContents().get(1);
		private final RuleCall cOutputResolutionSourceElementExpressionParserRuleCall_10_1_2_1_0 = (RuleCall)cOutputResolutionSourceElementAssignment_10_1_2_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_10_1_2_2 = (Keyword)cGroup_10_1_2.eContents().get(2);
		private final Assignment cQueueNameAssignment_10_1_2_3 = (Assignment)cGroup_10_1_2.eContents().get(3);
		private final RuleCall cQueueNameEStringParserRuleCall_10_1_2_3_0 = (RuleCall)cQueueNameAssignment_10_1_2_3.eContents().get(0);
		private final Keyword cFullStopKeyword_10_1_2_4 = (Keyword)cGroup_10_1_2.eContents().get(4);
		private final Assignment cTraceAttributeNameAssignment_10_1_2_5 = (Assignment)cGroup_10_1_2.eContents().get(5);
		private final RuleCall cTraceAttributeNameEStringParserRuleCall_10_1_2_5_0 = (RuleCall)cTraceAttributeNameAssignment_10_1_2_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_10_1_2_6 = (Keyword)cGroup_10_1_2.eContents().get(6);
		
		//InvokeExternal returns qool::InvokeExternal:
		//	"invoke-external" transformationName=QualifiedName "(" (sourceModels+=InvocationParameter (","
		//	sourceModels+=InvocationParameter)*)? ")" "->" "(" (targetModels+=InvocationParameter (","
		//	targetModels+=InvocationParameter)*)? ")" ("+" "(" parameters+=NamedInvocationParameter (","
		//	parameters+=NamedInvocationParameter)* ")")? (("entrypoint" entryPointName=ID "(" entryPointParameters+=Expression?
		//	("," entryPointParameters+=Expression)* ")")? | "input-view-filter" inputViewFilter=[core::DefineVariable]
		//	("output-element" outputResolutionSourceElement=Expression "[" queueName=EString "." traceAttributeName=EString
		//	"]")?);
		public ParserRule getRule() { return rule; }

		//"invoke-external" transformationName=QualifiedName "(" (sourceModels+=InvocationParameter (","
		//sourceModels+=InvocationParameter)*)? ")" "->" "(" (targetModels+=InvocationParameter (","
		//targetModels+=InvocationParameter)*)? ")" ("+" "(" parameters+=NamedInvocationParameter (","
		//parameters+=NamedInvocationParameter)* ")")? (("entrypoint" entryPointName=ID "(" entryPointParameters+=Expression?
		//("," entryPointParameters+=Expression)* ")")? | "input-view-filter" inputViewFilter=[core::DefineVariable]
		//("output-element" outputResolutionSourceElement=Expression "[" queueName=EString "." traceAttributeName=EString "]")?)
		public Group getGroup() { return cGroup; }

		//"invoke-external"
		public Keyword getInvokeExternalKeyword_0() { return cInvokeExternalKeyword_0; }

		//transformationName=QualifiedName
		public Assignment getTransformationNameAssignment_1() { return cTransformationNameAssignment_1; }

		//QualifiedName
		public RuleCall getTransformationNameQualifiedNameParserRuleCall_1_0() { return cTransformationNameQualifiedNameParserRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(sourceModels+=InvocationParameter ("," sourceModels+=InvocationParameter)*)?
		public Group getGroup_3() { return cGroup_3; }

		//sourceModels+=InvocationParameter
		public Assignment getSourceModelsAssignment_3_0() { return cSourceModelsAssignment_3_0; }

		//InvocationParameter
		public RuleCall getSourceModelsInvocationParameterParserRuleCall_3_0_0() { return cSourceModelsInvocationParameterParserRuleCall_3_0_0; }

		//("," sourceModels+=InvocationParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//sourceModels+=InvocationParameter
		public Assignment getSourceModelsAssignment_3_1_1() { return cSourceModelsAssignment_3_1_1; }

		//InvocationParameter
		public RuleCall getSourceModelsInvocationParameterParserRuleCall_3_1_1_0() { return cSourceModelsInvocationParameterParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_5() { return cHyphenMinusGreaterThanSignKeyword_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//(targetModels+=InvocationParameter ("," targetModels+=InvocationParameter)*)?
		public Group getGroup_7() { return cGroup_7; }

		//targetModels+=InvocationParameter
		public Assignment getTargetModelsAssignment_7_0() { return cTargetModelsAssignment_7_0; }

		//InvocationParameter
		public RuleCall getTargetModelsInvocationParameterParserRuleCall_7_0_0() { return cTargetModelsInvocationParameterParserRuleCall_7_0_0; }

		//("," targetModels+=InvocationParameter)*
		public Group getGroup_7_1() { return cGroup_7_1; }

		//","
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }

		//targetModels+=InvocationParameter
		public Assignment getTargetModelsAssignment_7_1_1() { return cTargetModelsAssignment_7_1_1; }

		//InvocationParameter
		public RuleCall getTargetModelsInvocationParameterParserRuleCall_7_1_1_0() { return cTargetModelsInvocationParameterParserRuleCall_7_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//("+" "(" parameters+=NamedInvocationParameter ("," parameters+=NamedInvocationParameter)* ")")?
		public Group getGroup_9() { return cGroup_9; }

		//"+"
		public Keyword getPlusSignKeyword_9_0() { return cPlusSignKeyword_9_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_9_1() { return cLeftParenthesisKeyword_9_1; }

		//parameters+=NamedInvocationParameter
		public Assignment getParametersAssignment_9_2() { return cParametersAssignment_9_2; }

		//NamedInvocationParameter
		public RuleCall getParametersNamedInvocationParameterParserRuleCall_9_2_0() { return cParametersNamedInvocationParameterParserRuleCall_9_2_0; }

		//("," parameters+=NamedInvocationParameter)*
		public Group getGroup_9_3() { return cGroup_9_3; }

		//","
		public Keyword getCommaKeyword_9_3_0() { return cCommaKeyword_9_3_0; }

		//parameters+=NamedInvocationParameter
		public Assignment getParametersAssignment_9_3_1() { return cParametersAssignment_9_3_1; }

		//NamedInvocationParameter
		public RuleCall getParametersNamedInvocationParameterParserRuleCall_9_3_1_0() { return cParametersNamedInvocationParameterParserRuleCall_9_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9_4() { return cRightParenthesisKeyword_9_4; }

		//("entrypoint" entryPointName=ID "(" entryPointParameters+=Expression? ("," entryPointParameters+=Expression)* ")")? |
		//"input-view-filter" inputViewFilter=[core::DefineVariable] ("output-element" outputResolutionSourceElement=Expression
		//"[" queueName=EString "." traceAttributeName=EString "]")?
		public Alternatives getAlternatives_10() { return cAlternatives_10; }

		//("entrypoint" entryPointName=ID "(" entryPointParameters+=Expression? ("," entryPointParameters+=Expression)* ")")?
		public Group getGroup_10_0() { return cGroup_10_0; }

		//"entrypoint"
		public Keyword getEntrypointKeyword_10_0_0() { return cEntrypointKeyword_10_0_0; }

		//entryPointName=ID
		public Assignment getEntryPointNameAssignment_10_0_1() { return cEntryPointNameAssignment_10_0_1; }

		//ID
		public RuleCall getEntryPointNameIDTerminalRuleCall_10_0_1_0() { return cEntryPointNameIDTerminalRuleCall_10_0_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_10_0_2() { return cLeftParenthesisKeyword_10_0_2; }

		//entryPointParameters+=Expression?
		public Assignment getEntryPointParametersAssignment_10_0_3() { return cEntryPointParametersAssignment_10_0_3; }

		//Expression
		public RuleCall getEntryPointParametersExpressionParserRuleCall_10_0_3_0() { return cEntryPointParametersExpressionParserRuleCall_10_0_3_0; }

		//("," entryPointParameters+=Expression)*
		public Group getGroup_10_0_4() { return cGroup_10_0_4; }

		//","
		public Keyword getCommaKeyword_10_0_4_0() { return cCommaKeyword_10_0_4_0; }

		//entryPointParameters+=Expression
		public Assignment getEntryPointParametersAssignment_10_0_4_1() { return cEntryPointParametersAssignment_10_0_4_1; }

		//Expression
		public RuleCall getEntryPointParametersExpressionParserRuleCall_10_0_4_1_0() { return cEntryPointParametersExpressionParserRuleCall_10_0_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10_0_5() { return cRightParenthesisKeyword_10_0_5; }

		//"input-view-filter" inputViewFilter=[core::DefineVariable] ("output-element" outputResolutionSourceElement=Expression
		//"[" queueName=EString "." traceAttributeName=EString "]")?
		public Group getGroup_10_1() { return cGroup_10_1; }

		//"input-view-filter"
		public Keyword getInputViewFilterKeyword_10_1_0() { return cInputViewFilterKeyword_10_1_0; }

		//inputViewFilter=[core::DefineVariable]
		public Assignment getInputViewFilterAssignment_10_1_1() { return cInputViewFilterAssignment_10_1_1; }

		//[core::DefineVariable]
		public CrossReference getInputViewFilterDefineVariableCrossReference_10_1_1_0() { return cInputViewFilterDefineVariableCrossReference_10_1_1_0; }

		//ID
		public RuleCall getInputViewFilterDefineVariableIDTerminalRuleCall_10_1_1_0_1() { return cInputViewFilterDefineVariableIDTerminalRuleCall_10_1_1_0_1; }

		//("output-element" outputResolutionSourceElement=Expression "[" queueName=EString "." traceAttributeName=EString "]")?
		public Group getGroup_10_1_2() { return cGroup_10_1_2; }

		//"output-element"
		public Keyword getOutputElementKeyword_10_1_2_0() { return cOutputElementKeyword_10_1_2_0; }

		//outputResolutionSourceElement=Expression
		public Assignment getOutputResolutionSourceElementAssignment_10_1_2_1() { return cOutputResolutionSourceElementAssignment_10_1_2_1; }

		//Expression
		public RuleCall getOutputResolutionSourceElementExpressionParserRuleCall_10_1_2_1_0() { return cOutputResolutionSourceElementExpressionParserRuleCall_10_1_2_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_10_1_2_2() { return cLeftSquareBracketKeyword_10_1_2_2; }

		//queueName=EString
		public Assignment getQueueNameAssignment_10_1_2_3() { return cQueueNameAssignment_10_1_2_3; }

		//EString
		public RuleCall getQueueNameEStringParserRuleCall_10_1_2_3_0() { return cQueueNameEStringParserRuleCall_10_1_2_3_0; }

		//"."
		public Keyword getFullStopKeyword_10_1_2_4() { return cFullStopKeyword_10_1_2_4; }

		//traceAttributeName=EString
		public Assignment getTraceAttributeNameAssignment_10_1_2_5() { return cTraceAttributeNameAssignment_10_1_2_5; }

		//EString
		public RuleCall getTraceAttributeNameEStringParserRuleCall_10_1_2_5_0() { return cTraceAttributeNameEStringParserRuleCall_10_1_2_5_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_10_1_2_6() { return cRightSquareBracketKeyword_10_1_2_6; }
	}

	public class InvocationParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InvocationParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCalleeModelNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCalleeModelNameIDTerminalRuleCall_0_0 = (RuleCall)cCalleeModelNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModelAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cModelTransformationDefinitionParameterCrossReference_2_0 = (CrossReference)cModelAssignment_2.eContents().get(0);
		private final RuleCall cModelTransformationDefinitionParameterIDTerminalRuleCall_2_0_1 = (RuleCall)cModelTransformationDefinitionParameterCrossReference_2_0.eContents().get(1);
		
		//InvocationParameter returns qool::InvocationParameter:
		//	calleeModelName=ID "=" model=[core::TransformationDefinitionParameter];
		public ParserRule getRule() { return rule; }

		//calleeModelName=ID "=" model=[core::TransformationDefinitionParameter]
		public Group getGroup() { return cGroup; }

		//calleeModelName=ID
		public Assignment getCalleeModelNameAssignment_0() { return cCalleeModelNameAssignment_0; }

		//ID
		public RuleCall getCalleeModelNameIDTerminalRuleCall_0_0() { return cCalleeModelNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//model=[core::TransformationDefinitionParameter]
		public Assignment getModelAssignment_2() { return cModelAssignment_2; }

		//[core::TransformationDefinitionParameter]
		public CrossReference getModelTransformationDefinitionParameterCrossReference_2_0() { return cModelTransformationDefinitionParameterCrossReference_2_0; }

		//ID
		public RuleCall getModelTransformationDefinitionParameterIDTerminalRuleCall_2_0_1() { return cModelTransformationDefinitionParameterIDTerminalRuleCall_2_0_1; }
	}

	public class ForAllStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForAllStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cQueueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cQueueQoolQueueCrossReference_3_0 = (CrossReference)cQueueAssignment_3.eContents().get(0);
		private final RuleCall cQueueQoolQueueIDTerminalRuleCall_3_0_1 = (RuleCall)cQueueQoolQueueCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWhereKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cConditionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConditionExpressionParserRuleCall_4_1_0 = (RuleCall)cConditionAssignment_4_1.eContents().get(0);
		private final Assignment cStatementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementsStatementParserRuleCall_5_0 = (RuleCall)cStatementsAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ForAllStatement returns qool::ForAllStatement:
		//	"forall" name=ID "from" queue=[qool::QoolQueue] ("where" condition=Expression)? statements+=Statement+ "end";
		public ParserRule getRule() { return rule; }

		//"forall" name=ID "from" queue=[qool::QoolQueue] ("where" condition=Expression)? statements+=Statement+ "end"
		public Group getGroup() { return cGroup; }

		//"forall"
		public Keyword getForallKeyword_0() { return cForallKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"from"
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }

		//queue=[qool::QoolQueue]
		public Assignment getQueueAssignment_3() { return cQueueAssignment_3; }

		//[qool::QoolQueue]
		public CrossReference getQueueQoolQueueCrossReference_3_0() { return cQueueQoolQueueCrossReference_3_0; }

		//ID
		public RuleCall getQueueQoolQueueIDTerminalRuleCall_3_0_1() { return cQueueQoolQueueIDTerminalRuleCall_3_0_1; }

		//("where" condition=Expression)?
		public Group getGroup_4() { return cGroup_4; }

		//"where"
		public Keyword getWhereKeyword_4_0() { return cWhereKeyword_4_0; }

		//condition=Expression
		public Assignment getConditionAssignment_4_1() { return cConditionAssignment_4_1; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_4_1_0() { return cConditionExpressionParserRuleCall_4_1_0; }

		//statements+=Statement+
		public Assignment getStatementsAssignment_5() { return cStatementsAssignment_5; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_5_0() { return cStatementsStatementParserRuleCall_5_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}

	public class EmitStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EmitStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEmitKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cQueueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cQueueQoolQueueCrossReference_3_0 = (CrossReference)cQueueAssignment_3.eContents().get(0);
		private final RuleCall cQueueQoolQueueIDTerminalRuleCall_3_0_1 = (RuleCall)cQueueQoolQueueCrossReference_3_0.eContents().get(1);
		
		//EmitStatement returns qool::EmitStatement:
		//	"emit" value=Expression "to" queue=[qool::QoolQueue];
		public ParserRule getRule() { return rule; }

		//"emit" value=Expression "to" queue=[qool::QoolQueue]
		public Group getGroup() { return cGroup; }

		//"emit"
		public Keyword getEmitKeyword_0() { return cEmitKeyword_0; }

		//value=Expression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0() { return cValueExpressionParserRuleCall_1_0; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//queue=[qool::QoolQueue]
		public Assignment getQueueAssignment_3() { return cQueueAssignment_3; }

		//[qool::QoolQueue]
		public CrossReference getQueueQoolQueueCrossReference_3_0() { return cQueueQoolQueueCrossReference_3_0; }

		//ID
		public RuleCall getQueueQoolQueueIDTerminalRuleCall_3_0_1() { return cQueueQoolQueueIDTerminalRuleCall_3_0_1; }
	}

	public class MatchExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MatchExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQueueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cQueueQoolQueueCrossReference_0_0 = (CrossReference)cQueueAssignment_0.eContents().get(0);
		private final RuleCall cQueueQoolQueueIDTerminalRuleCall_0_0_1 = (RuleCall)cQueueQoolQueueCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPredicatesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredicatesPredicateParserRuleCall_2_0 = (RuleCall)cPredicatesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPredicatesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPredicatesPredicateParserRuleCall_3_1_0 = (RuleCall)cPredicatesAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MatchExpression returns qool::MatchExpression:
		//	queue=[qool::QoolQueue] "[" predicates+=Predicate ("," predicates+=Predicate)* "]";
		public ParserRule getRule() { return rule; }

		//queue=[qool::QoolQueue] "[" predicates+=Predicate ("," predicates+=Predicate)* "]"
		public Group getGroup() { return cGroup; }

		//queue=[qool::QoolQueue]
		public Assignment getQueueAssignment_0() { return cQueueAssignment_0; }

		//[qool::QoolQueue]
		public CrossReference getQueueQoolQueueCrossReference_0_0() { return cQueueQoolQueueCrossReference_0_0; }

		//ID
		public RuleCall getQueueQoolQueueIDTerminalRuleCall_0_0_1() { return cQueueQoolQueueIDTerminalRuleCall_0_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//predicates+=Predicate
		public Assignment getPredicatesAssignment_2() { return cPredicatesAssignment_2; }

		//Predicate
		public RuleCall getPredicatesPredicateParserRuleCall_2_0() { return cPredicatesPredicateParserRuleCall_2_0; }

		//("," predicates+=Predicate)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//predicates+=Predicate
		public Assignment getPredicatesAssignment_3_1() { return cPredicatesAssignment_3_1; }

		//Predicate
		public RuleCall getPredicatesPredicateParserRuleCall_3_1_0() { return cPredicatesPredicateParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Predicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cKindOfPredicateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyEqualsPredicateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Predicate returns qool::MatchPredicate:
		//	KindOfPredicate | PropertyEqualsPredicate;
		public ParserRule getRule() { return rule; }

		//KindOfPredicate | PropertyEqualsPredicate
		public Alternatives getAlternatives() { return cAlternatives; }

		//KindOfPredicate
		public RuleCall getKindOfPredicateParserRuleCall_0() { return cKindOfPredicateParserRuleCall_0; }

		//PropertyEqualsPredicate
		public RuleCall getPropertyEqualsPredicateParserRuleCall_1() { return cPropertyEqualsPredicateParserRuleCall_1; }
	}

	public class KindOfPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KindOfPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKindOfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClass_Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClass_ClassUseParserRuleCall_2_0 = (RuleCall)cClass_Assignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//KindOfPredicate returns qool::KindOfPredicate:
		//	"#kindOf" "(" class_=ClassUse ")";
		public ParserRule getRule() { return rule; }

		//"#kindOf" "(" class_=ClassUse ")"
		public Group getGroup() { return cGroup; }

		//"#kindOf"
		public Keyword getKindOfKeyword_0() { return cKindOfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//class_=ClassUse
		public Assignment getClass_Assignment_2() { return cClass_Assignment_2; }

		//ClassUse
		public RuleCall getClass_ClassUseParserRuleCall_2_0() { return cClass_ClassUseParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class PropertyEqualsPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyEqualsPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertyNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyNameEStringParserRuleCall_2_0 = (RuleCall)cPropertyNameAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueExpressionParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PropertyEqualsPredicate returns qool::PropertyEqualsPredicate:
		//	"#p" "(" propertyName=EString "," value=Expression ")";
		public ParserRule getRule() { return rule; }

		//"#p" "(" propertyName=EString "," value=Expression ")"
		public Group getGroup() { return cGroup; }

		//"#p"
		public Keyword getPKeyword_0() { return cPKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//propertyName=EString
		public Assignment getPropertyNameAssignment_2() { return cPropertyNameAssignment_2; }

		//EString
		public RuleCall getPropertyNameEStringParserRuleCall_2_0() { return cPropertyNameEStringParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//value=Expression
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_4_0() { return cValueExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class CopierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Copier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCopyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cObjectsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObjectsExpressionParserRuleCall_2_0 = (RuleCall)cObjectsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cObjectsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cObjectsExpressionParserRuleCall_3_1_0 = (RuleCall)cObjectsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cModelKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCopyInModelAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cCopyInModelTransformationDefinitionParameterCrossReference_6_0 = (CrossReference)cCopyInModelAssignment_6.eContents().get(0);
		private final RuleCall cCopyInModelTransformationDefinitionParameterIDTerminalRuleCall_6_0_1 = (RuleCall)cCopyInModelTransformationDefinitionParameterCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cCallbacksAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cCallbacksCopierCallbackDefinitionParserRuleCall_7_1_0 = (RuleCall)cCallbacksAssignment_7_1.eContents().get(0);
		private final Group cGroup_7_2 = (Group)cGroup_7.eContents().get(2);
		private final Keyword cCommaKeyword_7_2_0 = (Keyword)cGroup_7_2.eContents().get(0);
		private final Assignment cCallbacksAssignment_7_2_1 = (Assignment)cGroup_7_2.eContents().get(1);
		private final RuleCall cCallbacksCopierCallbackDefinitionParserRuleCall_7_2_1_0 = (RuleCall)cCallbacksAssignment_7_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//// Begin-of Facilities
		//Copier returns facilities::Copier:
		//	"copy" "(" objects+=Expression ("," objects+=Expression)* ")" "model"
		//	copyInModel=[core::TransformationDefinitionParameter] ("{" callbacks+=CopierCallbackDefinition (","
		//	callbacks+=CopierCallbackDefinition)* "}")?;
		public ParserRule getRule() { return rule; }

		//"copy" "(" objects+=Expression ("," objects+=Expression)* ")" "model"
		//copyInModel=[core::TransformationDefinitionParameter] ("{" callbacks+=CopierCallbackDefinition (","
		//callbacks+=CopierCallbackDefinition)* "}")?
		public Group getGroup() { return cGroup; }

		//"copy"
		public Keyword getCopyKeyword_0() { return cCopyKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//objects+=Expression
		public Assignment getObjectsAssignment_2() { return cObjectsAssignment_2; }

		//Expression
		public RuleCall getObjectsExpressionParserRuleCall_2_0() { return cObjectsExpressionParserRuleCall_2_0; }

		//("," objects+=Expression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//objects+=Expression
		public Assignment getObjectsAssignment_3_1() { return cObjectsAssignment_3_1; }

		//Expression
		public RuleCall getObjectsExpressionParserRuleCall_3_1_0() { return cObjectsExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"model"
		public Keyword getModelKeyword_5() { return cModelKeyword_5; }

		//copyInModel=[core::TransformationDefinitionParameter]
		public Assignment getCopyInModelAssignment_6() { return cCopyInModelAssignment_6; }

		//[core::TransformationDefinitionParameter]
		public CrossReference getCopyInModelTransformationDefinitionParameterCrossReference_6_0() { return cCopyInModelTransformationDefinitionParameterCrossReference_6_0; }

		//ID
		public RuleCall getCopyInModelTransformationDefinitionParameterIDTerminalRuleCall_6_0_1() { return cCopyInModelTransformationDefinitionParameterIDTerminalRuleCall_6_0_1; }

		//("{" callbacks+=CopierCallbackDefinition ("," callbacks+=CopierCallbackDefinition)* "}")?
		public Group getGroup_7() { return cGroup_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_0() { return cLeftCurlyBracketKeyword_7_0; }

		//callbacks+=CopierCallbackDefinition
		public Assignment getCallbacksAssignment_7_1() { return cCallbacksAssignment_7_1; }

		//CopierCallbackDefinition
		public RuleCall getCallbacksCopierCallbackDefinitionParserRuleCall_7_1_0() { return cCallbacksCopierCallbackDefinitionParserRuleCall_7_1_0; }

		//("," callbacks+=CopierCallbackDefinition)*
		public Group getGroup_7_2() { return cGroup_7_2; }

		//","
		public Keyword getCommaKeyword_7_2_0() { return cCommaKeyword_7_2_0; }

		//callbacks+=CopierCallbackDefinition
		public Assignment getCallbacksAssignment_7_2_1() { return cCallbacksAssignment_7_2_1; }

		//CopierCallbackDefinition
		public RuleCall getCallbacksCopierCallbackDefinitionParserRuleCall_7_2_1_0() { return cCallbacksCopierCallbackDefinitionParserRuleCall_7_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}

	public class CopierCallbackDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CopierCallbackDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cWithKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cStopAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cStopStopKeyword_0_1_0 = (Keyword)cStopAssignment_0_1.eContents().get(0);
		private final Assignment cTriggerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTriggerExpressionParserRuleCall_1_0 = (RuleCall)cTriggerAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionExpressionParserRuleCall_3_0 = (RuleCall)cActionAssignment_3.eContents().get(0);
		
		//// End-of facilities CopierCallbackDefinition returns facilities::CopierCallbackDefinition:
		//	("with" | stop?="stop") trigger=Expression "->" action=Expression;
		public ParserRule getRule() { return rule; }

		//("with" | stop?="stop") trigger=Expression "->" action=Expression
		public Group getGroup() { return cGroup; }

		//"with" | stop?="stop"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"with"
		public Keyword getWithKeyword_0_0() { return cWithKeyword_0_0; }

		//stop?="stop"
		public Assignment getStopAssignment_0_1() { return cStopAssignment_0_1; }

		//"stop"
		public Keyword getStopStopKeyword_0_1_0() { return cStopStopKeyword_0_1_0; }

		//trigger=Expression
		public Assignment getTriggerAssignment_1() { return cTriggerAssignment_1; }

		//Expression
		public RuleCall getTriggerExpressionParserRuleCall_1_0() { return cTriggerExpressionParserRuleCall_1_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }

		//action=Expression
		public Assignment getActionAssignment_3() { return cActionAssignment_3; }

		//Expression
		public RuleCall getActionExpressionParserRuleCall_3_0() { return cActionExpressionParserRuleCall_3_0; }
	}
	
	
	private QoolTransformationElements pQoolTransformation;
	private ImportedModelElements pImportedModel;
	private AnnotationElements pAnnotation;
	private MetamodelModelAnnotationElements pMetamodelModelAnnotation;
	private TransformationDefinitionParameterElements pTransformationDefinitionParameter;
	private InlineModelElements pInlineModel;
	private InlineClassElements pInlineClass;
	private InlineReferenceInlineElements pInlineReferenceInline;
	private InlineFeatureExpandedElements pInlineFeatureExpanded;
	private InlineAttributeExpandedElements pInlineAttributeExpanded;
	private InlineReferenceExpandedElements pInlineReferenceExpanded;
	private QoolQueueElements pQoolQueue;
	private LocalQueueElements pLocalQueue;
	private ModelElementQueueElements pModelElementQueue;
	private QueueOptimizationElements pQueueOptimization;
	private AccessByFeatureOptimizationElements pAccessByFeatureOptimization;
	private SegmentElements pSegment;
	private StatementElements pStatement;
	private PrimaryExpressionElements pPrimaryExpression;
	private NamedInvocationParameterElements pNamedInvocationParameter;
	private InvokeTransformationElements pInvokeTransformation;
	private InvokeInternalElements pInvokeInternal;
	private InvokeExternalElements pInvokeExternal;
	private InvocationParameterElements pInvocationParameter;
	private ForAllStatementElements pForAllStatement;
	private EmitStatementElements pEmitStatement;
	private MatchExpressionElements pMatchExpression;
	private PredicateElements pPredicate;
	private KindOfPredicateElements pKindOfPredicate;
	private PropertyEqualsPredicateElements pPropertyEqualsPredicate;
	private CopierElements pCopier;
	private CopierCallbackDefinitionElements pCopierCallbackDefinition;
	
	private final GrammarProvider grammarProvider;

	private ExpressionsGrammarAccess gaExpressions;

	@Inject
	public QoolGrammarAccess(GrammarProvider grammarProvider,
		ExpressionsGrammarAccess gaExpressions) {
		this.grammarProvider = grammarProvider;
		this.gaExpressions = gaExpressions;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public ExpressionsGrammarAccess getExpressionsGrammarAccess() {
		return gaExpressions;
	}

	
	////import "platform:/resource/modelum.eclectic.compiler/model/family/eclectic.frontend.ecore#//frontend" as frontend
	//QoolTransformation returns qool::QoolTransformation:
	//	"qool" name=EString // '(' left=[core::TransformationDefinitionParameter|EString] ')'
	//	//'(' (inModels+=TransformationDefinitionParameter {mappings::MappingTransformation.left = current}) ')'
	//	"(" inModels+=TransformationDefinitionParameter ("," inModels+=TransformationDefinitionParameter)* ")" "->" "("
	//	(outModels+=TransformationDefinitionParameter ("," outModels+=TransformationDefinitionParameter)*)? ")"
	//	annotations+=Annotation* // like this to resolve a reference: it is not the case
	//	//'(' right=[core::TransformationDefinitionParameter|EString] ')'
	//	// ('annotations' '{' annotations+=Annotation ( "," annotations+=Annotation)* '}' )?
	//	//('inModels' '{' inModels+=TransformationDefinitionParameter ( "," inModels+=TransformationDefinitionParameter)* '}' )?
	//	// ('outModels' '{' outModels+=TransformationDefinitionParameter ( "," outModels+=TransformationDefinitionParameter)* '}' )?
	//	// (traceInterface = TraceInterface)
	//	inlineModels+=InlineModel* importedModels+=ImportedModel* queues+=QoolQueue+ segments+=Segment+;
	public QoolTransformationElements getQoolTransformationAccess() {
		return (pQoolTransformation != null) ? pQoolTransformation : (pQoolTransformation = new QoolTransformationElements());
	}
	
	public ParserRule getQoolTransformationRule() {
		return getQoolTransformationAccess().getRule();
	}

	//// This is to allow serialization...
	//ImportedModel returns core::ImportedModel:
	//	"imported" name=EString;
	public ImportedModelElements getImportedModelAccess() {
		return (pImportedModel != null) ? pImportedModel : (pImportedModel = new ImportedModelElements());
	}
	
	public ParserRule getImportedModelRule() {
		return getImportedModelAccess().getRule();
	}

	//// @common
	//Annotation returns core::Annotation:
	//	MetamodelModelAnnotation;
	public AnnotationElements getAnnotationAccess() {
		return (pAnnotation != null) ? pAnnotation : (pAnnotation = new AnnotationElements());
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	//MetamodelModelAnnotation returns core::MetamodelModelAnnotation:
	//	annotatedElement=[core::RepresentModel] ":" metamodel=STRING;
	public MetamodelModelAnnotationElements getMetamodelModelAnnotationAccess() {
		return (pMetamodelModelAnnotation != null) ? pMetamodelModelAnnotation : (pMetamodelModelAnnotation = new MetamodelModelAnnotationElements());
	}
	
	public ParserRule getMetamodelModelAnnotationRule() {
		return getMetamodelModelAnnotationAccess().getRule();
	}

	//TransformationDefinitionParameter returns core::TransformationDefinitionParameter:
	//	{core::TransformationDefinitionParameter} name=EString;
	public TransformationDefinitionParameterElements getTransformationDefinitionParameterAccess() {
		return (pTransformationDefinitionParameter != null) ? pTransformationDefinitionParameter : (pTransformationDefinitionParameter = new TransformationDefinitionParameterElements());
	}
	
	public ParserRule getTransformationDefinitionParameterRule() {
		return getTransformationDefinitionParameterAccess().getRule();
	}

	//InlineModel returns core::InlineModel:
	//	"model" name=EString classes+=InlineClass+ "end";
	public InlineModelElements getInlineModelAccess() {
		return (pInlineModel != null) ? pInlineModel : (pInlineModel = new InlineModelElements());
	}
	
	public ParserRule getInlineModelRule() {
		return getInlineModelAccess().getRule();
	}

	//InlineClass returns core::InlineClass:
	//	"class" name=EString ("{" features+=InlineReferenceInline (";" features+=InlineReferenceInline)* "}" |
	//	features+=InlineFeatureExpanded features+=InlineFeatureExpanded* "end");
	public InlineClassElements getInlineClassAccess() {
		return (pInlineClass != null) ? pInlineClass : (pInlineClass = new InlineClassElements());
	}
	
	public ParserRule getInlineClassRule() {
		return getInlineClassAccess().getRule();
	}

	//InlineReferenceInline returns core::InlineReference:
	//	name=EString ":" type=TypeExpression;
	public InlineReferenceInlineElements getInlineReferenceInlineAccess() {
		return (pInlineReferenceInline != null) ? pInlineReferenceInline : (pInlineReferenceInline = new InlineReferenceInlineElements());
	}
	
	public ParserRule getInlineReferenceInlineRule() {
		return getInlineReferenceInlineAccess().getRule();
	}

	//InlineFeatureExpanded returns core::InlineFeature:
	//	InlineAttributeExpanded | InlineReferenceExpanded;
	public InlineFeatureExpandedElements getInlineFeatureExpandedAccess() {
		return (pInlineFeatureExpanded != null) ? pInlineFeatureExpanded : (pInlineFeatureExpanded = new InlineFeatureExpandedElements());
	}
	
	public ParserRule getInlineFeatureExpandedRule() {
		return getInlineFeatureExpandedAccess().getRule();
	}

	//InlineAttributeExpanded returns core::InlineAttribute:
	//	"att" name=EString ":" type=TypeExpression multivalued?="*"?;
	public InlineAttributeExpandedElements getInlineAttributeExpandedAccess() {
		return (pInlineAttributeExpanded != null) ? pInlineAttributeExpanded : (pInlineAttributeExpanded = new InlineAttributeExpandedElements());
	}
	
	public ParserRule getInlineAttributeExpandedRule() {
		return getInlineAttributeExpandedAccess().getRule();
	}

	//InlineReferenceExpanded returns core::InlineReference:
	//	"ref" name=EString ":" type=TypeExpression multivalued?="*"?;
	public InlineReferenceExpandedElements getInlineReferenceExpandedAccess() {
		return (pInlineReferenceExpanded != null) ? pInlineReferenceExpanded : (pInlineReferenceExpanded = new InlineReferenceExpandedElements());
	}
	
	public ParserRule getInlineReferenceExpandedRule() {
		return getInlineReferenceExpandedAccess().getRule();
	}

	//// -- Queue 
	//QoolQueue returns qool::QoolQueue:
	//	LocalQueue | ModelElementQueue;
	public QoolQueueElements getQoolQueueAccess() {
		return (pQoolQueue != null) ? pQoolQueue : (pQoolQueue = new QoolQueueElements());
	}
	
	public ParserRule getQoolQueueRule() {
		return getQoolQueueAccess().getRule();
	}

	//LocalQueue returns qool::LocalQueue:
	//	"local" "queue" name=ID ":" type_=TypeExpression ("with" optimizations+=QueueOptimization+)?;
	public LocalQueueElements getLocalQueueAccess() {
		return (pLocalQueue != null) ? pLocalQueue : (pLocalQueue = new LocalQueueElements());
	}
	
	public ParserRule getLocalQueueRule() {
		return getLocalQueueAccess().getRule();
	}

	//ModelElementQueue returns qool::ModelElementQueue:
	//	"model" "queue" name=ID ":" class_=ClassUse ("," additionals+=ClassUse)*;
	public ModelElementQueueElements getModelElementQueueAccess() {
		return (pModelElementQueue != null) ? pModelElementQueue : (pModelElementQueue = new ModelElementQueueElements());
	}
	
	public ParserRule getModelElementQueueRule() {
		return getModelElementQueueAccess().getRule();
	}

	//QueueOptimization returns qool::QueueOptimization:
	//	AccessByFeatureOptimization;
	public QueueOptimizationElements getQueueOptimizationAccess() {
		return (pQueueOptimization != null) ? pQueueOptimization : (pQueueOptimization = new QueueOptimizationElements());
	}
	
	public ParserRule getQueueOptimizationRule() {
		return getQueueOptimizationAccess().getRule();
	}

	//AccessByFeatureOptimization returns qool::AccessByFeatureOptimization:
	//	"access-by" featureName=EString force?="!"?;
	public AccessByFeatureOptimizationElements getAccessByFeatureOptimizationAccess() {
		return (pAccessByFeatureOptimization != null) ? pAccessByFeatureOptimization : (pAccessByFeatureOptimization = new AccessByFeatureOptimizationElements());
	}
	
	public ParserRule getAccessByFeatureOptimizationRule() {
		return getAccessByFeatureOptimizationAccess().getRule();
	}

	//// -- Segments and expressions
	//Segment returns qool::Segment:
	//	"segment" name=EString statements+=Statement+ "end";
	public SegmentElements getSegmentAccess() {
		return (pSegment != null) ? pSegment : (pSegment = new SegmentElements());
	}
	
	public ParserRule getSegmentRule() {
		return getSegmentAccess().getRule();
	}

	//// redefine
	//Statement returns core::Statement:
	//	DefineVariable // | ForEachStatement
	//	| Expression | PutTraceExpression | PropertyWrite | ForAllStatement | EmitStatement;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//// redefine
	//PrimaryExpression returns core::Expression:
	//	Literal // Facilities
	//	| VariableReference | ModelReference | ParenthesizedExpression | MatchTraceExpression | ClosureDeclaration | // <-- added for qool
	//	MatchExpression | InvokeTransformation | Copier;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//NamedInvocationParameter returns qool::NamedInvocationParameter:
	//	formalName=EString "=" actualParameter=Expression;
	public NamedInvocationParameterElements getNamedInvocationParameterAccess() {
		return (pNamedInvocationParameter != null) ? pNamedInvocationParameter : (pNamedInvocationParameter = new NamedInvocationParameterElements());
	}
	
	public ParserRule getNamedInvocationParameterRule() {
		return getNamedInvocationParameterAccess().getRule();
	}

	//InvokeTransformation returns qool::InvokeTransformation:
	//	InvokeExternal | InvokeInternal;
	public InvokeTransformationElements getInvokeTransformationAccess() {
		return (pInvokeTransformation != null) ? pInvokeTransformation : (pInvokeTransformation = new InvokeTransformationElements());
	}
	
	public ParserRule getInvokeTransformationRule() {
		return getInvokeTransformationAccess().getRule();
	}

	//InvokeInternal returns qool::InvokeInternal:
	//	"invoke-internal" transformationName=QualifiedName "(" (sourceModels+=InvocationParameter (","
	//	sourceModels+=InvocationParameter)*)? ")" "->" "(" (targetModels+=InvocationParameter (","
	//	targetModels+=InvocationParameter)*)? ")" ("input-view-filter" inputViewFilter=[core::DefineVariable])? ("entrypoint"
	//	entryPointName=ID "(" entryPointParameters+=Expression? ("," entryPointParameters+=Expression)* ")")?;
	public InvokeInternalElements getInvokeInternalAccess() {
		return (pInvokeInternal != null) ? pInvokeInternal : (pInvokeInternal = new InvokeInternalElements());
	}
	
	public ParserRule getInvokeInternalRule() {
		return getInvokeInternalAccess().getRule();
	}

	//InvokeExternal returns qool::InvokeExternal:
	//	"invoke-external" transformationName=QualifiedName "(" (sourceModels+=InvocationParameter (","
	//	sourceModels+=InvocationParameter)*)? ")" "->" "(" (targetModels+=InvocationParameter (","
	//	targetModels+=InvocationParameter)*)? ")" ("+" "(" parameters+=NamedInvocationParameter (","
	//	parameters+=NamedInvocationParameter)* ")")? (("entrypoint" entryPointName=ID "(" entryPointParameters+=Expression?
	//	("," entryPointParameters+=Expression)* ")")? | "input-view-filter" inputViewFilter=[core::DefineVariable]
	//	("output-element" outputResolutionSourceElement=Expression "[" queueName=EString "." traceAttributeName=EString
	//	"]")?);
	public InvokeExternalElements getInvokeExternalAccess() {
		return (pInvokeExternal != null) ? pInvokeExternal : (pInvokeExternal = new InvokeExternalElements());
	}
	
	public ParserRule getInvokeExternalRule() {
		return getInvokeExternalAccess().getRule();
	}

	//InvocationParameter returns qool::InvocationParameter:
	//	calleeModelName=ID "=" model=[core::TransformationDefinitionParameter];
	public InvocationParameterElements getInvocationParameterAccess() {
		return (pInvocationParameter != null) ? pInvocationParameter : (pInvocationParameter = new InvocationParameterElements());
	}
	
	public ParserRule getInvocationParameterRule() {
		return getInvocationParameterAccess().getRule();
	}

	//ForAllStatement returns qool::ForAllStatement:
	//	"forall" name=ID "from" queue=[qool::QoolQueue] ("where" condition=Expression)? statements+=Statement+ "end";
	public ForAllStatementElements getForAllStatementAccess() {
		return (pForAllStatement != null) ? pForAllStatement : (pForAllStatement = new ForAllStatementElements());
	}
	
	public ParserRule getForAllStatementRule() {
		return getForAllStatementAccess().getRule();
	}

	//EmitStatement returns qool::EmitStatement:
	//	"emit" value=Expression "to" queue=[qool::QoolQueue];
	public EmitStatementElements getEmitStatementAccess() {
		return (pEmitStatement != null) ? pEmitStatement : (pEmitStatement = new EmitStatementElements());
	}
	
	public ParserRule getEmitStatementRule() {
		return getEmitStatementAccess().getRule();
	}

	//MatchExpression returns qool::MatchExpression:
	//	queue=[qool::QoolQueue] "[" predicates+=Predicate ("," predicates+=Predicate)* "]";
	public MatchExpressionElements getMatchExpressionAccess() {
		return (pMatchExpression != null) ? pMatchExpression : (pMatchExpression = new MatchExpressionElements());
	}
	
	public ParserRule getMatchExpressionRule() {
		return getMatchExpressionAccess().getRule();
	}

	//Predicate returns qool::MatchPredicate:
	//	KindOfPredicate | PropertyEqualsPredicate;
	public PredicateElements getPredicateAccess() {
		return (pPredicate != null) ? pPredicate : (pPredicate = new PredicateElements());
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}

	//KindOfPredicate returns qool::KindOfPredicate:
	//	"#kindOf" "(" class_=ClassUse ")";
	public KindOfPredicateElements getKindOfPredicateAccess() {
		return (pKindOfPredicate != null) ? pKindOfPredicate : (pKindOfPredicate = new KindOfPredicateElements());
	}
	
	public ParserRule getKindOfPredicateRule() {
		return getKindOfPredicateAccess().getRule();
	}

	//PropertyEqualsPredicate returns qool::PropertyEqualsPredicate:
	//	"#p" "(" propertyName=EString "," value=Expression ")";
	public PropertyEqualsPredicateElements getPropertyEqualsPredicateAccess() {
		return (pPropertyEqualsPredicate != null) ? pPropertyEqualsPredicate : (pPropertyEqualsPredicate = new PropertyEqualsPredicateElements());
	}
	
	public ParserRule getPropertyEqualsPredicateRule() {
		return getPropertyEqualsPredicateAccess().getRule();
	}

	//// Begin-of Facilities
	//Copier returns facilities::Copier:
	//	"copy" "(" objects+=Expression ("," objects+=Expression)* ")" "model"
	//	copyInModel=[core::TransformationDefinitionParameter] ("{" callbacks+=CopierCallbackDefinition (","
	//	callbacks+=CopierCallbackDefinition)* "}")?;
	public CopierElements getCopierAccess() {
		return (pCopier != null) ? pCopier : (pCopier = new CopierElements());
	}
	
	public ParserRule getCopierRule() {
		return getCopierAccess().getRule();
	}

	//// End-of facilities CopierCallbackDefinition returns facilities::CopierCallbackDefinition:
	//	("with" | stop?="stop") trigger=Expression "->" action=Expression;
	public CopierCallbackDefinitionElements getCopierCallbackDefinitionAccess() {
		return (pCopierCallbackDefinition != null) ? pCopierCallbackDefinition : (pCopierCallbackDefinition = new CopierCallbackDefinitionElements());
	}
	
	public ParserRule getCopierCallbackDefinitionRule() {
		return getCopierCallbackDefinitionAccess().getRule();
	}

	//// Begin-of Core
	//TraceInterface returns core::TraceInterface:
	//	"trace" name=EString definitions+=TraceDefinition+ "end";
	public ExpressionsGrammarAccess.TraceInterfaceElements getTraceInterfaceAccess() {
		return gaExpressions.getTraceInterfaceAccess();
	}
	
	public ParserRule getTraceInterfaceRule() {
		return getTraceInterfaceAccess().getRule();
	}

	//TraceDefinition returns core::TraceDefinition:
	//	"link" name=EString ("{" elements+=TraceElementInline (";" elements+=TraceElementInline)* "}" |
	//	elements+=TraceElementExpanded elements+=TraceElementExpanded* "end");
	public ExpressionsGrammarAccess.TraceDefinitionElements getTraceDefinitionAccess() {
		return gaExpressions.getTraceDefinitionAccess();
	}
	
	public ParserRule getTraceDefinitionRule() {
		return getTraceDefinitionAccess().getRule();
	}

	//TraceElementInline returns core::TraceElement:
	//	name=EString ":" type=TypeExpression;
	public ExpressionsGrammarAccess.TraceElementInlineElements getTraceElementInlineAccess() {
		return gaExpressions.getTraceElementInlineAccess();
	}
	
	public ParserRule getTraceElementInlineRule() {
		return getTraceElementInlineAccess().getRule();
	}

	//TraceElementExpanded returns core::TraceElement:
	//	"var" name=EString ":" type=TypeExpression;
	public ExpressionsGrammarAccess.TraceElementExpandedElements getTraceElementExpandedAccess() {
		return gaExpressions.getTraceElementExpandedAccess();
	}
	
	public ParserRule getTraceElementExpandedRule() {
		return getTraceElementExpandedAccess().getRule();
	}

	//TypeExpression returns core::TypeExpression:
	//	ClassUse;
	public ExpressionsGrammarAccess.TypeExpressionElements getTypeExpressionAccess() {
		return gaExpressions.getTypeExpressionAccess();
	}
	
	public ParserRule getTypeExpressionRule() {
		return getTypeExpressionAccess().getRule();
	}

	//ClassUse returns core::ClassUse:
	//	model=[core::RepresentModel] "!" className=ID annotations+=SingleAnnotation? strictType?="!"?;
	public ExpressionsGrammarAccess.ClassUseElements getClassUseAccess() {
		return gaExpressions.getClassUseAccess();
	}
	
	public ParserRule getClassUseRule() {
		return getClassUseAccess().getRule();
	}

	//SingleAnnotation returns core::SingleAnnotation:
	//	PotencyAnnotation;
	public ExpressionsGrammarAccess.SingleAnnotationElements getSingleAnnotationAccess() {
		return gaExpressions.getSingleAnnotationAccess();
	}
	
	public ParserRule getSingleAnnotationRule() {
		return getSingleAnnotationAccess().getRule();
	}

	//PotencyAnnotation returns core::PotencyAnnotation:
	//	("@" | "^") value=INT;
	public ExpressionsGrammarAccess.PotencyAnnotationElements getPotencyAnnotationAccess() {
		return gaExpressions.getPotencyAnnotationAccess();
	}
	
	public ParserRule getPotencyAnnotationRule() {
		return getPotencyAnnotationAccess().getRule();
	}

	//PropertyWrite returns core::PropertyWrite:
	//	receptor=[core::Variable] "." property=ID "=" expression=Expression;
	public ExpressionsGrammarAccess.PropertyWriteElements getPropertyWriteAccess() {
		return gaExpressions.getPropertyWriteAccess();
	}
	
	public ParserRule getPropertyWriteRule() {
		return getPropertyWriteAccess().getRule();
	}

	//DefineVariable returns core::DefineVariable:
	//	name=EString "=" expression=Expression;
	public ExpressionsGrammarAccess.DefineVariableElements getDefineVariableAccess() {
		return gaExpressions.getDefineVariableAccess();
	}
	
	public ParserRule getDefineVariableRule() {
		return getDefineVariableAccess().getRule();
	}

	//// ClassUse How to reuse ClassUse?? 
	//ModelReference returns core::ModelReference:
	//	model=[core::RepresentModel] "!" className=EString;
	public ExpressionsGrammarAccess.ModelReferenceElements getModelReferenceAccess() {
		return gaExpressions.getModelReferenceAccess();
	}
	
	public ParserRule getModelReferenceRule() {
		return getModelReferenceAccess().getRule();
	}

	//Expression returns core::Expression:
	//	MethodCall;
	public ExpressionsGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaExpressions.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	////BinaryExpr returns core::BinaryExpr:
	////	left=Expression  binaryOp=BinaryOp right=Expression 
	////;
	//enum BinaryOp returns core::BinaryOp:
	//	ADD="+" | SUB="-" | MUL="*" | DIV="/";
	public ExpressionsGrammarAccess.BinaryOpElements getBinaryOpAccess() {
		return gaExpressions.getBinaryOpAccess();
	}
	
	public EnumRule getBinaryOpRule() {
		return getBinaryOpAccess().getRule();
	}

	//ParenthesizedExpression returns core::Expression:
	//	"(" Expression ")";
	public ExpressionsGrammarAccess.ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return gaExpressions.getParenthesizedExpressionAccess();
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//Literal returns core::Expression:
	//	FloatLiteral | NumLiteral | StringLiteral | BooleanLiteral;
	public ExpressionsGrammarAccess.LiteralElements getLiteralAccess() {
		return gaExpressions.getLiteralAccess();
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//VariableReference returns core::VariableReference:
	//	variable=[core::Variable];
	public ExpressionsGrammarAccess.VariableReferenceElements getVariableReferenceAccess() {
		return gaExpressions.getVariableReferenceAccess();
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	//ClosureDeclaration returns core::ClosureDeclaration:
	//	"{" ("|" formalParameters+=ClosureParameter ("," formalParameters+=ClosureParameter)* "|")? statements+=Statement+
	//	"}";
	public ExpressionsGrammarAccess.ClosureDeclarationElements getClosureDeclarationAccess() {
		return gaExpressions.getClosureDeclarationAccess();
	}
	
	public ParserRule getClosureDeclarationRule() {
		return getClosureDeclarationAccess().getRule();
	}

	//ClosureParameter returns core::ClosureParameter:
	//	name=ID;
	public ExpressionsGrammarAccess.ClosureParameterElements getClosureParameterAccess() {
		return gaExpressions.getClosureParameterAccess();
	}
	
	public ParserRule getClosureParameterRule() {
		return getClosureParameterAccess().getRule();
	}

	//MethodCall returns core::Expression:
	//	PrimaryExpression ({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression //|	( ({core::MethodCall.receptor = current}) "." methodName=EString )
	//	//|   (=> ({core::KeywordMethodCall.receptor = current}) "." (parameters+=KeywordParameter)+  )
	//	//|   (=> ({core::KeywordMethodCall.receptor = current}) (parameters+=KeywordParameter)+  )+	
	//	| (=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
	//	parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)+)?;
	public ExpressionsGrammarAccess.MethodCallElements getMethodCallAccess() {
		return gaExpressions.getMethodCallAccess();
	}
	
	public ParserRule getMethodCallRule() {
		return getMethodCallAccess().getRule();
	}

	//WithResolveMethodCall returns core::Expression:
	//	PrimaryExpression ({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression // to allow accessing attributes	
	//	| (({core::ResolveLink.expr=current} "[" (module=[core::UseDeclaration] isExternal?="!")? linkName=EString ("."
	//	featureName=EString)? "]") (=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="("
	//	parameters+=Expression ("," parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)?)+ | ((=>
	//	({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
	//	parameters+=Expression)* ")")? parameters+=ClosureDeclaration?) ({core::ResolveLink.expr=current} "["
	//	(module=[core::UseDeclaration] isExternal?="!")? linkName=EString ("." featureName=EString)? "]")?)+)? // ? ( ({attr::AttributeUse.expr = current}) "[" attribute=[attr::AttributeDcl] "]" )?
	//;
	public ExpressionsGrammarAccess.WithResolveMethodCallElements getWithResolveMethodCallAccess() {
		return gaExpressions.getWithResolveMethodCallAccess();
	}
	
	public ParserRule getWithResolveMethodCallRule() {
		return getWithResolveMethodCallAccess().getRule();
	}

	/// *
	//WithResolveMethodCall returns core::Expression:
	//	PrimaryExpression
	//	(
	//		( ({core::BinaryExpr.left = current}) binaryOp=BinaryOp right=Expression)		
	//		| ( ( ({core::ResolveLink.expr = current}) "[" linkName=EString "]" )
	//			(=> ({core::MethodCall.receptor = current}) "." methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")" )? (parameters+=ClosureDeclaration)?  )?
	//			)+
	//	    | ( (=> ({core::MethodCall.receptor = current}) "." methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")" )? (parameters+=ClosureDeclaration)?  )
	//			  (({core::ResolveLink.expr = current}) "[" linkName=EString "]")? )+
	//        // to allow accessing attributes	
	//	)? // ? ( ({attr::AttributeUse.expr = current}) "[" attribute=[attr::AttributeDcl] "]" )?
	//;
	// * / / *
	//class ResolveLink extends Expression {
	//   val Expression[1] expr;
	//   attr Boolean[1] isExternal = false;
	//   ref UseDeclaration[0..1] module;
	//
	//   attr String[1] linkName;
	//   attr String[0..1] featureName;
	//}
	// * / KeywordParameter returns core::KeywordParameter:
	//	keyword=KEYWORD_ID value=Expression;
	public ExpressionsGrammarAccess.KeywordParameterElements getKeywordParameterAccess() {
		return gaExpressions.getKeywordParameterAccess();
	}
	
	public ParserRule getKeywordParameterRule() {
		return getKeywordParameterAccess().getRule();
	}

	//terminal KEYWORD_ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")* ":";
	public TerminalRule getKEYWORD_IDRule() {
		return gaExpressions.getKEYWORD_IDRule();
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaExpressions.getIDRule();
	} 

	//MatchTraceExpression returns core::MatchTrace:
	//	"match" (ID "!")? trace=[core::TraceDefinition] "with" "[" traceExpr=TraceExprLanguage "]";
	public ExpressionsGrammarAccess.MatchTraceExpressionElements getMatchTraceExpressionAccess() {
		return gaExpressions.getMatchTraceExpressionAccess();
	}
	
	public ParserRule getMatchTraceExpressionRule() {
		return getMatchTraceExpressionAccess().getRule();
	}

	//// TODO: Resolve!! 
	//TraceExprLanguage returns core::TraceCompareExpression:
	//	traceVar=[core::TraceElement] "=" expr=Expression;
	public ExpressionsGrammarAccess.TraceExprLanguageElements getTraceExprLanguageAccess() {
		return gaExpressions.getTraceExprLanguageAccess();
	}
	
	public ParserRule getTraceExprLanguageRule() {
		return getTraceExprLanguageAccess().getRule();
	}

	//PutTraceExpression returns core::PutTrace:
	//	"put" (ID "!")? trace=[core::TraceDefinition] "with" "[" parameters+=PutTraceParameter (","
	//	parameters+=PutTraceParameter)+ "]";
	public ExpressionsGrammarAccess.PutTraceExpressionElements getPutTraceExpressionAccess() {
		return gaExpressions.getPutTraceExpressionAccess();
	}
	
	public ParserRule getPutTraceExpressionRule() {
		return getPutTraceExpressionAccess().getRule();
	}

	//PutTraceParameter returns core::PutTraceParameter:
	//	traceVar=[core::TraceElement] "=" value=Expression;
	public ExpressionsGrammarAccess.PutTraceParameterElements getPutTraceParameterAccess() {
		return gaExpressions.getPutTraceParameterAccess();
	}
	
	public ParserRule getPutTraceParameterRule() {
		return getPutTraceParameterAccess().getRule();
	}

	/// *
	//MethodCall returns core::MethodCall:
	//	receptor=Expression "." methodName=EString
	//	("(" parameters+=Expression ("," parameters+=Expression)* ")")?
	//; 
	// * / / *
	// 
	// => indica precedencia
	//XMemberFeatureCall returns XExpression:
	//        XPrimaryExpression
	//        (=>({XAssignment.assignable=current} '.' feature=[types::JvmIdentifiableElement|ValidID] OpSingleAssign) value=XAssignment
	//        |=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|spreading?="*.")) 
	//                ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
	//                feature=[types::JvmIdentifiableElement|ValidID] (
	//                        =>explicitOperationCall?='(' 
	//                                (
	//                                    memberCallArguments+=XShortClosure
	//                                  |     memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	//                                )? 
	//                        ')')?
	//                )*;
	//
	//XPrimaryExpression returns XExpression:
	//        XConstructorCall |
	//        XBlockExpression |
	//        XSwitchExpression |
	//        XFeatureCall |
	//        XLiteral |
	//        XIfExpression |
	//        XForLoopExpression |
	//        XWhileExpression |
	//        XDoWhileExpression |
	//        XThrowExpression |
	//        XReturnExpression |
	//        XTryCatchFinallyExpression |
	//        XParenthesizedExpression;
	// * / NumLiteral returns core::NumLiteral:
	//	value=EInt;
	public ExpressionsGrammarAccess.NumLiteralElements getNumLiteralAccess() {
		return gaExpressions.getNumLiteralAccess();
	}
	
	public ParserRule getNumLiteralRule() {
		return getNumLiteralAccess().getRule();
	}

	//FloatLiteral returns core::DoubleLiteral:
	//	value=EDouble;
	public ExpressionsGrammarAccess.FloatLiteralElements getFloatLiteralAccess() {
		return gaExpressions.getFloatLiteralAccess();
	}
	
	public ParserRule getFloatLiteralRule() {
		return getFloatLiteralAccess().getRule();
	}

	//EDouble returns ecore::EDouble:
	//	INT "." INT;
	public ExpressionsGrammarAccess.EDoubleElements getEDoubleAccess() {
		return gaExpressions.getEDoubleAccess();
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}

	//StringLiteral returns core::StringLiteral:
	//	value=STRING;
	public ExpressionsGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaExpressions.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//BooleanLiteral returns core::BooleanLiteral:
	//	value=EBoolean;
	public ExpressionsGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaExpressions.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//// End-of Core
	//EString returns ecore::EString:
	//	STRING | ID;
	public ExpressionsGrammarAccess.EStringElements getEStringAccess() {
		return gaExpressions.getEStringAccess();
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public ExpressionsGrammarAccess.EIntElements getEIntAccess() {
		return gaExpressions.getEIntAccess();
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public ExpressionsGrammarAccess.EBooleanElements getEBooleanAccess() {
		return gaExpressions.getEBooleanAccess();
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//QualifiedName returns ecore::EString:
	//	EString ("." EString)*;
	public ExpressionsGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaExpressions.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaExpressions.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaExpressions.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaExpressions.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaExpressions.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaExpressions.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaExpressions.getANY_OTHERRule();
	} 
}
