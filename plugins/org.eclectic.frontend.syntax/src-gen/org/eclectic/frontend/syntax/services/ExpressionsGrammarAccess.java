/*
* generated by Xtext
*/

package org.eclectic.frontend.syntax.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ExpressionsGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TraceInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TraceInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTraceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDefinitionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefinitionsTraceDefinitionParserRuleCall_2_0 = (RuleCall)cDefinitionsAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Begin-of Core
		//TraceInterface returns core::TraceInterface:
		//	"trace" name=EString definitions+=TraceDefinition+ "end";
		public ParserRule getRule() { return rule; }

		//"trace" name=EString definitions+=TraceDefinition+ "end"
		public Group getGroup() { return cGroup; }

		//"trace"
		public Keyword getTraceKeyword_0() { return cTraceKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//definitions+=TraceDefinition+
		public Assignment getDefinitionsAssignment_2() { return cDefinitionsAssignment_2; }

		//TraceDefinition
		public RuleCall getDefinitionsTraceDefinitionParserRuleCall_2_0() { return cDefinitionsTraceDefinitionParserRuleCall_2_0; }

		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}

	public class TraceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TraceDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cElementsAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cElementsTraceElementInlineParserRuleCall_2_0_1_0 = (RuleCall)cElementsAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cGroup_2_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_0_2_0 = (Keyword)cGroup_2_0_2.eContents().get(0);
		private final Assignment cElementsAssignment_2_0_2_1 = (Assignment)cGroup_2_0_2.eContents().get(1);
		private final RuleCall cElementsTraceElementInlineParserRuleCall_2_0_2_1_0 = (RuleCall)cElementsAssignment_2_0_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_0_3 = (Keyword)cGroup_2_0.eContents().get(3);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cElementsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cElementsTraceElementExpandedParserRuleCall_2_1_0_0 = (RuleCall)cElementsAssignment_2_1_0.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsTraceElementExpandedParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cEndKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//TraceDefinition returns core::TraceDefinition:
		//	"link" name=EString ("{" elements+=TraceElementInline (";" elements+=TraceElementInline)* "}" |
		//	elements+=TraceElementExpanded elements+=TraceElementExpanded* "end");
		public ParserRule getRule() { return rule; }

		//"link" name=EString ("{" elements+=TraceElementInline (";" elements+=TraceElementInline)* "}" |
		//elements+=TraceElementExpanded elements+=TraceElementExpanded* "end")
		public Group getGroup() { return cGroup; }

		//"link"
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//"{" elements+=TraceElementInline (";" elements+=TraceElementInline)* "}" | elements+=TraceElementExpanded
		//elements+=TraceElementExpanded* "end"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"{" elements+=TraceElementInline (";" elements+=TraceElementInline)* "}"
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0_0() { return cLeftCurlyBracketKeyword_2_0_0; }

		//elements+=TraceElementInline
		public Assignment getElementsAssignment_2_0_1() { return cElementsAssignment_2_0_1; }

		//TraceElementInline
		public RuleCall getElementsTraceElementInlineParserRuleCall_2_0_1_0() { return cElementsTraceElementInlineParserRuleCall_2_0_1_0; }

		//(";" elements+=TraceElementInline)*
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }

		//";"
		public Keyword getSemicolonKeyword_2_0_2_0() { return cSemicolonKeyword_2_0_2_0; }

		//elements+=TraceElementInline
		public Assignment getElementsAssignment_2_0_2_1() { return cElementsAssignment_2_0_2_1; }

		//TraceElementInline
		public RuleCall getElementsTraceElementInlineParserRuleCall_2_0_2_1_0() { return cElementsTraceElementInlineParserRuleCall_2_0_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_0_3() { return cRightCurlyBracketKeyword_2_0_3; }

		//elements+=TraceElementExpanded elements+=TraceElementExpanded* "end"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//elements+=TraceElementExpanded
		public Assignment getElementsAssignment_2_1_0() { return cElementsAssignment_2_1_0; }

		//TraceElementExpanded
		public RuleCall getElementsTraceElementExpandedParserRuleCall_2_1_0_0() { return cElementsTraceElementExpandedParserRuleCall_2_1_0_0; }

		//elements+=TraceElementExpanded*
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }

		//TraceElementExpanded
		public RuleCall getElementsTraceElementExpandedParserRuleCall_2_1_1_0() { return cElementsTraceElementExpandedParserRuleCall_2_1_1_0; }

		//"end"
		public Keyword getEndKeyword_2_1_2() { return cEndKeyword_2_1_2; }
	}

	public class TraceElementInlineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TraceElementInline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeExpressionParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//TraceElementInline returns core::TraceElement:
		//	name=EString ":" type=TypeExpression;
		public ParserRule getRule() { return rule; }

		//name=EString ":" type=TypeExpression
		public Group getGroup() { return cGroup; }

		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=TypeExpression
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//TypeExpression
		public RuleCall getTypeTypeExpressionParserRuleCall_2_0() { return cTypeTypeExpressionParserRuleCall_2_0; }
	}

	public class TraceElementExpandedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TraceElementExpanded");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeExpressionParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//TraceElementExpanded returns core::TraceElement:
		//	"var" name=EString ":" type=TypeExpression;
		public ParserRule getRule() { return rule; }

		//"var" name=EString ":" type=TypeExpression
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=TypeExpression
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeExpression
		public RuleCall getTypeTypeExpressionParserRuleCall_3_0() { return cTypeTypeExpressionParserRuleCall_3_0; }
	}

	public class TypeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeExpression");
		private final RuleCall cClassUseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TypeExpression returns core::TypeExpression:
		//	ClassUse;
		public ParserRule getRule() { return rule; }

		//ClassUse
		public RuleCall getClassUseParserRuleCall() { return cClassUseParserRuleCall; }
	}

	public class ClassUseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassUse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cModelRepresentModelCrossReference_0_0 = (CrossReference)cModelAssignment_0.eContents().get(0);
		private final RuleCall cModelRepresentModelIDTerminalRuleCall_0_0_1 = (RuleCall)cModelRepresentModelCrossReference_0_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassNameIDTerminalRuleCall_2_0 = (RuleCall)cClassNameAssignment_2.eContents().get(0);
		private final Assignment cAnnotationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnotationsSingleAnnotationParserRuleCall_3_0 = (RuleCall)cAnnotationsAssignment_3.eContents().get(0);
		private final Assignment cStrictTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cStrictTypeExclamationMarkKeyword_4_0 = (Keyword)cStrictTypeAssignment_4.eContents().get(0);
		
		//ClassUse returns core::ClassUse:
		//	model=[core::RepresentModel] "!" className=ID annotations+=SingleAnnotation? strictType?="!"?;
		public ParserRule getRule() { return rule; }

		//model=[core::RepresentModel] "!" className=ID annotations+=SingleAnnotation? strictType?="!"?
		public Group getGroup() { return cGroup; }

		//model=[core::RepresentModel]
		public Assignment getModelAssignment_0() { return cModelAssignment_0; }

		//[core::RepresentModel]
		public CrossReference getModelRepresentModelCrossReference_0_0() { return cModelRepresentModelCrossReference_0_0; }

		//ID
		public RuleCall getModelRepresentModelIDTerminalRuleCall_0_0_1() { return cModelRepresentModelIDTerminalRuleCall_0_0_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }

		//className=ID
		public Assignment getClassNameAssignment_2() { return cClassNameAssignment_2; }

		//ID
		public RuleCall getClassNameIDTerminalRuleCall_2_0() { return cClassNameIDTerminalRuleCall_2_0; }

		//annotations+=SingleAnnotation?
		public Assignment getAnnotationsAssignment_3() { return cAnnotationsAssignment_3; }

		//SingleAnnotation
		public RuleCall getAnnotationsSingleAnnotationParserRuleCall_3_0() { return cAnnotationsSingleAnnotationParserRuleCall_3_0; }

		//strictType?="!"?
		public Assignment getStrictTypeAssignment_4() { return cStrictTypeAssignment_4; }

		//"!"
		public Keyword getStrictTypeExclamationMarkKeyword_4_0() { return cStrictTypeExclamationMarkKeyword_4_0; }
	}

	public class SingleAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SingleAnnotation");
		private final RuleCall cPotencyAnnotationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//SingleAnnotation returns core::SingleAnnotation:
		//	PotencyAnnotation;
		public ParserRule getRule() { return rule; }

		//PotencyAnnotation
		public RuleCall getPotencyAnnotationParserRuleCall() { return cPotencyAnnotationParserRuleCall; }
	}

	public class PotencyAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PotencyAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//PotencyAnnotation returns core::PotencyAnnotation:
		//	("@" | "^") value=INT;
		public ParserRule getRule() { return rule; }

		//("@" | "^") value=INT
		public Group getGroup() { return cGroup; }

		//"@" | "^"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"@"
		public Keyword getCommercialAtKeyword_0_0() { return cCommercialAtKeyword_0_0; }

		//"^"
		public Keyword getCircumflexAccentKeyword_0_1() { return cCircumflexAccentKeyword_0_1; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefineVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPutTraceExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPropertyWriteParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Statement returns core::Statement:
		//	DefineVariable | Expression | PutTraceExpression | PropertyWrite;
		public ParserRule getRule() { return rule; }

		//DefineVariable | Expression | PutTraceExpression | PropertyWrite
		public Alternatives getAlternatives() { return cAlternatives; }

		//DefineVariable
		public RuleCall getDefineVariableParserRuleCall_0() { return cDefineVariableParserRuleCall_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//PutTraceExpression
		public RuleCall getPutTraceExpressionParserRuleCall_2() { return cPutTraceExpressionParserRuleCall_2; }

		//PropertyWrite
		public RuleCall getPropertyWriteParserRuleCall_3() { return cPropertyWriteParserRuleCall_3; }
	}

	public class PropertyWriteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyWrite");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReceptorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cReceptorVariableCrossReference_0_0 = (CrossReference)cReceptorAssignment_0.eContents().get(0);
		private final RuleCall cReceptorVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cReceptorVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPropertyIDTerminalRuleCall_2_0 = (RuleCall)cPropertyAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		//PropertyWrite returns core::PropertyWrite:
		//	receptor=[core::Variable] "." property=ID "=" expression=Expression;
		public ParserRule getRule() { return rule; }

		//receptor=[core::Variable] "." property=ID "=" expression=Expression
		public Group getGroup() { return cGroup; }

		//receptor=[core::Variable]
		public Assignment getReceptorAssignment_0() { return cReceptorAssignment_0; }

		//[core::Variable]
		public CrossReference getReceptorVariableCrossReference_0_0() { return cReceptorVariableCrossReference_0_0; }

		//ID
		public RuleCall getReceptorVariableIDTerminalRuleCall_0_0_1() { return cReceptorVariableIDTerminalRuleCall_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//property=ID
		public Assignment getPropertyAssignment_2() { return cPropertyAssignment_2; }

		//ID
		public RuleCall getPropertyIDTerminalRuleCall_2_0() { return cPropertyIDTerminalRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
	}

	public class DefineVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefineVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//DefineVariable returns core::DefineVariable:
		//	name=EString "=" expression=Expression;
		public ParserRule getRule() { return rule; }

		//name=EString "=" expression=Expression
		public Group getGroup() { return cGroup; }

		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}

	public class ModelReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cModelRepresentModelCrossReference_0_0 = (CrossReference)cModelAssignment_0.eContents().get(0);
		private final RuleCall cModelRepresentModelIDTerminalRuleCall_0_0_1 = (RuleCall)cModelRepresentModelCrossReference_0_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassNameEStringParserRuleCall_2_0 = (RuleCall)cClassNameAssignment_2.eContents().get(0);
		
		//// ClassUse How to reuse ClassUse?? 
		//ModelReference returns core::ModelReference:
		//	model=[core::RepresentModel] "!" className=EString;
		public ParserRule getRule() { return rule; }

		//model=[core::RepresentModel] "!" className=EString
		public Group getGroup() { return cGroup; }

		//model=[core::RepresentModel]
		public Assignment getModelAssignment_0() { return cModelAssignment_0; }

		//[core::RepresentModel]
		public CrossReference getModelRepresentModelCrossReference_0_0() { return cModelRepresentModelCrossReference_0_0; }

		//ID
		public RuleCall getModelRepresentModelIDTerminalRuleCall_0_0_1() { return cModelRepresentModelIDTerminalRuleCall_0_0_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_1() { return cExclamationMarkKeyword_1; }

		//className=EString
		public Assignment getClassNameAssignment_2() { return cClassNameAssignment_2; }

		//EString
		public RuleCall getClassNameEStringParserRuleCall_2_0() { return cClassNameEStringParserRuleCall_2_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cMethodCallParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression returns core::Expression:
		//	MethodCall;
		public ParserRule getRule() { return rule; }

		//MethodCall
		public RuleCall getMethodCallParserRuleCall() { return cMethodCallParserRuleCall; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cModelReferenceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cParenthesizedExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMatchTraceExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cClosureDeclarationParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIfExprParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//// should be in another language?
		////| BinaryExpr
		//PrimaryExpression returns core::Expression:
		//	Literal | VariableReference | ModelReference | ParenthesizedExpression | MatchTraceExpression | ClosureDeclaration |
		//	IfExpr;
		public ParserRule getRule() { return rule; }

		//Literal | VariableReference | ModelReference | ParenthesizedExpression | MatchTraceExpression | ClosureDeclaration |
		//IfExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_1() { return cVariableReferenceParserRuleCall_1; }

		//ModelReference
		public RuleCall getModelReferenceParserRuleCall_2() { return cModelReferenceParserRuleCall_2; }

		//ParenthesizedExpression
		public RuleCall getParenthesizedExpressionParserRuleCall_3() { return cParenthesizedExpressionParserRuleCall_3; }

		//MatchTraceExpression
		public RuleCall getMatchTraceExpressionParserRuleCall_4() { return cMatchTraceExpressionParserRuleCall_4; }

		//ClosureDeclaration
		public RuleCall getClosureDeclarationParserRuleCall_5() { return cClosureDeclarationParserRuleCall_5; }

		//IfExpr
		public RuleCall getIfExprParserRuleCall_6() { return cIfExprParserRuleCall_6; }
	}

	public class IfExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cThenAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cThenConditionBranchParserRuleCall_1_0 = (RuleCall)cThenAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cElsifKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cElsifsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cElsifsConditionBranchParserRuleCall_2_1_0 = (RuleCall)cElsifsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cElseKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cElseAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cElseBranchBranchParserRuleCall_3_1_0 = (RuleCall)cElseAssignment_3_1.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IfExpr returns core::IfExpr:
		//	"if" then=ConditionBranch ("elsif" elsifs+=ConditionBranch)* ("else" else=BranchBranch)? "end";
		public ParserRule getRule() { return rule; }

		//"if" then=ConditionBranch ("elsif" elsifs+=ConditionBranch)* ("else" else=BranchBranch)? "end"
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//then=ConditionBranch
		public Assignment getThenAssignment_1() { return cThenAssignment_1; }

		//ConditionBranch
		public RuleCall getThenConditionBranchParserRuleCall_1_0() { return cThenConditionBranchParserRuleCall_1_0; }

		//("elsif" elsifs+=ConditionBranch)*
		public Group getGroup_2() { return cGroup_2; }

		//"elsif"
		public Keyword getElsifKeyword_2_0() { return cElsifKeyword_2_0; }

		//elsifs+=ConditionBranch
		public Assignment getElsifsAssignment_2_1() { return cElsifsAssignment_2_1; }

		//ConditionBranch
		public RuleCall getElsifsConditionBranchParserRuleCall_2_1_0() { return cElsifsConditionBranchParserRuleCall_2_1_0; }

		//("else" else=BranchBranch)?
		public Group getGroup_3() { return cGroup_3; }

		//"else"
		public Keyword getElseKeyword_3_0() { return cElseKeyword_3_0; }

		//else=BranchBranch
		public Assignment getElseAssignment_3_1() { return cElseAssignment_3_1; }

		//BranchBranch
		public RuleCall getElseBranchBranchParserRuleCall_3_1_0() { return cElseBranchBranchParserRuleCall_3_1_0; }

		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}

	public class ConditionBranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionBranch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditionExpressionParserRuleCall_0_0 = (RuleCall)cConditionAssignment_0.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		//ConditionBranch returns core::IfBranch:
		//	condition=Expression statements+=Statement+;
		public ParserRule getRule() { return rule; }

		//condition=Expression statements+=Statement+
		public Group getGroup() { return cGroup; }

		//condition=Expression
		public Assignment getConditionAssignment_0() { return cConditionAssignment_0; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_0_0() { return cConditionExpressionParserRuleCall_0_0; }

		//statements+=Statement+
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0() { return cStatementsStatementParserRuleCall_1_0; }
	}

	public class BranchBranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BranchBranch");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//BranchBranch returns core::IfBranch:
		//	statements+=Statement+;
		public ParserRule getRule() { return rule; }

		//statements+=Statement+
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}

	public class ParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParenthesizedExpression returns core::Expression:
		//	"(" Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_1() { return cExpressionParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFloatLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Literal returns core::Expression:
		//	FloatLiteral | NumLiteral | StringLiteral | BooleanLiteral;
		public ParserRule getRule() { return rule; }

		//FloatLiteral | NumLiteral | StringLiteral | BooleanLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//FloatLiteral
		public RuleCall getFloatLiteralParserRuleCall_0() { return cFloatLiteralParserRuleCall_0; }

		//NumLiteral
		public RuleCall getNumLiteralParserRuleCall_1() { return cNumLiteralParserRuleCall_1; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_2() { return cStringLiteralParserRuleCall_2; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_3() { return cBooleanLiteralParserRuleCall_3; }
	}

	public class VariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableReference");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_0 = (CrossReference)cVariableAssignment.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_0_1 = (RuleCall)cVariableVariableCrossReference_0.eContents().get(1);
		
		//VariableReference returns core::VariableReference:
		//	variable=[core::Variable];
		public ParserRule getRule() { return rule; }

		//variable=[core::Variable]
		public Assignment getVariableAssignment() { return cVariableAssignment; }

		//[core::Variable]
		public CrossReference getVariableVariableCrossReference_0() { return cVariableVariableCrossReference_0; }

		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_0_1() { return cVariableVariableIDTerminalRuleCall_0_1; }
	}

	public class ClosureDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClosureDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFormalParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFormalParametersClosureParameterParserRuleCall_1_1_0 = (RuleCall)cFormalParametersAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cFormalParametersAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cFormalParametersClosureParameterParserRuleCall_1_2_1_0 = (RuleCall)cFormalParametersAssignment_1_2_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ClosureDeclaration returns core::ClosureDeclaration:
		//	"{" ("|" formalParameters+=ClosureParameter ("," formalParameters+=ClosureParameter)* "|")? statements+=Statement+
		//	"}";
		public ParserRule getRule() { return rule; }

		//"{" ("|" formalParameters+=ClosureParameter ("," formalParameters+=ClosureParameter)* "|")? statements+=Statement+ "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//("|" formalParameters+=ClosureParameter ("," formalParameters+=ClosureParameter)* "|")?
		public Group getGroup_1() { return cGroup_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }

		//formalParameters+=ClosureParameter
		public Assignment getFormalParametersAssignment_1_1() { return cFormalParametersAssignment_1_1; }

		//ClosureParameter
		public RuleCall getFormalParametersClosureParameterParserRuleCall_1_1_0() { return cFormalParametersClosureParameterParserRuleCall_1_1_0; }

		//("," formalParameters+=ClosureParameter)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//formalParameters+=ClosureParameter
		public Assignment getFormalParametersAssignment_1_2_1() { return cFormalParametersAssignment_1_2_1; }

		//ClosureParameter
		public RuleCall getFormalParametersClosureParameterParserRuleCall_1_2_1_0() { return cFormalParametersClosureParameterParserRuleCall_1_2_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_3() { return cVerticalLineKeyword_1_3; }

		//statements+=Statement+
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ClosureParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClosureParameter");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ClosureParameter returns core::ClosureParameter:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class MethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cBinaryOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cBinaryOpBinaryOpEnumRuleCall_1_0_1_0 = (RuleCall)cBinaryOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Action cMethodCallReceptorAction_1_1_0_0 = (Action)cGroup_1_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cMethodNameAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cMethodNameEStringParserRuleCall_1_1_2_0 = (RuleCall)cMethodNameAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Assignment cWithParametersAssignment_1_1_3_0 = (Assignment)cGroup_1_1_3.eContents().get(0);
		private final Keyword cWithParametersLeftParenthesisKeyword_1_1_3_0_0 = (Keyword)cWithParametersAssignment_1_1_3_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_1_1_3_1_0 = (RuleCall)cParametersAssignment_1_1_3_1.eContents().get(0);
		private final Group cGroup_1_1_3_2 = (Group)cGroup_1_1_3.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_3_2_0 = (Keyword)cGroup_1_1_3_2.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_3_2_1 = (Assignment)cGroup_1_1_3_2.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_1_1_3_2_1_0 = (RuleCall)cParametersAssignment_1_1_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_3_3 = (Keyword)cGroup_1_1_3.eContents().get(3);
		private final Assignment cParametersAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cParametersClosureDeclarationParserRuleCall_1_1_4_0 = (RuleCall)cParametersAssignment_1_1_4.eContents().get(0);
		
		//MethodCall returns core::Expression:
		//	PrimaryExpression ({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression //|	( ({core::MethodCall.receptor = current}) "." methodName=EString )
		//	//|   (=> ({core::KeywordMethodCall.receptor = current}) "." (parameters+=KeywordParameter)+  )
		//	//|   (=> ({core::KeywordMethodCall.receptor = current}) (parameters+=KeywordParameter)+  )+	
		//	| (=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
		//	parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)+)?;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression ({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression //|	( ({core::MethodCall.receptor = current}) "." methodName=EString )
		////|   (=> ({core::KeywordMethodCall.receptor = current}) "." (parameters+=KeywordParameter)+  )
		////|   (=> ({core::KeywordMethodCall.receptor = current}) (parameters+=KeywordParameter)+  )+	
		//| (=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
		//parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)+)?
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression //|	( ({core::MethodCall.receptor = current}) "." methodName=EString )
		////|   (=> ({core::KeywordMethodCall.receptor = current}) "." (parameters+=KeywordParameter)+  )
		////|   (=> ({core::KeywordMethodCall.receptor = current}) (parameters+=KeywordParameter)+  )+	
		//| (=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
		//parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)+)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{core::BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0() { return cBinaryExprLeftAction_1_0_0; }

		//binaryOp=BinaryOp
		public Assignment getBinaryOpAssignment_1_0_1() { return cBinaryOpAssignment_1_0_1; }

		//BinaryOp
		public RuleCall getBinaryOpBinaryOpEnumRuleCall_1_0_1_0() { return cBinaryOpBinaryOpEnumRuleCall_1_0_1_0; }

		//right=Expression
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_0_2_0() { return cRightExpressionParserRuleCall_1_0_2_0; }

		//(=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
		//parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//=> ({core::MethodCall.receptor=current})
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{core::MethodCall.receptor=current}
		public Action getMethodCallReceptorAction_1_1_0_0() { return cMethodCallReceptorAction_1_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_1_1() { return cFullStopKeyword_1_1_1; }

		//methodName=EString
		public Assignment getMethodNameAssignment_1_1_2() { return cMethodNameAssignment_1_1_2; }

		//EString
		public RuleCall getMethodNameEStringParserRuleCall_1_1_2_0() { return cMethodNameEStringParserRuleCall_1_1_2_0; }

		//(withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")")?
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }

		//withParameters?="("
		public Assignment getWithParametersAssignment_1_1_3_0() { return cWithParametersAssignment_1_1_3_0; }

		//"("
		public Keyword getWithParametersLeftParenthesisKeyword_1_1_3_0_0() { return cWithParametersLeftParenthesisKeyword_1_1_3_0_0; }

		//parameters+=Expression
		public Assignment getParametersAssignment_1_1_3_1() { return cParametersAssignment_1_1_3_1; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_1_1_3_1_0() { return cParametersExpressionParserRuleCall_1_1_3_1_0; }

		//("," parameters+=Expression)*
		public Group getGroup_1_1_3_2() { return cGroup_1_1_3_2; }

		//","
		public Keyword getCommaKeyword_1_1_3_2_0() { return cCommaKeyword_1_1_3_2_0; }

		//parameters+=Expression
		public Assignment getParametersAssignment_1_1_3_2_1() { return cParametersAssignment_1_1_3_2_1; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_1_1_3_2_1_0() { return cParametersExpressionParserRuleCall_1_1_3_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_3_3() { return cRightParenthesisKeyword_1_1_3_3; }

		//parameters+=ClosureDeclaration?
		public Assignment getParametersAssignment_1_1_4() { return cParametersAssignment_1_1_4; }

		//ClosureDeclaration
		public RuleCall getParametersClosureDeclarationParserRuleCall_1_1_4_0() { return cParametersClosureDeclarationParserRuleCall_1_1_4_0; }
	}

	public class WithResolveMethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WithResolveMethodCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cBinaryExprLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cBinaryOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cBinaryOpBinaryOpEnumRuleCall_1_0_1_0 = (RuleCall)cBinaryOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Action cResolveLinkExprAction_1_1_0_0 = (Action)cGroup_1_1_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1_0_1 = (Keyword)cGroup_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_0_2 = (Group)cGroup_1_1_0.eContents().get(2);
		private final Assignment cModuleAssignment_1_1_0_2_0 = (Assignment)cGroup_1_1_0_2.eContents().get(0);
		private final CrossReference cModuleUseDeclarationCrossReference_1_1_0_2_0_0 = (CrossReference)cModuleAssignment_1_1_0_2_0.eContents().get(0);
		private final RuleCall cModuleUseDeclarationIDTerminalRuleCall_1_1_0_2_0_0_1 = (RuleCall)cModuleUseDeclarationCrossReference_1_1_0_2_0_0.eContents().get(1);
		private final Assignment cIsExternalAssignment_1_1_0_2_1 = (Assignment)cGroup_1_1_0_2.eContents().get(1);
		private final Keyword cIsExternalExclamationMarkKeyword_1_1_0_2_1_0 = (Keyword)cIsExternalAssignment_1_1_0_2_1.eContents().get(0);
		private final Assignment cLinkNameAssignment_1_1_0_3 = (Assignment)cGroup_1_1_0.eContents().get(3);
		private final RuleCall cLinkNameEStringParserRuleCall_1_1_0_3_0 = (RuleCall)cLinkNameAssignment_1_1_0_3.eContents().get(0);
		private final Group cGroup_1_1_0_4 = (Group)cGroup_1_1_0.eContents().get(4);
		private final Keyword cFullStopKeyword_1_1_0_4_0 = (Keyword)cGroup_1_1_0_4.eContents().get(0);
		private final Assignment cFeatureNameAssignment_1_1_0_4_1 = (Assignment)cGroup_1_1_0_4.eContents().get(1);
		private final RuleCall cFeatureNameEStringParserRuleCall_1_1_0_4_1_0 = (RuleCall)cFeatureNameAssignment_1_1_0_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_0_5 = (Keyword)cGroup_1_1_0.eContents().get(5);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_1_1_0 = (Group)cGroup_1_1_1.eContents().get(0);
		private final Action cMethodCallReceptorAction_1_1_1_0_0 = (Action)cGroup_1_1_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		private final Assignment cMethodNameAssignment_1_1_1_2 = (Assignment)cGroup_1_1_1.eContents().get(2);
		private final RuleCall cMethodNameEStringParserRuleCall_1_1_1_2_0 = (RuleCall)cMethodNameAssignment_1_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_1_3 = (Group)cGroup_1_1_1.eContents().get(3);
		private final Assignment cWithParametersAssignment_1_1_1_3_0 = (Assignment)cGroup_1_1_1_3.eContents().get(0);
		private final Keyword cWithParametersLeftParenthesisKeyword_1_1_1_3_0_0 = (Keyword)cWithParametersAssignment_1_1_1_3_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_1_3_1 = (Assignment)cGroup_1_1_1_3.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_1_1_1_3_1_0 = (RuleCall)cParametersAssignment_1_1_1_3_1.eContents().get(0);
		private final Group cGroup_1_1_1_3_2 = (Group)cGroup_1_1_1_3.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_1_3_2_0 = (Keyword)cGroup_1_1_1_3_2.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_1_3_2_1 = (Assignment)cGroup_1_1_1_3_2.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_1_1_1_3_2_1_0 = (RuleCall)cParametersAssignment_1_1_1_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_1_3_3 = (Keyword)cGroup_1_1_1_3.eContents().get(3);
		private final Assignment cParametersAssignment_1_1_1_4 = (Assignment)cGroup_1_1_1.eContents().get(4);
		private final RuleCall cParametersClosureDeclarationParserRuleCall_1_1_1_4_0 = (RuleCall)cParametersAssignment_1_1_1_4.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cGroup_1_2.eContents().get(0);
		private final Group cGroup_1_2_0_0 = (Group)cGroup_1_2_0.eContents().get(0);
		private final Action cMethodCallReceptorAction_1_2_0_0_0 = (Action)cGroup_1_2_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_2_0_1 = (Keyword)cGroup_1_2_0.eContents().get(1);
		private final Assignment cMethodNameAssignment_1_2_0_2 = (Assignment)cGroup_1_2_0.eContents().get(2);
		private final RuleCall cMethodNameEStringParserRuleCall_1_2_0_2_0 = (RuleCall)cMethodNameAssignment_1_2_0_2.eContents().get(0);
		private final Group cGroup_1_2_0_3 = (Group)cGroup_1_2_0.eContents().get(3);
		private final Assignment cWithParametersAssignment_1_2_0_3_0 = (Assignment)cGroup_1_2_0_3.eContents().get(0);
		private final Keyword cWithParametersLeftParenthesisKeyword_1_2_0_3_0_0 = (Keyword)cWithParametersAssignment_1_2_0_3_0.eContents().get(0);
		private final Assignment cParametersAssignment_1_2_0_3_1 = (Assignment)cGroup_1_2_0_3.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_1_2_0_3_1_0 = (RuleCall)cParametersAssignment_1_2_0_3_1.eContents().get(0);
		private final Group cGroup_1_2_0_3_2 = (Group)cGroup_1_2_0_3.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0_3_2_0 = (Keyword)cGroup_1_2_0_3_2.eContents().get(0);
		private final Assignment cParametersAssignment_1_2_0_3_2_1 = (Assignment)cGroup_1_2_0_3_2.eContents().get(1);
		private final RuleCall cParametersExpressionParserRuleCall_1_2_0_3_2_1_0 = (RuleCall)cParametersAssignment_1_2_0_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2_0_3_3 = (Keyword)cGroup_1_2_0_3.eContents().get(3);
		private final Assignment cParametersAssignment_1_2_0_4 = (Assignment)cGroup_1_2_0.eContents().get(4);
		private final RuleCall cParametersClosureDeclarationParserRuleCall_1_2_0_4_0 = (RuleCall)cParametersAssignment_1_2_0_4.eContents().get(0);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Action cResolveLinkExprAction_1_2_1_0 = (Action)cGroup_1_2_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_2_1_1 = (Keyword)cGroup_1_2_1.eContents().get(1);
		private final Group cGroup_1_2_1_2 = (Group)cGroup_1_2_1.eContents().get(2);
		private final Assignment cModuleAssignment_1_2_1_2_0 = (Assignment)cGroup_1_2_1_2.eContents().get(0);
		private final CrossReference cModuleUseDeclarationCrossReference_1_2_1_2_0_0 = (CrossReference)cModuleAssignment_1_2_1_2_0.eContents().get(0);
		private final RuleCall cModuleUseDeclarationIDTerminalRuleCall_1_2_1_2_0_0_1 = (RuleCall)cModuleUseDeclarationCrossReference_1_2_1_2_0_0.eContents().get(1);
		private final Assignment cIsExternalAssignment_1_2_1_2_1 = (Assignment)cGroup_1_2_1_2.eContents().get(1);
		private final Keyword cIsExternalExclamationMarkKeyword_1_2_1_2_1_0 = (Keyword)cIsExternalAssignment_1_2_1_2_1.eContents().get(0);
		private final Assignment cLinkNameAssignment_1_2_1_3 = (Assignment)cGroup_1_2_1.eContents().get(3);
		private final RuleCall cLinkNameEStringParserRuleCall_1_2_1_3_0 = (RuleCall)cLinkNameAssignment_1_2_1_3.eContents().get(0);
		private final Group cGroup_1_2_1_4 = (Group)cGroup_1_2_1.eContents().get(4);
		private final Keyword cFullStopKeyword_1_2_1_4_0 = (Keyword)cGroup_1_2_1_4.eContents().get(0);
		private final Assignment cFeatureNameAssignment_1_2_1_4_1 = (Assignment)cGroup_1_2_1_4.eContents().get(1);
		private final RuleCall cFeatureNameEStringParserRuleCall_1_2_1_4_1_0 = (RuleCall)cFeatureNameAssignment_1_2_1_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_1_5 = (Keyword)cGroup_1_2_1.eContents().get(5);
		
		//WithResolveMethodCall returns core::Expression:
		//	PrimaryExpression ({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression // to allow accessing attributes	
		//	| (({core::ResolveLink.expr=current} "[" (module=[core::UseDeclaration] isExternal?="!")? linkName=EString ("."
		//	featureName=EString)? "]") (=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="("
		//	parameters+=Expression ("," parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)?)+ | ((=>
		//	({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
		//	parameters+=Expression)* ")")? parameters+=ClosureDeclaration?) ({core::ResolveLink.expr=current} "["
		//	(module=[core::UseDeclaration] isExternal?="!")? linkName=EString ("." featureName=EString)? "]")?)+)? // ? ( ({attr::AttributeUse.expr = current}) "[" attribute=[attr::AttributeDcl] "]" )?
		//;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression ({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression // to allow accessing attributes	
		//| (({core::ResolveLink.expr=current} "[" (module=[core::UseDeclaration] isExternal?="!")? linkName=EString ("."
		//featureName=EString)? "]") (=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="("
		//parameters+=Expression ("," parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)?)+ | ((=>
		//({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
		//parameters+=Expression)* ")")? parameters+=ClosureDeclaration?) ({core::ResolveLink.expr=current} "["
		//(module=[core::UseDeclaration] isExternal?="!")? linkName=EString ("." featureName=EString)? "]")?)+)? // ? ( ({attr::AttributeUse.expr = current}) "[" attribute=[attr::AttributeDcl] "]" )?
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression // to allow accessing attributes	
		//| (({core::ResolveLink.expr=current} "[" (module=[core::UseDeclaration] isExternal?="!")? linkName=EString ("."
		//featureName=EString)? "]") (=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="("
		//parameters+=Expression ("," parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)?)+ | ((=>
		//({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
		//parameters+=Expression)* ")")? parameters+=ClosureDeclaration?) ({core::ResolveLink.expr=current} "["
		//(module=[core::UseDeclaration] isExternal?="!")? linkName=EString ("." featureName=EString)? "]")?)+)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//{core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//{core::BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_0_0() { return cBinaryExprLeftAction_1_0_0; }

		//binaryOp=BinaryOp
		public Assignment getBinaryOpAssignment_1_0_1() { return cBinaryOpAssignment_1_0_1; }

		//BinaryOp
		public RuleCall getBinaryOpBinaryOpEnumRuleCall_1_0_1_0() { return cBinaryOpBinaryOpEnumRuleCall_1_0_1_0; }

		//right=Expression
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_0_2_0() { return cRightExpressionParserRuleCall_1_0_2_0; }

		//(({core::ResolveLink.expr=current} "[" (module=[core::UseDeclaration] isExternal?="!")? linkName=EString ("."
		//featureName=EString)? "]") (=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="("
		//parameters+=Expression ("," parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)?)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{core::ResolveLink.expr=current} "[" (module=[core::UseDeclaration] isExternal?="!")? linkName=EString ("."
		//featureName=EString)? "]"
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{core::ResolveLink.expr=current}
		public Action getResolveLinkExprAction_1_1_0_0() { return cResolveLinkExprAction_1_1_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_0_1() { return cLeftSquareBracketKeyword_1_1_0_1; }

		//(module=[core::UseDeclaration] isExternal?="!")?
		public Group getGroup_1_1_0_2() { return cGroup_1_1_0_2; }

		//module=[core::UseDeclaration]
		public Assignment getModuleAssignment_1_1_0_2_0() { return cModuleAssignment_1_1_0_2_0; }

		//[core::UseDeclaration]
		public CrossReference getModuleUseDeclarationCrossReference_1_1_0_2_0_0() { return cModuleUseDeclarationCrossReference_1_1_0_2_0_0; }

		//ID
		public RuleCall getModuleUseDeclarationIDTerminalRuleCall_1_1_0_2_0_0_1() { return cModuleUseDeclarationIDTerminalRuleCall_1_1_0_2_0_0_1; }

		//isExternal?="!"
		public Assignment getIsExternalAssignment_1_1_0_2_1() { return cIsExternalAssignment_1_1_0_2_1; }

		//"!"
		public Keyword getIsExternalExclamationMarkKeyword_1_1_0_2_1_0() { return cIsExternalExclamationMarkKeyword_1_1_0_2_1_0; }

		//linkName=EString
		public Assignment getLinkNameAssignment_1_1_0_3() { return cLinkNameAssignment_1_1_0_3; }

		//EString
		public RuleCall getLinkNameEStringParserRuleCall_1_1_0_3_0() { return cLinkNameEStringParserRuleCall_1_1_0_3_0; }

		//("." featureName=EString)?
		public Group getGroup_1_1_0_4() { return cGroup_1_1_0_4; }

		//"."
		public Keyword getFullStopKeyword_1_1_0_4_0() { return cFullStopKeyword_1_1_0_4_0; }

		//featureName=EString
		public Assignment getFeatureNameAssignment_1_1_0_4_1() { return cFeatureNameAssignment_1_1_0_4_1; }

		//EString
		public RuleCall getFeatureNameEStringParserRuleCall_1_1_0_4_1_0() { return cFeatureNameEStringParserRuleCall_1_1_0_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_0_5() { return cRightSquareBracketKeyword_1_1_0_5; }

		//(=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
		//parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//=> ({core::MethodCall.receptor=current})
		public Group getGroup_1_1_1_0() { return cGroup_1_1_1_0; }

		//{core::MethodCall.receptor=current}
		public Action getMethodCallReceptorAction_1_1_1_0_0() { return cMethodCallReceptorAction_1_1_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_1_1_1() { return cFullStopKeyword_1_1_1_1; }

		//methodName=EString
		public Assignment getMethodNameAssignment_1_1_1_2() { return cMethodNameAssignment_1_1_1_2; }

		//EString
		public RuleCall getMethodNameEStringParserRuleCall_1_1_1_2_0() { return cMethodNameEStringParserRuleCall_1_1_1_2_0; }

		//(withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")")?
		public Group getGroup_1_1_1_3() { return cGroup_1_1_1_3; }

		//withParameters?="("
		public Assignment getWithParametersAssignment_1_1_1_3_0() { return cWithParametersAssignment_1_1_1_3_0; }

		//"("
		public Keyword getWithParametersLeftParenthesisKeyword_1_1_1_3_0_0() { return cWithParametersLeftParenthesisKeyword_1_1_1_3_0_0; }

		//parameters+=Expression
		public Assignment getParametersAssignment_1_1_1_3_1() { return cParametersAssignment_1_1_1_3_1; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_1_1_1_3_1_0() { return cParametersExpressionParserRuleCall_1_1_1_3_1_0; }

		//("," parameters+=Expression)*
		public Group getGroup_1_1_1_3_2() { return cGroup_1_1_1_3_2; }

		//","
		public Keyword getCommaKeyword_1_1_1_3_2_0() { return cCommaKeyword_1_1_1_3_2_0; }

		//parameters+=Expression
		public Assignment getParametersAssignment_1_1_1_3_2_1() { return cParametersAssignment_1_1_1_3_2_1; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_1_1_1_3_2_1_0() { return cParametersExpressionParserRuleCall_1_1_1_3_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_1_3_3() { return cRightParenthesisKeyword_1_1_1_3_3; }

		//parameters+=ClosureDeclaration?
		public Assignment getParametersAssignment_1_1_1_4() { return cParametersAssignment_1_1_1_4; }

		//ClosureDeclaration
		public RuleCall getParametersClosureDeclarationParserRuleCall_1_1_1_4_0() { return cParametersClosureDeclarationParserRuleCall_1_1_1_4_0; }

		//((=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
		//parameters+=Expression)* ")")? parameters+=ClosureDeclaration?) ({core::ResolveLink.expr=current} "["
		//(module=[core::UseDeclaration] isExternal?="!")? linkName=EString ("." featureName=EString)? "]")?)+
		public Group getGroup_1_2() { return cGroup_1_2; }

		//=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
		//parameters+=Expression)* ")")? parameters+=ClosureDeclaration?
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }

		//=> ({core::MethodCall.receptor=current})
		public Group getGroup_1_2_0_0() { return cGroup_1_2_0_0; }

		//{core::MethodCall.receptor=current}
		public Action getMethodCallReceptorAction_1_2_0_0_0() { return cMethodCallReceptorAction_1_2_0_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_2_0_1() { return cFullStopKeyword_1_2_0_1; }

		//methodName=EString
		public Assignment getMethodNameAssignment_1_2_0_2() { return cMethodNameAssignment_1_2_0_2; }

		//EString
		public RuleCall getMethodNameEStringParserRuleCall_1_2_0_2_0() { return cMethodNameEStringParserRuleCall_1_2_0_2_0; }

		//(withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")")?
		public Group getGroup_1_2_0_3() { return cGroup_1_2_0_3; }

		//withParameters?="("
		public Assignment getWithParametersAssignment_1_2_0_3_0() { return cWithParametersAssignment_1_2_0_3_0; }

		//"("
		public Keyword getWithParametersLeftParenthesisKeyword_1_2_0_3_0_0() { return cWithParametersLeftParenthesisKeyword_1_2_0_3_0_0; }

		//parameters+=Expression
		public Assignment getParametersAssignment_1_2_0_3_1() { return cParametersAssignment_1_2_0_3_1; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_1_2_0_3_1_0() { return cParametersExpressionParserRuleCall_1_2_0_3_1_0; }

		//("," parameters+=Expression)*
		public Group getGroup_1_2_0_3_2() { return cGroup_1_2_0_3_2; }

		//","
		public Keyword getCommaKeyword_1_2_0_3_2_0() { return cCommaKeyword_1_2_0_3_2_0; }

		//parameters+=Expression
		public Assignment getParametersAssignment_1_2_0_3_2_1() { return cParametersAssignment_1_2_0_3_2_1; }

		//Expression
		public RuleCall getParametersExpressionParserRuleCall_1_2_0_3_2_1_0() { return cParametersExpressionParserRuleCall_1_2_0_3_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2_0_3_3() { return cRightParenthesisKeyword_1_2_0_3_3; }

		//parameters+=ClosureDeclaration?
		public Assignment getParametersAssignment_1_2_0_4() { return cParametersAssignment_1_2_0_4; }

		//ClosureDeclaration
		public RuleCall getParametersClosureDeclarationParserRuleCall_1_2_0_4_0() { return cParametersClosureDeclarationParserRuleCall_1_2_0_4_0; }

		//({core::ResolveLink.expr=current} "[" (module=[core::UseDeclaration] isExternal?="!")? linkName=EString ("."
		//featureName=EString)? "]")?
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }

		//{core::ResolveLink.expr=current}
		public Action getResolveLinkExprAction_1_2_1_0() { return cResolveLinkExprAction_1_2_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2_1_1() { return cLeftSquareBracketKeyword_1_2_1_1; }

		//(module=[core::UseDeclaration] isExternal?="!")?
		public Group getGroup_1_2_1_2() { return cGroup_1_2_1_2; }

		//module=[core::UseDeclaration]
		public Assignment getModuleAssignment_1_2_1_2_0() { return cModuleAssignment_1_2_1_2_0; }

		//[core::UseDeclaration]
		public CrossReference getModuleUseDeclarationCrossReference_1_2_1_2_0_0() { return cModuleUseDeclarationCrossReference_1_2_1_2_0_0; }

		//ID
		public RuleCall getModuleUseDeclarationIDTerminalRuleCall_1_2_1_2_0_0_1() { return cModuleUseDeclarationIDTerminalRuleCall_1_2_1_2_0_0_1; }

		//isExternal?="!"
		public Assignment getIsExternalAssignment_1_2_1_2_1() { return cIsExternalAssignment_1_2_1_2_1; }

		//"!"
		public Keyword getIsExternalExclamationMarkKeyword_1_2_1_2_1_0() { return cIsExternalExclamationMarkKeyword_1_2_1_2_1_0; }

		//linkName=EString
		public Assignment getLinkNameAssignment_1_2_1_3() { return cLinkNameAssignment_1_2_1_3; }

		//EString
		public RuleCall getLinkNameEStringParserRuleCall_1_2_1_3_0() { return cLinkNameEStringParserRuleCall_1_2_1_3_0; }

		//("." featureName=EString)?
		public Group getGroup_1_2_1_4() { return cGroup_1_2_1_4; }

		//"."
		public Keyword getFullStopKeyword_1_2_1_4_0() { return cFullStopKeyword_1_2_1_4_0; }

		//featureName=EString
		public Assignment getFeatureNameAssignment_1_2_1_4_1() { return cFeatureNameAssignment_1_2_1_4_1; }

		//EString
		public RuleCall getFeatureNameEStringParserRuleCall_1_2_1_4_1_0() { return cFeatureNameEStringParserRuleCall_1_2_1_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2_1_5() { return cRightSquareBracketKeyword_1_2_1_5; }
	}

	public class KeywordParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KeywordParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeywordAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeywordKEYWORD_IDTerminalRuleCall_0_0 = (RuleCall)cKeywordAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		/// *
		//WithResolveMethodCall returns core::Expression:
		//	PrimaryExpression
		//	(
		//		( ({core::BinaryExpr.left = current}) binaryOp=BinaryOp right=Expression)		
		//		| ( ( ({core::ResolveLink.expr = current}) "[" linkName=EString "]" )
		//			(=> ({core::MethodCall.receptor = current}) "." methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")" )? (parameters+=ClosureDeclaration)?  )?
		//			)+
		//	    | ( (=> ({core::MethodCall.receptor = current}) "." methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")" )? (parameters+=ClosureDeclaration)?  )
		//			  (({core::ResolveLink.expr = current}) "[" linkName=EString "]")? )+
		//        // to allow accessing attributes	
		//	)? // ? ( ({attr::AttributeUse.expr = current}) "[" attribute=[attr::AttributeDcl] "]" )?
		//;
		// * / / *
		//class ResolveLink extends Expression {
		//   val Expression[1] expr;
		//   attr Boolean[1] isExternal = false;
		//   ref UseDeclaration[0..1] module;
		//
		//   attr String[1] linkName;
		//   attr String[0..1] featureName;
		//}
		// * / KeywordParameter returns core::KeywordParameter:
		//	keyword=KEYWORD_ID value=Expression;
		public ParserRule getRule() { return rule; }

		//keyword=KEYWORD_ID value=Expression
		public Group getGroup() { return cGroup; }

		//keyword=KEYWORD_ID
		public Assignment getKeywordAssignment_0() { return cKeywordAssignment_0; }

		//KEYWORD_ID
		public RuleCall getKeywordKEYWORD_IDTerminalRuleCall_0_0() { return cKeywordKEYWORD_IDTerminalRuleCall_0_0; }

		//value=Expression
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_1_0() { return cValueExpressionParserRuleCall_1_0; }
	}

	public class MatchTraceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MatchTraceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMatchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTraceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTraceTraceDefinitionCrossReference_2_0 = (CrossReference)cTraceAssignment_2.eContents().get(0);
		private final RuleCall cTraceTraceDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cTraceTraceDefinitionCrossReference_2_0.eContents().get(1);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTraceExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTraceExprTraceExprLanguageParserRuleCall_5_0 = (RuleCall)cTraceExprAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//MatchTraceExpression returns core::MatchTrace:
		//	"match" (ID "!")? trace=[core::TraceDefinition] "with" "[" traceExpr=TraceExprLanguage "]";
		public ParserRule getRule() { return rule; }

		//"match" (ID "!")? trace=[core::TraceDefinition] "with" "[" traceExpr=TraceExprLanguage "]"
		public Group getGroup() { return cGroup; }

		//"match"
		public Keyword getMatchKeyword_0() { return cMatchKeyword_0; }

		//(ID "!")?
		public Group getGroup_1() { return cGroup_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }

		//trace=[core::TraceDefinition]
		public Assignment getTraceAssignment_2() { return cTraceAssignment_2; }

		//[core::TraceDefinition]
		public CrossReference getTraceTraceDefinitionCrossReference_2_0() { return cTraceTraceDefinitionCrossReference_2_0; }

		//ID
		public RuleCall getTraceTraceDefinitionIDTerminalRuleCall_2_0_1() { return cTraceTraceDefinitionIDTerminalRuleCall_2_0_1; }

		//"with"
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//traceExpr=TraceExprLanguage
		public Assignment getTraceExprAssignment_5() { return cTraceExprAssignment_5; }

		//TraceExprLanguage
		public RuleCall getTraceExprTraceExprLanguageParserRuleCall_5_0() { return cTraceExprTraceExprLanguageParserRuleCall_5_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
	}

	public class TraceExprLanguageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TraceExprLanguage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTraceVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTraceVarTraceElementCrossReference_0_0 = (CrossReference)cTraceVarAssignment_0.eContents().get(0);
		private final RuleCall cTraceVarTraceElementIDTerminalRuleCall_0_0_1 = (RuleCall)cTraceVarTraceElementCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//// TODO: Resolve!! 
		//TraceExprLanguage returns core::TraceCompareExpression:
		//	traceVar=[core::TraceElement] "=" expr=Expression;
		public ParserRule getRule() { return rule; }

		//traceVar=[core::TraceElement] "=" expr=Expression
		public Group getGroup() { return cGroup; }

		//traceVar=[core::TraceElement]
		public Assignment getTraceVarAssignment_0() { return cTraceVarAssignment_0; }

		//[core::TraceElement]
		public CrossReference getTraceVarTraceElementCrossReference_0_0() { return cTraceVarTraceElementCrossReference_0_0; }

		//ID
		public RuleCall getTraceVarTraceElementIDTerminalRuleCall_0_0_1() { return cTraceVarTraceElementIDTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
	}

	public class PutTraceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PutTraceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTraceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTraceTraceDefinitionCrossReference_2_0 = (CrossReference)cTraceAssignment_2.eContents().get(0);
		private final RuleCall cTraceTraceDefinitionIDTerminalRuleCall_2_0_1 = (RuleCall)cTraceTraceDefinitionCrossReference_2_0.eContents().get(1);
		private final Keyword cWithKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParametersPutTraceParameterParserRuleCall_5_0 = (RuleCall)cParametersAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cParametersAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cParametersPutTraceParameterParserRuleCall_6_1_0 = (RuleCall)cParametersAssignment_6_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//PutTraceExpression returns core::PutTrace:
		//	"put" (ID "!")? trace=[core::TraceDefinition] "with" "[" parameters+=PutTraceParameter (","
		//	parameters+=PutTraceParameter)+ "]";
		public ParserRule getRule() { return rule; }

		//"put" (ID "!")? trace=[core::TraceDefinition] "with" "[" parameters+=PutTraceParameter (","
		//parameters+=PutTraceParameter)+ "]"
		public Group getGroup() { return cGroup; }

		//"put"
		public Keyword getPutKeyword_0() { return cPutKeyword_0; }

		//(ID "!")?
		public Group getGroup_1() { return cGroup_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }

		//trace=[core::TraceDefinition]
		public Assignment getTraceAssignment_2() { return cTraceAssignment_2; }

		//[core::TraceDefinition]
		public CrossReference getTraceTraceDefinitionCrossReference_2_0() { return cTraceTraceDefinitionCrossReference_2_0; }

		//ID
		public RuleCall getTraceTraceDefinitionIDTerminalRuleCall_2_0_1() { return cTraceTraceDefinitionIDTerminalRuleCall_2_0_1; }

		//"with"
		public Keyword getWithKeyword_3() { return cWithKeyword_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//parameters+=PutTraceParameter
		public Assignment getParametersAssignment_5() { return cParametersAssignment_5; }

		//PutTraceParameter
		public RuleCall getParametersPutTraceParameterParserRuleCall_5_0() { return cParametersPutTraceParameterParserRuleCall_5_0; }

		//("," parameters+=PutTraceParameter)+
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//parameters+=PutTraceParameter
		public Assignment getParametersAssignment_6_1() { return cParametersAssignment_6_1; }

		//PutTraceParameter
		public RuleCall getParametersPutTraceParameterParserRuleCall_6_1_0() { return cParametersPutTraceParameterParserRuleCall_6_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
	}

	public class PutTraceParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PutTraceParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTraceVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTraceVarTraceElementCrossReference_0_0 = (CrossReference)cTraceVarAssignment_0.eContents().get(0);
		private final RuleCall cTraceVarTraceElementIDTerminalRuleCall_0_0_1 = (RuleCall)cTraceVarTraceElementCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//PutTraceParameter returns core::PutTraceParameter:
		//	traceVar=[core::TraceElement] "=" value=Expression;
		public ParserRule getRule() { return rule; }

		//traceVar=[core::TraceElement] "=" value=Expression
		public Group getGroup() { return cGroup; }

		//traceVar=[core::TraceElement]
		public Assignment getTraceVarAssignment_0() { return cTraceVarAssignment_0; }

		//[core::TraceElement]
		public CrossReference getTraceVarTraceElementCrossReference_0_0() { return cTraceVarTraceElementCrossReference_0_0; }

		//ID
		public RuleCall getTraceVarTraceElementIDTerminalRuleCall_0_0_1() { return cTraceVarTraceElementIDTerminalRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}

	public class NumLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		/// *
		//MethodCall returns core::MethodCall:
		//	receptor=Expression "." methodName=EString
		//	("(" parameters+=Expression ("," parameters+=Expression)* ")")?
		//; 
		// * / / *
		// 
		// => indica precedencia
		//XMemberFeatureCall returns XExpression:
		//        XPrimaryExpression
		//        (=>({XAssignment.assignable=current} '.' feature=[types::JvmIdentifiableElement|ValidID] OpSingleAssign) value=XAssignment
		//        |=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|spreading?="*.")) 
		//                ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
		//                feature=[types::JvmIdentifiableElement|ValidID] (
		//                        =>explicitOperationCall?='(' 
		//                                (
		//                                    memberCallArguments+=XShortClosure
		//                                  |     memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
		//                                )? 
		//                        ')')?
		//                )*;
		//
		//XPrimaryExpression returns XExpression:
		//        XConstructorCall |
		//        XBlockExpression |
		//        XSwitchExpression |
		//        XFeatureCall |
		//        XLiteral |
		//        XIfExpression |
		//        XForLoopExpression |
		//        XWhileExpression |
		//        XDoWhileExpression |
		//        XThrowExpression |
		//        XReturnExpression |
		//        XTryCatchFinallyExpression |
		//        XParenthesizedExpression;
		// * / NumLiteral returns core::NumLiteral:
		//	value=EInt;
		public ParserRule getRule() { return rule; }

		//value=EInt
		public Assignment getValueAssignment() { return cValueAssignment; }

		//EInt
		public RuleCall getValueEIntParserRuleCall_0() { return cValueEIntParserRuleCall_0; }
	}

	public class FloatLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEDoubleParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//FloatLiteral returns core::DoubleLiteral:
		//	value=EDouble;
		public ParserRule getRule() { return rule; }

		//value=EDouble
		public Assignment getValueAssignment() { return cValueAssignment; }

		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_0() { return cValueEDoubleParserRuleCall_0; }
	}

	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//EDouble returns ecore::EDouble:
		//	INT "." INT;
		public ParserRule getRule() { return rule; }

		//INT "." INT
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral returns core::StringLiteral:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEBooleanParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanLiteral returns core::BooleanLiteral:
		//	value=EBoolean;
		public ParserRule getRule() { return rule; }

		//value=EBoolean
		public Assignment getValueAssignment() { return cValueAssignment; }

		//EBoolean
		public RuleCall getValueEBooleanParserRuleCall_0() { return cValueEBooleanParserRuleCall_0; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// End-of Core
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEStringParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cEStringParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName returns ecore::EString:
		//	EString ("." EString)*;
		public ParserRule getRule() { return rule; }

		//EString ("." EString)*
		public Group getGroup() { return cGroup; }

		//EString
		public RuleCall getEStringParserRuleCall_0() { return cEStringParserRuleCall_0; }

		//("." EString)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//EString
		public RuleCall getEStringParserRuleCall_1_1() { return cEStringParserRuleCall_1_1; }
	}
	
	
	public class BinaryOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDPlusSignKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBHyphenMinusKeyword_1_0 = (Keyword)cSUBEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMULEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMULAsteriskKeyword_2_0 = (Keyword)cMULEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDIVSolidusKeyword_3_0 = (Keyword)cDIVEnumLiteralDeclaration_3.eContents().get(0);
		
		////BinaryExpr returns core::BinaryExpr:
		////	left=Expression  binaryOp=BinaryOp right=Expression 
		////;
		//enum BinaryOp returns core::BinaryOp:
		//	ADD="+" | SUB="-" | MUL="*" | DIV="/";
		public EnumRule getRule() { return rule; }

		//ADD="+" | SUB="-" | MUL="*" | DIV="/"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ADD="+"
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getADDPlusSignKeyword_0_0() { return cADDPlusSignKeyword_0_0; }

		//SUB="-"
		public EnumLiteralDeclaration getSUBEnumLiteralDeclaration_1() { return cSUBEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getSUBHyphenMinusKeyword_1_0() { return cSUBHyphenMinusKeyword_1_0; }

		//MUL="*"
		public EnumLiteralDeclaration getMULEnumLiteralDeclaration_2() { return cMULEnumLiteralDeclaration_2; }

		//"*"
		public Keyword getMULAsteriskKeyword_2_0() { return cMULAsteriskKeyword_2_0; }

		//DIV="/"
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_3() { return cDIVEnumLiteralDeclaration_3; }

		//"/"
		public Keyword getDIVSolidusKeyword_3_0() { return cDIVSolidusKeyword_3_0; }
	}
	
	private TraceInterfaceElements pTraceInterface;
	private TraceDefinitionElements pTraceDefinition;
	private TraceElementInlineElements pTraceElementInline;
	private TraceElementExpandedElements pTraceElementExpanded;
	private TypeExpressionElements pTypeExpression;
	private ClassUseElements pClassUse;
	private SingleAnnotationElements pSingleAnnotation;
	private PotencyAnnotationElements pPotencyAnnotation;
	private StatementElements pStatement;
	private PropertyWriteElements pPropertyWrite;
	private DefineVariableElements pDefineVariable;
	private ModelReferenceElements pModelReference;
	private ExpressionElements pExpression;
	private PrimaryExpressionElements pPrimaryExpression;
	private IfExprElements pIfExpr;
	private ConditionBranchElements pConditionBranch;
	private BranchBranchElements pBranchBranch;
	private BinaryOpElements unknownRuleBinaryOp;
	private ParenthesizedExpressionElements pParenthesizedExpression;
	private LiteralElements pLiteral;
	private VariableReferenceElements pVariableReference;
	private ClosureDeclarationElements pClosureDeclaration;
	private ClosureParameterElements pClosureParameter;
	private MethodCallElements pMethodCall;
	private WithResolveMethodCallElements pWithResolveMethodCall;
	private KeywordParameterElements pKeywordParameter;
	private TerminalRule tKEYWORD_ID;
	private TerminalRule tID;
	private MatchTraceExpressionElements pMatchTraceExpression;
	private TraceExprLanguageElements pTraceExprLanguage;
	private PutTraceExpressionElements pPutTraceExpression;
	private PutTraceParameterElements pPutTraceParameter;
	private NumLiteralElements pNumLiteral;
	private FloatLiteralElements pFloatLiteral;
	private EDoubleElements pEDouble;
	private StringLiteralElements pStringLiteral;
	private BooleanLiteralElements pBooleanLiteral;
	private EStringElements pEString;
	private EIntElements pEInt;
	private EBooleanElements pEBoolean;
	private QualifiedNameElements pQualifiedName;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ExpressionsGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Begin-of Core
	//TraceInterface returns core::TraceInterface:
	//	"trace" name=EString definitions+=TraceDefinition+ "end";
	public TraceInterfaceElements getTraceInterfaceAccess() {
		return (pTraceInterface != null) ? pTraceInterface : (pTraceInterface = new TraceInterfaceElements());
	}
	
	public ParserRule getTraceInterfaceRule() {
		return getTraceInterfaceAccess().getRule();
	}

	//TraceDefinition returns core::TraceDefinition:
	//	"link" name=EString ("{" elements+=TraceElementInline (";" elements+=TraceElementInline)* "}" |
	//	elements+=TraceElementExpanded elements+=TraceElementExpanded* "end");
	public TraceDefinitionElements getTraceDefinitionAccess() {
		return (pTraceDefinition != null) ? pTraceDefinition : (pTraceDefinition = new TraceDefinitionElements());
	}
	
	public ParserRule getTraceDefinitionRule() {
		return getTraceDefinitionAccess().getRule();
	}

	//TraceElementInline returns core::TraceElement:
	//	name=EString ":" type=TypeExpression;
	public TraceElementInlineElements getTraceElementInlineAccess() {
		return (pTraceElementInline != null) ? pTraceElementInline : (pTraceElementInline = new TraceElementInlineElements());
	}
	
	public ParserRule getTraceElementInlineRule() {
		return getTraceElementInlineAccess().getRule();
	}

	//TraceElementExpanded returns core::TraceElement:
	//	"var" name=EString ":" type=TypeExpression;
	public TraceElementExpandedElements getTraceElementExpandedAccess() {
		return (pTraceElementExpanded != null) ? pTraceElementExpanded : (pTraceElementExpanded = new TraceElementExpandedElements());
	}
	
	public ParserRule getTraceElementExpandedRule() {
		return getTraceElementExpandedAccess().getRule();
	}

	//TypeExpression returns core::TypeExpression:
	//	ClassUse;
	public TypeExpressionElements getTypeExpressionAccess() {
		return (pTypeExpression != null) ? pTypeExpression : (pTypeExpression = new TypeExpressionElements());
	}
	
	public ParserRule getTypeExpressionRule() {
		return getTypeExpressionAccess().getRule();
	}

	//ClassUse returns core::ClassUse:
	//	model=[core::RepresentModel] "!" className=ID annotations+=SingleAnnotation? strictType?="!"?;
	public ClassUseElements getClassUseAccess() {
		return (pClassUse != null) ? pClassUse : (pClassUse = new ClassUseElements());
	}
	
	public ParserRule getClassUseRule() {
		return getClassUseAccess().getRule();
	}

	//SingleAnnotation returns core::SingleAnnotation:
	//	PotencyAnnotation;
	public SingleAnnotationElements getSingleAnnotationAccess() {
		return (pSingleAnnotation != null) ? pSingleAnnotation : (pSingleAnnotation = new SingleAnnotationElements());
	}
	
	public ParserRule getSingleAnnotationRule() {
		return getSingleAnnotationAccess().getRule();
	}

	//PotencyAnnotation returns core::PotencyAnnotation:
	//	("@" | "^") value=INT;
	public PotencyAnnotationElements getPotencyAnnotationAccess() {
		return (pPotencyAnnotation != null) ? pPotencyAnnotation : (pPotencyAnnotation = new PotencyAnnotationElements());
	}
	
	public ParserRule getPotencyAnnotationRule() {
		return getPotencyAnnotationAccess().getRule();
	}

	//Statement returns core::Statement:
	//	DefineVariable | Expression | PutTraceExpression | PropertyWrite;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//PropertyWrite returns core::PropertyWrite:
	//	receptor=[core::Variable] "." property=ID "=" expression=Expression;
	public PropertyWriteElements getPropertyWriteAccess() {
		return (pPropertyWrite != null) ? pPropertyWrite : (pPropertyWrite = new PropertyWriteElements());
	}
	
	public ParserRule getPropertyWriteRule() {
		return getPropertyWriteAccess().getRule();
	}

	//DefineVariable returns core::DefineVariable:
	//	name=EString "=" expression=Expression;
	public DefineVariableElements getDefineVariableAccess() {
		return (pDefineVariable != null) ? pDefineVariable : (pDefineVariable = new DefineVariableElements());
	}
	
	public ParserRule getDefineVariableRule() {
		return getDefineVariableAccess().getRule();
	}

	//// ClassUse How to reuse ClassUse?? 
	//ModelReference returns core::ModelReference:
	//	model=[core::RepresentModel] "!" className=EString;
	public ModelReferenceElements getModelReferenceAccess() {
		return (pModelReference != null) ? pModelReference : (pModelReference = new ModelReferenceElements());
	}
	
	public ParserRule getModelReferenceRule() {
		return getModelReferenceAccess().getRule();
	}

	//Expression returns core::Expression:
	//	MethodCall;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//// should be in another language?
	////| BinaryExpr
	//PrimaryExpression returns core::Expression:
	//	Literal | VariableReference | ModelReference | ParenthesizedExpression | MatchTraceExpression | ClosureDeclaration |
	//	IfExpr;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//IfExpr returns core::IfExpr:
	//	"if" then=ConditionBranch ("elsif" elsifs+=ConditionBranch)* ("else" else=BranchBranch)? "end";
	public IfExprElements getIfExprAccess() {
		return (pIfExpr != null) ? pIfExpr : (pIfExpr = new IfExprElements());
	}
	
	public ParserRule getIfExprRule() {
		return getIfExprAccess().getRule();
	}

	//ConditionBranch returns core::IfBranch:
	//	condition=Expression statements+=Statement+;
	public ConditionBranchElements getConditionBranchAccess() {
		return (pConditionBranch != null) ? pConditionBranch : (pConditionBranch = new ConditionBranchElements());
	}
	
	public ParserRule getConditionBranchRule() {
		return getConditionBranchAccess().getRule();
	}

	//BranchBranch returns core::IfBranch:
	//	statements+=Statement+;
	public BranchBranchElements getBranchBranchAccess() {
		return (pBranchBranch != null) ? pBranchBranch : (pBranchBranch = new BranchBranchElements());
	}
	
	public ParserRule getBranchBranchRule() {
		return getBranchBranchAccess().getRule();
	}

	////BinaryExpr returns core::BinaryExpr:
	////	left=Expression  binaryOp=BinaryOp right=Expression 
	////;
	//enum BinaryOp returns core::BinaryOp:
	//	ADD="+" | SUB="-" | MUL="*" | DIV="/";
	public BinaryOpElements getBinaryOpAccess() {
		return (unknownRuleBinaryOp != null) ? unknownRuleBinaryOp : (unknownRuleBinaryOp = new BinaryOpElements());
	}
	
	public EnumRule getBinaryOpRule() {
		return getBinaryOpAccess().getRule();
	}

	//ParenthesizedExpression returns core::Expression:
	//	"(" Expression ")";
	public ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return (pParenthesizedExpression != null) ? pParenthesizedExpression : (pParenthesizedExpression = new ParenthesizedExpressionElements());
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//Literal returns core::Expression:
	//	FloatLiteral | NumLiteral | StringLiteral | BooleanLiteral;
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//VariableReference returns core::VariableReference:
	//	variable=[core::Variable];
	public VariableReferenceElements getVariableReferenceAccess() {
		return (pVariableReference != null) ? pVariableReference : (pVariableReference = new VariableReferenceElements());
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	//ClosureDeclaration returns core::ClosureDeclaration:
	//	"{" ("|" formalParameters+=ClosureParameter ("," formalParameters+=ClosureParameter)* "|")? statements+=Statement+
	//	"}";
	public ClosureDeclarationElements getClosureDeclarationAccess() {
		return (pClosureDeclaration != null) ? pClosureDeclaration : (pClosureDeclaration = new ClosureDeclarationElements());
	}
	
	public ParserRule getClosureDeclarationRule() {
		return getClosureDeclarationAccess().getRule();
	}

	//ClosureParameter returns core::ClosureParameter:
	//	name=ID;
	public ClosureParameterElements getClosureParameterAccess() {
		return (pClosureParameter != null) ? pClosureParameter : (pClosureParameter = new ClosureParameterElements());
	}
	
	public ParserRule getClosureParameterRule() {
		return getClosureParameterAccess().getRule();
	}

	//MethodCall returns core::Expression:
	//	PrimaryExpression ({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression //|	( ({core::MethodCall.receptor = current}) "." methodName=EString )
	//	//|   (=> ({core::KeywordMethodCall.receptor = current}) "." (parameters+=KeywordParameter)+  )
	//	//|   (=> ({core::KeywordMethodCall.receptor = current}) (parameters+=KeywordParameter)+  )+	
	//	| (=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
	//	parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)+)?;
	public MethodCallElements getMethodCallAccess() {
		return (pMethodCall != null) ? pMethodCall : (pMethodCall = new MethodCallElements());
	}
	
	public ParserRule getMethodCallRule() {
		return getMethodCallAccess().getRule();
	}

	//WithResolveMethodCall returns core::Expression:
	//	PrimaryExpression ({core::BinaryExpr.left=current} binaryOp=BinaryOp right=Expression // to allow accessing attributes	
	//	| (({core::ResolveLink.expr=current} "[" (module=[core::UseDeclaration] isExternal?="!")? linkName=EString ("."
	//	featureName=EString)? "]") (=> ({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="("
	//	parameters+=Expression ("," parameters+=Expression)* ")")? parameters+=ClosureDeclaration?)?)+ | ((=>
	//	({core::MethodCall.receptor=current}) "." methodName=EString (withParameters?="(" parameters+=Expression (","
	//	parameters+=Expression)* ")")? parameters+=ClosureDeclaration?) ({core::ResolveLink.expr=current} "["
	//	(module=[core::UseDeclaration] isExternal?="!")? linkName=EString ("." featureName=EString)? "]")?)+)? // ? ( ({attr::AttributeUse.expr = current}) "[" attribute=[attr::AttributeDcl] "]" )?
	//;
	public WithResolveMethodCallElements getWithResolveMethodCallAccess() {
		return (pWithResolveMethodCall != null) ? pWithResolveMethodCall : (pWithResolveMethodCall = new WithResolveMethodCallElements());
	}
	
	public ParserRule getWithResolveMethodCallRule() {
		return getWithResolveMethodCallAccess().getRule();
	}

	/// *
	//WithResolveMethodCall returns core::Expression:
	//	PrimaryExpression
	//	(
	//		( ({core::BinaryExpr.left = current}) binaryOp=BinaryOp right=Expression)		
	//		| ( ( ({core::ResolveLink.expr = current}) "[" linkName=EString "]" )
	//			(=> ({core::MethodCall.receptor = current}) "." methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")" )? (parameters+=ClosureDeclaration)?  )?
	//			)+
	//	    | ( (=> ({core::MethodCall.receptor = current}) "." methodName=EString (withParameters?="(" parameters+=Expression ("," parameters+=Expression)* ")" )? (parameters+=ClosureDeclaration)?  )
	//			  (({core::ResolveLink.expr = current}) "[" linkName=EString "]")? )+
	//        // to allow accessing attributes	
	//	)? // ? ( ({attr::AttributeUse.expr = current}) "[" attribute=[attr::AttributeDcl] "]" )?
	//;
	// * / / *
	//class ResolveLink extends Expression {
	//   val Expression[1] expr;
	//   attr Boolean[1] isExternal = false;
	//   ref UseDeclaration[0..1] module;
	//
	//   attr String[1] linkName;
	//   attr String[0..1] featureName;
	//}
	// * / KeywordParameter returns core::KeywordParameter:
	//	keyword=KEYWORD_ID value=Expression;
	public KeywordParameterElements getKeywordParameterAccess() {
		return (pKeywordParameter != null) ? pKeywordParameter : (pKeywordParameter = new KeywordParameterElements());
	}
	
	public ParserRule getKeywordParameterRule() {
		return getKeywordParameterAccess().getRule();
	}

	//terminal KEYWORD_ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")* ":";
	public TerminalRule getKEYWORD_IDRule() {
		return (tKEYWORD_ID != null) ? tKEYWORD_ID : (tKEYWORD_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "KEYWORD_ID"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//MatchTraceExpression returns core::MatchTrace:
	//	"match" (ID "!")? trace=[core::TraceDefinition] "with" "[" traceExpr=TraceExprLanguage "]";
	public MatchTraceExpressionElements getMatchTraceExpressionAccess() {
		return (pMatchTraceExpression != null) ? pMatchTraceExpression : (pMatchTraceExpression = new MatchTraceExpressionElements());
	}
	
	public ParserRule getMatchTraceExpressionRule() {
		return getMatchTraceExpressionAccess().getRule();
	}

	//// TODO: Resolve!! 
	//TraceExprLanguage returns core::TraceCompareExpression:
	//	traceVar=[core::TraceElement] "=" expr=Expression;
	public TraceExprLanguageElements getTraceExprLanguageAccess() {
		return (pTraceExprLanguage != null) ? pTraceExprLanguage : (pTraceExprLanguage = new TraceExprLanguageElements());
	}
	
	public ParserRule getTraceExprLanguageRule() {
		return getTraceExprLanguageAccess().getRule();
	}

	//PutTraceExpression returns core::PutTrace:
	//	"put" (ID "!")? trace=[core::TraceDefinition] "with" "[" parameters+=PutTraceParameter (","
	//	parameters+=PutTraceParameter)+ "]";
	public PutTraceExpressionElements getPutTraceExpressionAccess() {
		return (pPutTraceExpression != null) ? pPutTraceExpression : (pPutTraceExpression = new PutTraceExpressionElements());
	}
	
	public ParserRule getPutTraceExpressionRule() {
		return getPutTraceExpressionAccess().getRule();
	}

	//PutTraceParameter returns core::PutTraceParameter:
	//	traceVar=[core::TraceElement] "=" value=Expression;
	public PutTraceParameterElements getPutTraceParameterAccess() {
		return (pPutTraceParameter != null) ? pPutTraceParameter : (pPutTraceParameter = new PutTraceParameterElements());
	}
	
	public ParserRule getPutTraceParameterRule() {
		return getPutTraceParameterAccess().getRule();
	}

	/// *
	//MethodCall returns core::MethodCall:
	//	receptor=Expression "." methodName=EString
	//	("(" parameters+=Expression ("," parameters+=Expression)* ")")?
	//; 
	// * / / *
	// 
	// => indica precedencia
	//XMemberFeatureCall returns XExpression:
	//        XPrimaryExpression
	//        (=>({XAssignment.assignable=current} '.' feature=[types::JvmIdentifiableElement|ValidID] OpSingleAssign) value=XAssignment
	//        |=>({XMemberFeatureCall.memberCallTarget=current} ("."|nullSafe?="?."|spreading?="*.")) 
	//                ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?  
	//                feature=[types::JvmIdentifiableElement|ValidID] (
	//                        =>explicitOperationCall?='(' 
	//                                (
	//                                    memberCallArguments+=XShortClosure
	//                                  |     memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
	//                                )? 
	//                        ')')?
	//                )*;
	//
	//XPrimaryExpression returns XExpression:
	//        XConstructorCall |
	//        XBlockExpression |
	//        XSwitchExpression |
	//        XFeatureCall |
	//        XLiteral |
	//        XIfExpression |
	//        XForLoopExpression |
	//        XWhileExpression |
	//        XDoWhileExpression |
	//        XThrowExpression |
	//        XReturnExpression |
	//        XTryCatchFinallyExpression |
	//        XParenthesizedExpression;
	// * / NumLiteral returns core::NumLiteral:
	//	value=EInt;
	public NumLiteralElements getNumLiteralAccess() {
		return (pNumLiteral != null) ? pNumLiteral : (pNumLiteral = new NumLiteralElements());
	}
	
	public ParserRule getNumLiteralRule() {
		return getNumLiteralAccess().getRule();
	}

	//FloatLiteral returns core::DoubleLiteral:
	//	value=EDouble;
	public FloatLiteralElements getFloatLiteralAccess() {
		return (pFloatLiteral != null) ? pFloatLiteral : (pFloatLiteral = new FloatLiteralElements());
	}
	
	public ParserRule getFloatLiteralRule() {
		return getFloatLiteralAccess().getRule();
	}

	//EDouble returns ecore::EDouble:
	//	INT "." INT;
	public EDoubleElements getEDoubleAccess() {
		return (pEDouble != null) ? pEDouble : (pEDouble = new EDoubleElements());
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}

	//StringLiteral returns core::StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//BooleanLiteral returns core::BooleanLiteral:
	//	value=EBoolean;
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (pBooleanLiteral != null) ? pBooleanLiteral : (pBooleanLiteral = new BooleanLiteralElements());
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//// End-of Core
	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//EBoolean returns ecore::EBoolean:
	//	"true" | "false";
	public EBooleanElements getEBooleanAccess() {
		return (pEBoolean != null) ? pEBoolean : (pEBoolean = new EBooleanElements());
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}

	//QualifiedName returns ecore::EString:
	//	EString ("." EString)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
