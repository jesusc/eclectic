/*
* generated by Xtext
*/
package org.eclectic.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclectic.services.ApiDescriptionLanguageGrammarAccess;

public class ApiDescriptionLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private ApiDescriptionLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclectic.ui.contentassist.antlr.internal.InternalApiDescriptionLanguageParser createParser() {
		org.eclectic.ui.contentassist.antlr.internal.InternalApiDescriptionLanguageParser result = new org.eclectic.ui.contentassist.antlr.internal.InternalApiDescriptionLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getCreationMechanismAccess().getAlternatives(), "rule__CreationMechanism__Alternatives");
					put(grammarAccess.getSetFeatureAccess().getAlternatives_3(), "rule__SetFeature__Alternatives_3");
					put(grammarAccess.getFeatureMappingAccess().getAlternatives(), "rule__FeatureMapping__Alternatives");
					put(grammarAccess.getGetMechanismAccess().getAlternatives(), "rule__GetMechanism__Alternatives");
					put(grammarAccess.getSetMechanismAccess().getAlternatives(), "rule__SetMechanism__Alternatives");
					put(grammarAccess.getDeclaredElementAccess().getAlternatives(), "rule__DeclaredElement__Alternatives");
					put(grammarAccess.getUpdateMethodAccess().getAlternatives_7(), "rule__UpdateMethod__Alternatives_7");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getMethodAccess().getAlternatives_5(), "rule__Method__Alternatives_5");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getSetKindAccess().getAlternatives(), "rule__SetKind__Alternatives");
					put(grammarAccess.getReturnKindAccess().getAlternatives(), "rule__ReturnKind__Alternatives");
					put(grammarAccess.getApiDescriptionAccess().getGroup(), "rule__ApiDescription__Group__0");
					put(grammarAccess.getApiDescriptionAccess().getGroup_5(), "rule__ApiDescription__Group_5__0");
					put(grammarAccess.getSimpleClassMappingAccess().getGroup(), "rule__SimpleClassMapping__Group__0");
					put(grammarAccess.getSimpleClassMappingAccess().getGroup_4(), "rule__SimpleClassMapping__Group_4__0");
					put(grammarAccess.getEmptyConstructorAccess().getGroup(), "rule__EmptyConstructor__Group__0");
					put(grammarAccess.getEmptyConstructorAccess().getGroup_3(), "rule__EmptyConstructor__Group_3__0");
					put(grammarAccess.getNonEmptyConstructorAccess().getGroup(), "rule__NonEmptyConstructor__Group__0");
					put(grammarAccess.getNonEmptyConstructorAccess().getGroup_4(), "rule__NonEmptyConstructor__Group_4__0");
					put(grammarAccess.getNonEmptyConstructorAccess().getGroup_6(), "rule__NonEmptyConstructor__Group_6__0");
					put(grammarAccess.getSetFeatureAccess().getGroup(), "rule__SetFeature__Group__0");
					put(grammarAccess.getSimpleAttributeMappingAccess().getGroup(), "rule__SimpleAttributeMapping__Group__0");
					put(grammarAccess.getSimpleAttributeMappingAccess().getGroup_5(), "rule__SimpleAttributeMapping__Group_5__0");
					put(grammarAccess.getSimpleAttributeMappingAccess().getGroup_6(), "rule__SimpleAttributeMapping__Group_6__0");
					put(grammarAccess.getSimpleAttributeMappingAccess().getGroup_7(), "rule__SimpleAttributeMapping__Group_7__0");
					put(grammarAccess.getSimpleReferenceMappingAccess().getGroup(), "rule__SimpleReferenceMapping__Group__0");
					put(grammarAccess.getSimpleReferenceMappingAccess().getGroup_5(), "rule__SimpleReferenceMapping__Group_5__0");
					put(grammarAccess.getSimpleReferenceMappingAccess().getGroup_6(), "rule__SimpleReferenceMapping__Group_6__0");
					put(grammarAccess.getSimpleReferenceMappingAccess().getGroup_7(), "rule__SimpleReferenceMapping__Group_7__0");
					put(grammarAccess.getSimpleGetAccess().getGroup(), "rule__SimpleGet__Group__0");
					put(grammarAccess.getSimpleSetAccess().getGroup(), "rule__SimpleSet__Group__0");
					put(grammarAccess.getGenericGetAccess().getGroup(), "rule__GenericGet__Group__0");
					put(grammarAccess.getGenericSetAccess().getGroup(), "rule__GenericSet__Group__0");
					put(grammarAccess.getIteratorGetAccess().getGroup(), "rule__IteratorGet__Group__0");
					put(grammarAccess.getIteratorDescriptionAccess().getGroup(), "rule__IteratorDescription__Group__0");
					put(grammarAccess.getObserverDescriptionAccess().getGroup(), "rule__ObserverDescription__Group__0");
					put(grammarAccess.getUpdateMethodAccess().getGroup(), "rule__UpdateMethod__Group__0");
					put(grammarAccess.getUpdateMethodAccess().getGroup_1(), "rule__UpdateMethod__Group_1__0");
					put(grammarAccess.getUpdateMethodAccess().getGroup_1_2(), "rule__UpdateMethod__Group_1_2__0");
					put(grammarAccess.getUpdateMethodAccess().getGroup_4(), "rule__UpdateMethod__Group_4__0");
					put(grammarAccess.getUpdateMethodAccess().getGroup_4_1(), "rule__UpdateMethod__Group_4_1__0");
					put(grammarAccess.getUpdateMethodAccess().getGroup_7_0(), "rule__UpdateMethod__Group_7_0__0");
					put(grammarAccess.getUpdateMethodAccess().getGroup_7_1(), "rule__UpdateMethod__Group_7_1__0");
					put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
					put(grammarAccess.getMethodAccess().getGroup_2(), "rule__Method__Group_2__0");
					put(grammarAccess.getMethodAccess().getGroup_2_1(), "rule__Method__Group_2_1__0");
					put(grammarAccess.getMethodAccess().getGroup_5_0(), "rule__Method__Group_5_0__0");
					put(grammarAccess.getMethodAccess().getGroup_5_1(), "rule__Method__Group_5_1__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getApiDescriptionAccess().getApiNameAssignment_1(), "rule__ApiDescription__ApiNameAssignment_1");
					put(grammarAccess.getApiDescriptionAccess().getMetamodelNameAssignment_4(), "rule__ApiDescription__MetamodelNameAssignment_4");
					put(grammarAccess.getApiDescriptionAccess().getMapperClassNameAssignment_5_2(), "rule__ApiDescription__MapperClassNameAssignment_5_2");
					put(grammarAccess.getApiDescriptionAccess().getDeclaredElementsAssignment_6(), "rule__ApiDescription__DeclaredElementsAssignment_6");
					put(grammarAccess.getApiDescriptionAccess().getClassMappingsAssignment_7(), "rule__ApiDescription__ClassMappingsAssignment_7");
					put(grammarAccess.getSimpleClassMappingAccess().getMetaclassNameAssignment_1(), "rule__SimpleClassMapping__MetaclassNameAssignment_1");
					put(grammarAccess.getSimpleClassMappingAccess().getCanonicalClassNameAssignment_3(), "rule__SimpleClassMapping__CanonicalClassNameAssignment_3");
					put(grammarAccess.getSimpleClassMappingAccess().getCreationAssignment_4_1(), "rule__SimpleClassMapping__CreationAssignment_4_1");
					put(grammarAccess.getSimpleClassMappingAccess().getFeatureMappingsAssignment_4_2(), "rule__SimpleClassMapping__FeatureMappingsAssignment_4_2");
					put(grammarAccess.getEmptyConstructorAccess().getStatementAssignment_3_1(), "rule__EmptyConstructor__StatementAssignment_3_1");
					put(grammarAccess.getNonEmptyConstructorAccess().getParametersAssignment_3(), "rule__NonEmptyConstructor__ParametersAssignment_3");
					put(grammarAccess.getNonEmptyConstructorAccess().getParametersAssignment_4_1(), "rule__NonEmptyConstructor__ParametersAssignment_4_1");
					put(grammarAccess.getNonEmptyConstructorAccess().getStatementAssignment_6_1(), "rule__NonEmptyConstructor__StatementAssignment_6_1");
					put(grammarAccess.getSetFeatureAccess().getFeatureAssignment_1(), "rule__SetFeature__FeatureAssignment_1");
					put(grammarAccess.getSetFeatureAccess().getIntValueAssignment_3_0(), "rule__SetFeature__IntValueAssignment_3_0");
					put(grammarAccess.getSetFeatureAccess().getStrValueAssignment_3_1(), "rule__SetFeature__StrValueAssignment_3_1");
					put(grammarAccess.getSetFeatureAccess().getBoolValueAssignment_3_2(), "rule__SetFeature__BoolValueAssignment_3_2");
					put(grammarAccess.getSimpleAttributeMappingAccess().getFeatureNameAssignment_1(), "rule__SimpleAttributeMapping__FeatureNameAssignment_1");
					put(grammarAccess.getSimpleAttributeMappingAccess().getIsMultivaluedAssignment_2(), "rule__SimpleAttributeMapping__IsMultivaluedAssignment_2");
					put(grammarAccess.getSimpleAttributeMappingAccess().getTypeAssignment_4(), "rule__SimpleAttributeMapping__TypeAssignment_4");
					put(grammarAccess.getSimpleAttributeMappingAccess().getConstructorTypeAssignment_5_2(), "rule__SimpleAttributeMapping__ConstructorTypeAssignment_5_2");
					put(grammarAccess.getSimpleAttributeMappingAccess().getGetMethodAssignment_6_1(), "rule__SimpleAttributeMapping__GetMethodAssignment_6_1");
					put(grammarAccess.getSimpleAttributeMappingAccess().getSetMethodAssignment_7_1(), "rule__SimpleAttributeMapping__SetMethodAssignment_7_1");
					put(grammarAccess.getSimpleReferenceMappingAccess().getFeatureNameAssignment_1(), "rule__SimpleReferenceMapping__FeatureNameAssignment_1");
					put(grammarAccess.getSimpleReferenceMappingAccess().getIsMultivaluedAssignment_2(), "rule__SimpleReferenceMapping__IsMultivaluedAssignment_2");
					put(grammarAccess.getSimpleReferenceMappingAccess().getTypeAssignment_4(), "rule__SimpleReferenceMapping__TypeAssignment_4");
					put(grammarAccess.getSimpleReferenceMappingAccess().getConstructorTypeAssignment_5_2(), "rule__SimpleReferenceMapping__ConstructorTypeAssignment_5_2");
					put(grammarAccess.getSimpleReferenceMappingAccess().getGetMethodAssignment_6_1(), "rule__SimpleReferenceMapping__GetMethodAssignment_6_1");
					put(grammarAccess.getSimpleReferenceMappingAccess().getSetMethodAssignment_7_1(), "rule__SimpleReferenceMapping__SetMethodAssignment_7_1");
					put(grammarAccess.getSimpleGetAccess().getGetterAssignment_1(), "rule__SimpleGet__GetterAssignment_1");
					put(grammarAccess.getSimpleSetAccess().getSetterAssignment_1(), "rule__SimpleSet__SetterAssignment_1");
					put(grammarAccess.getGenericGetAccess().getGetterAssignment_1(), "rule__GenericGet__GetterAssignment_1");
					put(grammarAccess.getGenericSetAccess().getSetterAssignment_1(), "rule__GenericSet__SetterAssignment_1");
					put(grammarAccess.getIteratorGetAccess().getIteratorAssignment_1(), "rule__IteratorGet__IteratorAssignment_1");
					put(grammarAccess.getIteratorGetAccess().getGetIteratorAssignment_3(), "rule__IteratorGet__GetIteratorAssignment_3");
					put(grammarAccess.getIteratorDescriptionAccess().getNameAssignment_1(), "rule__IteratorDescription__NameAssignment_1");
					put(grammarAccess.getIteratorDescriptionAccess().getIteratorClassAssignment_3(), "rule__IteratorDescription__IteratorClassAssignment_3");
					put(grammarAccess.getIteratorDescriptionAccess().getHasFinishedAssignment_6(), "rule__IteratorDescription__HasFinishedAssignment_6");
					put(grammarAccess.getIteratorDescriptionAccess().getNextElementAssignment_8(), "rule__IteratorDescription__NextElementAssignment_8");
					put(grammarAccess.getObserverDescriptionAccess().getNameAssignment_1(), "rule__ObserverDescription__NameAssignment_1");
					put(grammarAccess.getObserverDescriptionAccess().getObserverClassAssignment_3(), "rule__ObserverDescription__ObserverClassAssignment_3");
					put(grammarAccess.getObserverDescriptionAccess().getUpdateMethodsAssignment_5(), "rule__ObserverDescription__UpdateMethodsAssignment_5");
					put(grammarAccess.getUpdateMethodAccess().getInterestAssignment_1_1(), "rule__UpdateMethod__InterestAssignment_1_1");
					put(grammarAccess.getUpdateMethodAccess().getInterestAssignment_1_2_1(), "rule__UpdateMethod__InterestAssignment_1_2_1");
					put(grammarAccess.getUpdateMethodAccess().getNameAssignment_2(), "rule__UpdateMethod__NameAssignment_2");
					put(grammarAccess.getUpdateMethodAccess().getParameterTypesAssignment_4_0(), "rule__UpdateMethod__ParameterTypesAssignment_4_0");
					put(grammarAccess.getUpdateMethodAccess().getParameterTypesAssignment_4_1_1(), "rule__UpdateMethod__ParameterTypesAssignment_4_1_1");
					put(grammarAccess.getUpdateMethodAccess().getReturnArrayAssignment_7_0_0(), "rule__UpdateMethod__ReturnArrayAssignment_7_0_0");
					put(grammarAccess.getUpdateMethodAccess().getReturnTypeAssignment_7_0_2(), "rule__UpdateMethod__ReturnTypeAssignment_7_0_2");
					put(grammarAccess.getUpdateMethodAccess().getReturnCollectionAssignment_7_1_0(), "rule__UpdateMethod__ReturnCollectionAssignment_7_1_0");
					put(grammarAccess.getUpdateMethodAccess().getReturnTypeAssignment_7_1_2(), "rule__UpdateMethod__ReturnTypeAssignment_7_1_2");
					put(grammarAccess.getUpdateMethodAccess().getReturnTypeAssignment_7_2(), "rule__UpdateMethod__ReturnTypeAssignment_7_2");
					put(grammarAccess.getUpdateMethodAccess().getReturnVoidAssignment_7_3(), "rule__UpdateMethod__ReturnVoidAssignment_7_3");
					put(grammarAccess.getMethodAccess().getNameAssignment_0(), "rule__Method__NameAssignment_0");
					put(grammarAccess.getMethodAccess().getParameterTypesAssignment_2_0(), "rule__Method__ParameterTypesAssignment_2_0");
					put(grammarAccess.getMethodAccess().getParameterTypesAssignment_2_1_1(), "rule__Method__ParameterTypesAssignment_2_1_1");
					put(grammarAccess.getMethodAccess().getReturnArrayAssignment_5_0_0(), "rule__Method__ReturnArrayAssignment_5_0_0");
					put(grammarAccess.getMethodAccess().getReturnTypeAssignment_5_0_2(), "rule__Method__ReturnTypeAssignment_5_0_2");
					put(grammarAccess.getMethodAccess().getReturnCollectionAssignment_5_1_0(), "rule__Method__ReturnCollectionAssignment_5_1_0");
					put(grammarAccess.getMethodAccess().getReturnTypeAssignment_5_1_2(), "rule__Method__ReturnTypeAssignment_5_1_2");
					put(grammarAccess.getMethodAccess().getReturnTypeAssignment_5_2(), "rule__Method__ReturnTypeAssignment_5_2");
					put(grammarAccess.getMethodAccess().getReturnVoidAssignment_5_3(), "rule__Method__ReturnVoidAssignment_5_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclectic.ui.contentassist.antlr.internal.InternalApiDescriptionLanguageParser typedParser = (org.eclectic.ui.contentassist.antlr.internal.InternalApiDescriptionLanguageParser) parser;
			typedParser.entryRuleApiDescription();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ApiDescriptionLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ApiDescriptionLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
