/*
* generated by Xtext
*/
package org.eclectic.frontend.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclectic.frontend.services.AttributionGrammarAccess;

public class AttributionParser extends AbstractContentAssistParser {
	
	@Inject
	private AttributionGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclectic.frontend.ui.contentassist.antlr.internal.InternalAttributionParser createParser() {
		org.eclectic.frontend.ui.contentassist.antlr.internal.InternalAttributionParser result = new org.eclectic.frontend.ui.contentassist.antlr.internal.InternalAttributionParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getAttributeDclAccess().getAlternatives(), "rule__AttributeDcl__Alternatives");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getClosureStatementAccess().getAlternatives(), "rule__ClosureStatement__Alternatives");
					put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
					put(grammarAccess.getInitiableExpressionAccess().getAlternatives(), "rule__InitiableExpression__Alternatives");
					put(grammarAccess.getMethodCallAccess().getAlternatives_1(), "rule__MethodCall__Alternatives_1");
					put(grammarAccess.getMethodCallAccess().getAlternatives_1_2_1(), "rule__MethodCall__Alternatives_1_2_1");
					put(grammarAccess.getTraceDefinitionAccess().getAlternatives_2(), "rule__TraceDefinition__Alternatives_2");
					put(grammarAccess.getPotencyAnnotationAccess().getAlternatives_0(), "rule__PotencyAnnotation__Alternatives_0");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getWithResolveMethodCallAccess().getAlternatives_1(), "rule__WithResolveMethodCall__Alternatives_1");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getBinaryOpAccess().getAlternatives(), "rule__BinaryOp__Alternatives");
					put(grammarAccess.getAttributionTransformationAccess().getGroup(), "rule__AttributionTransformation__Group__0");
					put(grammarAccess.getAttributionTransformationAccess().getGroup_4(), "rule__AttributionTransformation__Group_4__0");
					put(grammarAccess.getAttributionTransformationAccess().getGroup_9(), "rule__AttributionTransformation__Group_9__0");
					put(grammarAccess.getMetamodelModelAnnotationAccess().getGroup(), "rule__MetamodelModelAnnotation__Group__0");
					put(grammarAccess.getTransformationDefinitionParameterAccess().getGroup(), "rule__TransformationDefinitionParameter__Group__0");
					put(grammarAccess.getClassUseAccess().getGroup(), "rule__ClassUse__Group__0");
					put(grammarAccess.getUseDeclarationAccess().getGroup(), "rule__UseDeclaration__Group__0");
					put(grammarAccess.getUseDeclarationAccess().getGroup_2(), "rule__UseDeclaration__Group_2__0");
					put(grammarAccess.getInheritedAttributeDclAccess().getGroup(), "rule__InheritedAttributeDcl__Group__0");
					put(grammarAccess.getSynthesizedAttributeDclAccess().getGroup(), "rule__SynthesizedAttributeDcl__Group__0");
					put(grammarAccess.getAttributionRuleAccess().getGroup(), "rule__AttributionRule__Group__0");
					put(grammarAccess.getClosureDeclarationAccess().getGroup(), "rule__ClosureDeclaration__Group__0");
					put(grammarAccess.getClosureDeclarationAccess().getGroup_1(), "rule__ClosureDeclaration__Group_1__0");
					put(grammarAccess.getClosureDeclarationAccess().getGroup_1_2(), "rule__ClosureDeclaration__Group_1_2__0");
					put(grammarAccess.getInitiableExpressionAccess().getGroup_1(), "rule__InitiableExpression__Group_1__0");
					put(grammarAccess.getInitiableExpressionAccess().getGroup_1_1(), "rule__InitiableExpression__Group_1_1__0");
					put(grammarAccess.getInitiableExpressionAccess().getGroup_1_1_0(), "rule__InitiableExpression__Group_1_1_0__0");
					put(grammarAccess.getInitiableExpressionAccess().getGroup_1_1_3(), "rule__InitiableExpression__Group_1_1_3__0");
					put(grammarAccess.getInitiableExpressionAccess().getGroup_1_1_3_2(), "rule__InitiableExpression__Group_1_1_3_2__0");
					put(grammarAccess.getMethodCallAccess().getGroup(), "rule__MethodCall__Group__0");
					put(grammarAccess.getMethodCallAccess().getGroup_1_0(), "rule__MethodCall__Group_1_0__0");
					put(grammarAccess.getMethodCallAccess().getGroup_1_1(), "rule__MethodCall__Group_1_1__0");
					put(grammarAccess.getMethodCallAccess().getGroup_1_1_0(), "rule__MethodCall__Group_1_1_0__0");
					put(grammarAccess.getMethodCallAccess().getGroup_1_1_1(), "rule__MethodCall__Group_1_1_1__0");
					put(grammarAccess.getMethodCallAccess().getGroup_1_1_1_0(), "rule__MethodCall__Group_1_1_1_0__0");
					put(grammarAccess.getMethodCallAccess().getGroup_1_1_1_3(), "rule__MethodCall__Group_1_1_1_3__0");
					put(grammarAccess.getMethodCallAccess().getGroup_1_1_1_3_2(), "rule__MethodCall__Group_1_1_1_3_2__0");
					put(grammarAccess.getMethodCallAccess().getGroup_1_2(), "rule__MethodCall__Group_1_2__0");
					put(grammarAccess.getMethodCallAccess().getGroup_1_2_0(), "rule__MethodCall__Group_1_2_0__0");
					put(grammarAccess.getMethodCallAccess().getGroup_1_2_0_0(), "rule__MethodCall__Group_1_2_0_0__0");
					put(grammarAccess.getMethodCallAccess().getGroup_1_2_0_3(), "rule__MethodCall__Group_1_2_0_3__0");
					put(grammarAccess.getMethodCallAccess().getGroup_1_2_0_3_2(), "rule__MethodCall__Group_1_2_0_3_2__0");
					put(grammarAccess.getMethodCallAccess().getGroup_1_2_1_0(), "rule__MethodCall__Group_1_2_1_0__0");
					put(grammarAccess.getMethodCallAccess().getGroup_1_2_1_1(), "rule__MethodCall__Group_1_2_1_1__0");
					put(grammarAccess.getMethodCallAccess().getGroup_1_2_1_1_5(), "rule__MethodCall__Group_1_2_1_1_5__0");
					put(grammarAccess.getAttributeInitAccess().getGroup(), "rule__AttributeInit__Group__0");
					put(grammarAccess.getTraceInterfaceAccess().getGroup(), "rule__TraceInterface__Group__0");
					put(grammarAccess.getTraceDefinitionAccess().getGroup(), "rule__TraceDefinition__Group__0");
					put(grammarAccess.getTraceDefinitionAccess().getGroup_2_0(), "rule__TraceDefinition__Group_2_0__0");
					put(grammarAccess.getTraceDefinitionAccess().getGroup_2_0_2(), "rule__TraceDefinition__Group_2_0_2__0");
					put(grammarAccess.getTraceDefinitionAccess().getGroup_2_1(), "rule__TraceDefinition__Group_2_1__0");
					put(grammarAccess.getTraceElementInlineAccess().getGroup(), "rule__TraceElementInline__Group__0");
					put(grammarAccess.getTraceElementExpandedAccess().getGroup(), "rule__TraceElementExpanded__Group__0");
					put(grammarAccess.getPotencyAnnotationAccess().getGroup(), "rule__PotencyAnnotation__Group__0");
					put(grammarAccess.getPropertyWriteAccess().getGroup(), "rule__PropertyWrite__Group__0");
					put(grammarAccess.getDefineVariableAccess().getGroup(), "rule__DefineVariable__Group__0");
					put(grammarAccess.getModelReferenceAccess().getGroup(), "rule__ModelReference__Group__0");
					put(grammarAccess.getParenthesizedExpressionAccess().getGroup(), "rule__ParenthesizedExpression__Group__0");
					put(grammarAccess.getWithResolveMethodCallAccess().getGroup(), "rule__WithResolveMethodCall__Group__0");
					put(grammarAccess.getWithResolveMethodCallAccess().getGroup_1_0(), "rule__WithResolveMethodCall__Group_1_0__0");
					put(grammarAccess.getWithResolveMethodCallAccess().getGroup_1_1(), "rule__WithResolveMethodCall__Group_1_1__0");
					put(grammarAccess.getWithResolveMethodCallAccess().getGroup_1_1_0(), "rule__WithResolveMethodCall__Group_1_1_0__0");
					put(grammarAccess.getWithResolveMethodCallAccess().getGroup_1_1_0_2(), "rule__WithResolveMethodCall__Group_1_1_0_2__0");
					put(grammarAccess.getWithResolveMethodCallAccess().getGroup_1_1_0_4(), "rule__WithResolveMethodCall__Group_1_1_0_4__0");
					put(grammarAccess.getWithResolveMethodCallAccess().getGroup_1_1_1(), "rule__WithResolveMethodCall__Group_1_1_1__0");
					put(grammarAccess.getWithResolveMethodCallAccess().getGroup_1_1_1_0(), "rule__WithResolveMethodCall__Group_1_1_1_0__0");
					put(grammarAccess.getWithResolveMethodCallAccess().getGroup_1_1_1_3(), "rule__WithResolveMethodCall__Group_1_1_1_3__0");
					put(grammarAccess.getWithResolveMethodCallAccess().getGroup_1_1_1_3_2(), "rule__WithResolveMethodCall__Group_1_1_1_3_2__0");
					put(grammarAccess.getWithResolveMethodCallAccess().getGroup_1_2(), "rule__WithResolveMethodCall__Group_1_2__0");
					put(grammarAccess.getWithResolveMethodCallAccess().getGroup_1_2_0(), "rule__WithResolveMethodCall__Group_1_2_0__0");
					put(grammarAccess.getWithResolveMethodCallAccess().getGroup_1_2_0_0(), "rule__WithResolveMethodCall__Group_1_2_0_0__0");
					put(grammarAccess.getWithResolveMethodCallAccess().getGroup_1_2_0_3(), "rule__WithResolveMethodCall__Group_1_2_0_3__0");
					put(grammarAccess.getWithResolveMethodCallAccess().getGroup_1_2_0_3_2(), "rule__WithResolveMethodCall__Group_1_2_0_3_2__0");
					put(grammarAccess.getWithResolveMethodCallAccess().getGroup_1_2_1(), "rule__WithResolveMethodCall__Group_1_2_1__0");
					put(grammarAccess.getWithResolveMethodCallAccess().getGroup_1_2_1_2(), "rule__WithResolveMethodCall__Group_1_2_1_2__0");
					put(grammarAccess.getWithResolveMethodCallAccess().getGroup_1_2_1_4(), "rule__WithResolveMethodCall__Group_1_2_1_4__0");
					put(grammarAccess.getKeywordParameterAccess().getGroup(), "rule__KeywordParameter__Group__0");
					put(grammarAccess.getMatchTraceExpressionAccess().getGroup(), "rule__MatchTraceExpression__Group__0");
					put(grammarAccess.getMatchTraceExpressionAccess().getGroup_1(), "rule__MatchTraceExpression__Group_1__0");
					put(grammarAccess.getTraceExprLanguageAccess().getGroup(), "rule__TraceExprLanguage__Group__0");
					put(grammarAccess.getPutTraceExpressionAccess().getGroup(), "rule__PutTraceExpression__Group__0");
					put(grammarAccess.getPutTraceExpressionAccess().getGroup_1(), "rule__PutTraceExpression__Group_1__0");
					put(grammarAccess.getPutTraceExpressionAccess().getGroup_6(), "rule__PutTraceExpression__Group_6__0");
					put(grammarAccess.getPutTraceParameterAccess().getGroup(), "rule__PutTraceParameter__Group__0");
					put(grammarAccess.getEDoubleAccess().getGroup(), "rule__EDouble__Group__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getAttributionTransformationAccess().getNameAssignment_1(), "rule__AttributionTransformation__NameAssignment_1");
					put(grammarAccess.getAttributionTransformationAccess().getInModelsAssignment_3(), "rule__AttributionTransformation__InModelsAssignment_3");
					put(grammarAccess.getAttributionTransformationAccess().getInModelsAssignment_4_1(), "rule__AttributionTransformation__InModelsAssignment_4_1");
					put(grammarAccess.getAttributionTransformationAccess().getOutModelsAssignment_8(), "rule__AttributionTransformation__OutModelsAssignment_8");
					put(grammarAccess.getAttributionTransformationAccess().getInModelsAssignment_9_1(), "rule__AttributionTransformation__InModelsAssignment_9_1");
					put(grammarAccess.getAttributionTransformationAccess().getAnnotationsAssignment_11(), "rule__AttributionTransformation__AnnotationsAssignment_11");
					put(grammarAccess.getAttributionTransformationAccess().getUsesAssignment_12(), "rule__AttributionTransformation__UsesAssignment_12");
					put(grammarAccess.getAttributionTransformationAccess().getAttributesAssignment_13(), "rule__AttributionTransformation__AttributesAssignment_13");
					put(grammarAccess.getAttributionTransformationAccess().getRulesAssignment_14(), "rule__AttributionTransformation__RulesAssignment_14");
					put(grammarAccess.getMetamodelModelAnnotationAccess().getAnnotatedElementAssignment_0(), "rule__MetamodelModelAnnotation__AnnotatedElementAssignment_0");
					put(grammarAccess.getMetamodelModelAnnotationAccess().getMetamodelAssignment_2(), "rule__MetamodelModelAnnotation__MetamodelAssignment_2");
					put(grammarAccess.getTransformationDefinitionParameterAccess().getNameAssignment_1(), "rule__TransformationDefinitionParameter__NameAssignment_1");
					put(grammarAccess.getClassUseAccess().getModelAssignment_0(), "rule__ClassUse__ModelAssignment_0");
					put(grammarAccess.getClassUseAccess().getClassNameAssignment_2(), "rule__ClassUse__ClassNameAssignment_2");
					put(grammarAccess.getUseDeclarationAccess().getModuleAssignment_1(), "rule__UseDeclaration__ModuleAssignment_1");
					put(grammarAccess.getUseDeclarationAccess().getAsAssignment_2_1(), "rule__UseDeclaration__AsAssignment_2_1");
					put(grammarAccess.getInheritedAttributeDclAccess().getNameAssignment_1(), "rule__InheritedAttributeDcl__NameAssignment_1");
					put(grammarAccess.getInheritedAttributeDclAccess().getType_Assignment_3(), "rule__InheritedAttributeDcl__Type_Assignment_3");
					put(grammarAccess.getSynthesizedAttributeDclAccess().getNameAssignment_1(), "rule__SynthesizedAttributeDcl__NameAssignment_1");
					put(grammarAccess.getSynthesizedAttributeDclAccess().getType_Assignment_3(), "rule__SynthesizedAttributeDcl__Type_Assignment_3");
					put(grammarAccess.getAttributionRuleAccess().getTypeAssignment_1(), "rule__AttributionRule__TypeAssignment_1");
					put(grammarAccess.getAttributionRuleAccess().getStatementsAssignment_2(), "rule__AttributionRule__StatementsAssignment_2");
					put(grammarAccess.getClosureDeclarationAccess().getFormalParametersAssignment_1_1(), "rule__ClosureDeclaration__FormalParametersAssignment_1_1");
					put(grammarAccess.getClosureDeclarationAccess().getFormalParametersAssignment_1_2_1(), "rule__ClosureDeclaration__FormalParametersAssignment_1_2_1");
					put(grammarAccess.getClosureDeclarationAccess().getStatementsAssignment_2(), "rule__ClosureDeclaration__StatementsAssignment_2");
					put(grammarAccess.getInitiableExpressionAccess().getMethodNameAssignment_1_1_2(), "rule__InitiableExpression__MethodNameAssignment_1_1_2");
					put(grammarAccess.getInitiableExpressionAccess().getWithParametersAssignment_1_1_3_0(), "rule__InitiableExpression__WithParametersAssignment_1_1_3_0");
					put(grammarAccess.getInitiableExpressionAccess().getParametersAssignment_1_1_3_1(), "rule__InitiableExpression__ParametersAssignment_1_1_3_1");
					put(grammarAccess.getInitiableExpressionAccess().getParametersAssignment_1_1_3_2_1(), "rule__InitiableExpression__ParametersAssignment_1_1_3_2_1");
					put(grammarAccess.getInitiableExpressionAccess().getParametersAssignment_1_1_4(), "rule__InitiableExpression__ParametersAssignment_1_1_4");
					put(grammarAccess.getMethodCallAccess().getBinaryOpAssignment_1_0_1(), "rule__MethodCall__BinaryOpAssignment_1_0_1");
					put(grammarAccess.getMethodCallAccess().getRightAssignment_1_0_2(), "rule__MethodCall__RightAssignment_1_0_2");
					put(grammarAccess.getMethodCallAccess().getAttributeAssignment_1_1_0_2(), "rule__MethodCall__AttributeAssignment_1_1_0_2");
					put(grammarAccess.getMethodCallAccess().getMethodNameAssignment_1_1_1_2(), "rule__MethodCall__MethodNameAssignment_1_1_1_2");
					put(grammarAccess.getMethodCallAccess().getWithParametersAssignment_1_1_1_3_0(), "rule__MethodCall__WithParametersAssignment_1_1_1_3_0");
					put(grammarAccess.getMethodCallAccess().getParametersAssignment_1_1_1_3_1(), "rule__MethodCall__ParametersAssignment_1_1_1_3_1");
					put(grammarAccess.getMethodCallAccess().getParametersAssignment_1_1_1_3_2_1(), "rule__MethodCall__ParametersAssignment_1_1_1_3_2_1");
					put(grammarAccess.getMethodCallAccess().getParametersAssignment_1_1_1_4(), "rule__MethodCall__ParametersAssignment_1_1_1_4");
					put(grammarAccess.getMethodCallAccess().getMethodNameAssignment_1_2_0_2(), "rule__MethodCall__MethodNameAssignment_1_2_0_2");
					put(grammarAccess.getMethodCallAccess().getWithParametersAssignment_1_2_0_3_0(), "rule__MethodCall__WithParametersAssignment_1_2_0_3_0");
					put(grammarAccess.getMethodCallAccess().getParametersAssignment_1_2_0_3_1(), "rule__MethodCall__ParametersAssignment_1_2_0_3_1");
					put(grammarAccess.getMethodCallAccess().getParametersAssignment_1_2_0_3_2_1(), "rule__MethodCall__ParametersAssignment_1_2_0_3_2_1");
					put(grammarAccess.getMethodCallAccess().getParametersAssignment_1_2_0_4(), "rule__MethodCall__ParametersAssignment_1_2_0_4");
					put(grammarAccess.getMethodCallAccess().getAttributeAssignment_1_2_1_0_2(), "rule__MethodCall__AttributeAssignment_1_2_1_0_2");
					put(grammarAccess.getMethodCallAccess().getModuleAssignment_1_2_1_1_2(), "rule__MethodCall__ModuleAssignment_1_2_1_1_2");
					put(grammarAccess.getMethodCallAccess().getIsExternalAssignment_1_2_1_1_3(), "rule__MethodCall__IsExternalAssignment_1_2_1_1_3");
					put(grammarAccess.getMethodCallAccess().getLinkNameAssignment_1_2_1_1_4(), "rule__MethodCall__LinkNameAssignment_1_2_1_1_4");
					put(grammarAccess.getMethodCallAccess().getFeatureNameAssignment_1_2_1_1_5_1(), "rule__MethodCall__FeatureNameAssignment_1_2_1_1_5_1");
					put(grammarAccess.getAttributeInitAccess().getReceptorAssignment_0(), "rule__AttributeInit__ReceptorAssignment_0");
					put(grammarAccess.getAttributeInitAccess().getAttributeAssignment_2(), "rule__AttributeInit__AttributeAssignment_2");
					put(grammarAccess.getAttributeInitAccess().getRightAssignment_5(), "rule__AttributeInit__RightAssignment_5");
					put(grammarAccess.getTraceInterfaceAccess().getNameAssignment_1(), "rule__TraceInterface__NameAssignment_1");
					put(grammarAccess.getTraceInterfaceAccess().getDefinitionsAssignment_2(), "rule__TraceInterface__DefinitionsAssignment_2");
					put(grammarAccess.getTraceDefinitionAccess().getNameAssignment_1(), "rule__TraceDefinition__NameAssignment_1");
					put(grammarAccess.getTraceDefinitionAccess().getElementsAssignment_2_0_1(), "rule__TraceDefinition__ElementsAssignment_2_0_1");
					put(grammarAccess.getTraceDefinitionAccess().getElementsAssignment_2_0_2_1(), "rule__TraceDefinition__ElementsAssignment_2_0_2_1");
					put(grammarAccess.getTraceDefinitionAccess().getElementsAssignment_2_1_0(), "rule__TraceDefinition__ElementsAssignment_2_1_0");
					put(grammarAccess.getTraceDefinitionAccess().getElementsAssignment_2_1_1(), "rule__TraceDefinition__ElementsAssignment_2_1_1");
					put(grammarAccess.getTraceElementInlineAccess().getNameAssignment_0(), "rule__TraceElementInline__NameAssignment_0");
					put(grammarAccess.getTraceElementInlineAccess().getTypeAssignment_2(), "rule__TraceElementInline__TypeAssignment_2");
					put(grammarAccess.getTraceElementExpandedAccess().getNameAssignment_1(), "rule__TraceElementExpanded__NameAssignment_1");
					put(grammarAccess.getTraceElementExpandedAccess().getTypeAssignment_3(), "rule__TraceElementExpanded__TypeAssignment_3");
					put(grammarAccess.getPotencyAnnotationAccess().getValueAssignment_1(), "rule__PotencyAnnotation__ValueAssignment_1");
					put(grammarAccess.getPropertyWriteAccess().getReceptorAssignment_0(), "rule__PropertyWrite__ReceptorAssignment_0");
					put(grammarAccess.getPropertyWriteAccess().getPropertyAssignment_2(), "rule__PropertyWrite__PropertyAssignment_2");
					put(grammarAccess.getPropertyWriteAccess().getExpressionAssignment_4(), "rule__PropertyWrite__ExpressionAssignment_4");
					put(grammarAccess.getDefineVariableAccess().getNameAssignment_0(), "rule__DefineVariable__NameAssignment_0");
					put(grammarAccess.getDefineVariableAccess().getExpressionAssignment_2(), "rule__DefineVariable__ExpressionAssignment_2");
					put(grammarAccess.getModelReferenceAccess().getModelAssignment_0(), "rule__ModelReference__ModelAssignment_0");
					put(grammarAccess.getModelReferenceAccess().getClassNameAssignment_2(), "rule__ModelReference__ClassNameAssignment_2");
					put(grammarAccess.getVariableReferenceAccess().getVariableAssignment(), "rule__VariableReference__VariableAssignment");
					put(grammarAccess.getClosureParameterAccess().getNameAssignment(), "rule__ClosureParameter__NameAssignment");
					put(grammarAccess.getWithResolveMethodCallAccess().getBinaryOpAssignment_1_0_1(), "rule__WithResolveMethodCall__BinaryOpAssignment_1_0_1");
					put(grammarAccess.getWithResolveMethodCallAccess().getRightAssignment_1_0_2(), "rule__WithResolveMethodCall__RightAssignment_1_0_2");
					put(grammarAccess.getWithResolveMethodCallAccess().getModuleAssignment_1_1_0_2_0(), "rule__WithResolveMethodCall__ModuleAssignment_1_1_0_2_0");
					put(grammarAccess.getWithResolveMethodCallAccess().getIsExternalAssignment_1_1_0_2_1(), "rule__WithResolveMethodCall__IsExternalAssignment_1_1_0_2_1");
					put(grammarAccess.getWithResolveMethodCallAccess().getLinkNameAssignment_1_1_0_3(), "rule__WithResolveMethodCall__LinkNameAssignment_1_1_0_3");
					put(grammarAccess.getWithResolveMethodCallAccess().getFeatureNameAssignment_1_1_0_4_1(), "rule__WithResolveMethodCall__FeatureNameAssignment_1_1_0_4_1");
					put(grammarAccess.getWithResolveMethodCallAccess().getMethodNameAssignment_1_1_1_2(), "rule__WithResolveMethodCall__MethodNameAssignment_1_1_1_2");
					put(grammarAccess.getWithResolveMethodCallAccess().getWithParametersAssignment_1_1_1_3_0(), "rule__WithResolveMethodCall__WithParametersAssignment_1_1_1_3_0");
					put(grammarAccess.getWithResolveMethodCallAccess().getParametersAssignment_1_1_1_3_1(), "rule__WithResolveMethodCall__ParametersAssignment_1_1_1_3_1");
					put(grammarAccess.getWithResolveMethodCallAccess().getParametersAssignment_1_1_1_3_2_1(), "rule__WithResolveMethodCall__ParametersAssignment_1_1_1_3_2_1");
					put(grammarAccess.getWithResolveMethodCallAccess().getParametersAssignment_1_1_1_4(), "rule__WithResolveMethodCall__ParametersAssignment_1_1_1_4");
					put(grammarAccess.getWithResolveMethodCallAccess().getMethodNameAssignment_1_2_0_2(), "rule__WithResolveMethodCall__MethodNameAssignment_1_2_0_2");
					put(grammarAccess.getWithResolveMethodCallAccess().getWithParametersAssignment_1_2_0_3_0(), "rule__WithResolveMethodCall__WithParametersAssignment_1_2_0_3_0");
					put(grammarAccess.getWithResolveMethodCallAccess().getParametersAssignment_1_2_0_3_1(), "rule__WithResolveMethodCall__ParametersAssignment_1_2_0_3_1");
					put(grammarAccess.getWithResolveMethodCallAccess().getParametersAssignment_1_2_0_3_2_1(), "rule__WithResolveMethodCall__ParametersAssignment_1_2_0_3_2_1");
					put(grammarAccess.getWithResolveMethodCallAccess().getParametersAssignment_1_2_0_4(), "rule__WithResolveMethodCall__ParametersAssignment_1_2_0_4");
					put(grammarAccess.getWithResolveMethodCallAccess().getModuleAssignment_1_2_1_2_0(), "rule__WithResolveMethodCall__ModuleAssignment_1_2_1_2_0");
					put(grammarAccess.getWithResolveMethodCallAccess().getIsExternalAssignment_1_2_1_2_1(), "rule__WithResolveMethodCall__IsExternalAssignment_1_2_1_2_1");
					put(grammarAccess.getWithResolveMethodCallAccess().getLinkNameAssignment_1_2_1_3(), "rule__WithResolveMethodCall__LinkNameAssignment_1_2_1_3");
					put(grammarAccess.getWithResolveMethodCallAccess().getFeatureNameAssignment_1_2_1_4_1(), "rule__WithResolveMethodCall__FeatureNameAssignment_1_2_1_4_1");
					put(grammarAccess.getKeywordParameterAccess().getKeywordAssignment_0(), "rule__KeywordParameter__KeywordAssignment_0");
					put(grammarAccess.getKeywordParameterAccess().getValueAssignment_1(), "rule__KeywordParameter__ValueAssignment_1");
					put(grammarAccess.getMatchTraceExpressionAccess().getTraceAssignment_2(), "rule__MatchTraceExpression__TraceAssignment_2");
					put(grammarAccess.getMatchTraceExpressionAccess().getTraceExprAssignment_5(), "rule__MatchTraceExpression__TraceExprAssignment_5");
					put(grammarAccess.getTraceExprLanguageAccess().getTraceVarAssignment_0(), "rule__TraceExprLanguage__TraceVarAssignment_0");
					put(grammarAccess.getTraceExprLanguageAccess().getExprAssignment_2(), "rule__TraceExprLanguage__ExprAssignment_2");
					put(grammarAccess.getPutTraceExpressionAccess().getTraceAssignment_2(), "rule__PutTraceExpression__TraceAssignment_2");
					put(grammarAccess.getPutTraceExpressionAccess().getParametersAssignment_5(), "rule__PutTraceExpression__ParametersAssignment_5");
					put(grammarAccess.getPutTraceExpressionAccess().getParametersAssignment_6_1(), "rule__PutTraceExpression__ParametersAssignment_6_1");
					put(grammarAccess.getPutTraceParameterAccess().getTraceVarAssignment_0(), "rule__PutTraceParameter__TraceVarAssignment_0");
					put(grammarAccess.getPutTraceParameterAccess().getValueAssignment_2(), "rule__PutTraceParameter__ValueAssignment_2");
					put(grammarAccess.getNumLiteralAccess().getValueAssignment(), "rule__NumLiteral__ValueAssignment");
					put(grammarAccess.getFloatLiteralAccess().getValueAssignment(), "rule__FloatLiteral__ValueAssignment");
					put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
					put(grammarAccess.getBooleanLiteralAccess().getValueAssignment(), "rule__BooleanLiteral__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclectic.frontend.ui.contentassist.antlr.internal.InternalAttributionParser typedParser = (org.eclectic.frontend.ui.contentassist.antlr.internal.InternalAttributionParser) parser;
			typedParser.entryRuleAttributionTransformation();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public AttributionGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(AttributionGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
