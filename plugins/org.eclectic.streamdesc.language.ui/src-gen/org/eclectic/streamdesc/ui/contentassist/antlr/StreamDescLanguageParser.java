/*
* generated by Xtext
*/
package org.eclectic.streamdesc.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclectic.streamdesc.services.StreamDescLanguageGrammarAccess;

public class StreamDescLanguageParser extends AbstractContentAssistParser {
	
	@Inject
	private StreamDescLanguageGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclectic.streamdesc.ui.contentassist.antlr.internal.InternalStreamDescLanguageParser createParser() {
		org.eclectic.streamdesc.ui.contentassist.antlr.internal.InternalStreamDescLanguageParser result = new org.eclectic.streamdesc.ui.contentassist.antlr.internal.InternalStreamDescLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSlidingWindowAccess().getAlternatives(), "rule__SlidingWindow__Alternatives");
					put(grammarAccess.getTimeSlidingWindowAccess().getAlternatives_5(), "rule__TimeSlidingWindow__Alternatives_5");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getStreamDescriptionAccess().getGroup(), "rule__StreamDescription__Group__0");
					put(grammarAccess.getStreamDescriptionAccess().getGroup_4(), "rule__StreamDescription__Group_4__0");
					put(grammarAccess.getStreamDescriptionAccess().getGroup_5(), "rule__StreamDescription__Group_5__0");
					put(grammarAccess.getTimeSlidingWindowAccess().getGroup(), "rule__TimeSlidingWindow__Group__0");
					put(grammarAccess.getElementSlidingWindowAccess().getGroup(), "rule__ElementSlidingWindow__Group__0");
					put(grammarAccess.getKeySpecAccess().getGroup(), "rule__KeySpec__Group__0");
					put(grammarAccess.getStreamDescriptionAccess().getStreamNameAssignment_1(), "rule__StreamDescription__StreamNameAssignment_1");
					put(grammarAccess.getStreamDescriptionAccess().getMetamodelNameAssignment_3(), "rule__StreamDescription__MetamodelNameAssignment_3");
					put(grammarAccess.getStreamDescriptionAccess().getKeysAssignment_4_0(), "rule__StreamDescription__KeysAssignment_4_0");
					put(grammarAccess.getStreamDescriptionAccess().getKeysAssignment_4_1(), "rule__StreamDescription__KeysAssignment_4_1");
					put(grammarAccess.getStreamDescriptionAccess().getWindowsAssignment_5_0(), "rule__StreamDescription__WindowsAssignment_5_0");
					put(grammarAccess.getStreamDescriptionAccess().getWindowsAssignment_5_1(), "rule__StreamDescription__WindowsAssignment_5_1");
					put(grammarAccess.getTimeSlidingWindowAccess().getClassNameAssignment_2(), "rule__TimeSlidingWindow__ClassNameAssignment_2");
					put(grammarAccess.getTimeSlidingWindowAccess().getSecondsAssignment_4(), "rule__TimeSlidingWindow__SecondsAssignment_4");
					put(grammarAccess.getElementSlidingWindowAccess().getClassNameAssignment_2(), "rule__ElementSlidingWindow__ClassNameAssignment_2");
					put(grammarAccess.getElementSlidingWindowAccess().getElementsAssignment_4(), "rule__ElementSlidingWindow__ElementsAssignment_4");
					put(grammarAccess.getKeySpecAccess().getClassNameAssignment_2(), "rule__KeySpec__ClassNameAssignment_2");
					put(grammarAccess.getKeySpecAccess().getFeatureNameAssignment_5(), "rule__KeySpec__FeatureNameAssignment_5");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclectic.streamdesc.ui.contentassist.antlr.internal.InternalStreamDescLanguageParser typedParser = (org.eclectic.streamdesc.ui.contentassist.antlr.internal.InternalStreamDescLanguageParser) parser;
			typedParser.entryRuleStreamDescription();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public StreamDescLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(StreamDescLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
