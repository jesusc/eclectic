// automatically generated by Xtext
grammar org.eclectic.ApiDescriptionLanguage 
	//with org.eclipse.xtext.xbase.Xbase
	with org.eclipse.xtext.common.Terminals 

import "platform:/resource/org.eclectic.idc/model/apidesc/apidesc.ecore" 
import "platform:/resource/org.eclectic.idc/model/apidesc/apidesc.ecore#//patterns" as patterns 	
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ApiDescription returns ApiDescription:
	'api' apiName=EString 'described' 'by' metamodelName=EString 
		("generic" "mapper" mapperClassName=QualifiedName)?
		(declaredElements+=DeclaredElement)*
		(classMappings+=ClassMapping)+
    //'end';
	;

ClassMapping returns ClassMapping:
	SimpleClassMapping;

SimpleClassMapping returns SimpleClassMapping:
	'metaclass' metaclassName=EString 'to' canonicalClassName=QualifiedName ('{'
		creation=CreationMechanism
		(featureMappings+=FeatureMapping)*
    '}')?;

CreationMechanism returns CreationMechanism:
	EmptyConstructor
	| NonEmptyConstructor
;

EmptyConstructor returns Constructor:
	"empty" {Constructor}  "constructor" ("{" 
		(statement+=Statement)+
	"}")?
;

NonEmptyConstructor returns Constructor:
	{Constructor} "constructor" "(" parameters+=[FeatureMapping|ID] ("," parameters+=[FeatureMapping|ID])*   ")" ("{" 
		(statement+=Statement)+
	"}")?
;

Statement returns Statement:
	SetFeature
;

SetFeature returns SetFeature:
	"set" feature=[FeatureMapping|ID] '=' (intValue=INT | strValue=STRING | boolValue=EBoolean)
;

// Not sure if needed
enum SetKind returns ReturnKind:
	PRIMITIVE_STRING='String' |
	PRIMITIVE_BOOLEAN='Boolean' |
	PRIMITIVE_INTEGER='Integer'	
;


FeatureMapping returns FeatureMapping:
	SimpleAttributeMapping | SimpleReferenceMapping;


SimpleAttributeMapping returns SimpleAttributeMapping:
	"attr" featureName=EString (isMultivalued?='*')? ':' type=ID
		("constructor" ":" constructorType=QualifiedName)?
		("get" getMethod=GetMechanism)?
		("set" setMethod=SetMechanism)?
	;

/*
 * enum PrimitiveType : 
	PRIMITIVE_STRING='String' |
	PRIMITIVE_BOOLEAN='Boolean' |
	PRIMITIVE_INTEGER='Integer'		
;
*/
	
SimpleReferenceMapping returns SimpleReferenceMapping:
	"ref" featureName=EString (isMultivalued?='*')? ':' type=[ClassMapping|ID]
		("constructor" ":" constructorType=QualifiedName)?
		("get" getMethod=GetMechanism)?
		("set" setMethod=SetMechanism)?
	;

GetMechanism returns GetMechanism:
	SimpleGet
	| GenericGet
	| IteratorGet;

SetMechanism returns SetMechanism:
	SimpleSet
	| GenericSet;

SimpleGet returns SimpleGet:
	'method'getter=Method;

SimpleSet returns SimpleSet:
	'method' setter=Method;

GenericGet returns GenericGet:
	'generic' getter=Method;

GenericSet returns GenericSet:
	'generic' setter=Method;

IteratorGet returns patterns::IteratorGetter:
	'iterator' iterator=[patterns::IteratorDescription|ID]
 	"method" getIterator=Method
 	;

// Being-of patterns
DeclaredElement returns DeclaredElement:
	IteratorDescription	
	| ObserverDescription
;

IteratorDescription returns patterns::IteratorDescription: 
	"iterator" name=ID ":" iteratorClass=QualifiedName "{"
		"finished" hasFinished=Method
		"next"     nextElement=Method
	"}"
;

ObserverDescription returns patterns::ObserverDescription: 
	"observer" name=ID ":" observerClass=QualifiedName "{"
		(updateMethods+=UpdateMethod)+
	"}"
	;
	

// copied from method
UpdateMethod returns patterns::UpdateMethod:
	"update" ("[" interest+=INT ("," interest+=INT)* "]")? 
		name=EString '(' (parameterTypes+=QualifiedName ( "," parameterTypes+=QualifiedName)*)?  ')' ':' 
		(   (returnArray?='Array' '<' returnType=QualifiedName '>') 
		  | (returnCollection?='Collection' '<' returnType=QualifiedName '>') 		  
		  |	returnType=QualifiedName 
		  | returnVoid?='void'
		)
;
	


// End-of patterns


EString returns ecore::EString:
	STRING | ID;


Method returns Method:
	name=EString '(' (parameterTypes+=QualifiedName ( "," parameterTypes+=QualifiedName)*)?  ')' ':' 
		(   (returnArray?='Array' '<' returnType=QualifiedName '>') 
		  | (returnCollection?='Collection' '<' returnType=QualifiedName '>') 		  
		  |	returnType=QualifiedName 
		  | returnVoid?='void'
		)
	//'{'
	//	('parameterTypes' '{' parameterTypes+=EString ( "," parameterTypes+=EString)* '}' )?
	//	('returnType' returnType=EString)?
	//	'returnKind' returnKind=ReturnKind
    //'}';
	;

EBoolean returns ecore::EBoolean:
	'true' | 'false';


enum ReturnKind returns ReturnKind:
	SINGLE_OBJECT = 'SINGLE_OBJECT' | PRIMITIVE_INTEGER = 'PRIMITIVE_INTEGER' | PRIMITIVE_STRING = 'PRIMITIVE_STRING' | PRIMITIVE_BOOLEAN = 'PRIMITIVE_BOOLEAN' | PRIMITIVE_DOUBLE = 'PRIMITIVE_DOUBLE' | PRIMITIVE_FLOAT = 'PRIMITIVE_FLOAT' | ARRAY = 'ARRAY' | COLLECTION = 'COLLECTION' | VOID = 'VOID';

// TODO: Replace with XBase
QualifiedName returns ecore::EString:
  ID (=>'.' ID)*;