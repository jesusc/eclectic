/*
 * generated by Xtext
 */
package org.eclectic.scoping;

import java.util.LinkedList;

import org.eclectic.apidesc.ApiDescription;
import org.eclectic.apidesc.ClassMapping;
import org.eclectic.apidesc.Constructor;
import org.eclectic.apidesc.FeatureMapping;
import org.eclectic.apidesc.SetFeature;
import org.eclectic.apidesc.SimpleClassMapping;
import org.eclectic.apidesc.SimpleReferenceMapping;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.resource.EObjectDescription;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.SimpleScope;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class ApiDescriptionLanguageScopeProvider extends AbstractDeclarativeScopeProvider {

	public IScope scope_SetFeature_feature(SetFeature this_, EReference ref) {
		SimpleClassMapping mapping = (SimpleClassMapping) EcoreUtil2.getContainerOfType(this_, ClassMapping.class);
		EList<FeatureMapping> featureMappings = mapping.getFeatureMappings();
		LinkedList<IEObjectDescription> desc = new LinkedList<IEObjectDescription>();
 		for (FeatureMapping featureMapping : featureMappings) {			
			desc.add(EObjectDescription.create(featureMapping.getFeatureName(), featureMapping));			
		}
 		return new SimpleScope(desc);
	}

	public IScope scope_SimpleReferenceMapping_type(SimpleReferenceMapping this_, EReference ref) {
		ApiDescription api = (ApiDescription) EcoreUtil2.getContainerOfType(this_, ApiDescription.class);
		EList<ClassMapping> classMappings = api.getClassMappings();
		LinkedList<IEObjectDescription> desc = new LinkedList<IEObjectDescription>();
 		for (ClassMapping classMapping : classMappings) {
 			SimpleClassMapping m = (SimpleClassMapping) classMapping;
			desc.add(EObjectDescription.create(m.getMetaclassName(), classMapping));			
		}
 		return new SimpleScope(desc);
	}


	public IScope scope_Constructor_parameters(Constructor this_, EReference ref) {
		SimpleClassMapping mapping = (SimpleClassMapping) EcoreUtil2.getContainerOfType(this_, ClassMapping.class);
		EList<FeatureMapping> featureMappings = mapping.getFeatureMappings();
		LinkedList<IEObjectDescription> desc = new LinkedList<IEObjectDescription>();
 		for (FeatureMapping featureMapping : featureMappings) {			
			desc.add(EObjectDescription.create(featureMapping.getFeatureName(), featureMapping));			
		}
 		return new SimpleScope(desc);
	}
}
