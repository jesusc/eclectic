/*
* generated by Xtext
*/
package org.eclectic.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclectic.services.ApiDescriptionLanguageGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class ApiDescriptionLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private ApiDescriptionLanguageGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ApiDescription_Group(this, this, 0, inst);
			case 1: return new ClassMapping_SimpleClassMappingParserRuleCall(this, this, 1, inst);
			case 2: return new SimpleClassMapping_Group(this, this, 2, inst);
			case 3: return new CreationMechanism_Alternatives(this, this, 3, inst);
			case 4: return new EmptyConstructor_Group(this, this, 4, inst);
			case 5: return new NonEmptyConstructor_Group(this, this, 5, inst);
			case 6: return new Statement_SetFeatureParserRuleCall(this, this, 6, inst);
			case 7: return new SetFeature_Group(this, this, 7, inst);
			case 8: return new FeatureMapping_Alternatives(this, this, 8, inst);
			case 9: return new SimpleAttributeMapping_Group(this, this, 9, inst);
			case 10: return new SimpleReferenceMapping_Group(this, this, 10, inst);
			case 11: return new GetMechanism_Alternatives(this, this, 11, inst);
			case 12: return new SetMechanism_Alternatives(this, this, 12, inst);
			case 13: return new SimpleGet_Group(this, this, 13, inst);
			case 14: return new SimpleSet_Group(this, this, 14, inst);
			case 15: return new GenericGet_Group(this, this, 15, inst);
			case 16: return new GenericSet_Group(this, this, 16, inst);
			case 17: return new IteratorGet_Group(this, this, 17, inst);
			case 18: return new DeclaredElement_Alternatives(this, this, 18, inst);
			case 19: return new IteratorDescription_Group(this, this, 19, inst);
			case 20: return new ObserverDescription_Group(this, this, 20, inst);
			case 21: return new UpdateMethod_Group(this, this, 21, inst);
			case 22: return new Method_Group(this, this, 22, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule ApiDescription ****************
 *
 * //'end';
 * ApiDescription:
 * 	"api" apiName=EString "described" "by" metamodelName=EString ("generic" "mapper" mapperClassName=QualifiedName)?
 * 	declaredElements+=DeclaredElement* classMappings+=ClassMapping+;
 *
 **/

// "api" apiName=EString "described" "by" metamodelName=EString ("generic" "mapper" mapperClassName=QualifiedName)?
// declaredElements+=DeclaredElement* classMappings+=ClassMapping+
protected class ApiDescription_Group extends GroupToken {
	
	public ApiDescription_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getApiDescriptionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ApiDescription_ClassMappingsAssignment_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getApiDescriptionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "api"
protected class ApiDescription_ApiKeyword_0 extends KeywordToken  {
	
	public ApiDescription_ApiKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getApiDescriptionAccess().getApiKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// apiName=EString
protected class ApiDescription_ApiNameAssignment_1 extends AssignmentToken  {
	
	public ApiDescription_ApiNameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getApiDescriptionAccess().getApiNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ApiDescription_ApiKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("apiName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("apiName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getApiDescriptionAccess().getApiNameEStringParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getApiDescriptionAccess().getApiNameEStringParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "described"
protected class ApiDescription_DescribedKeyword_2 extends KeywordToken  {
	
	public ApiDescription_DescribedKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getApiDescriptionAccess().getDescribedKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ApiDescription_ApiNameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "by"
protected class ApiDescription_ByKeyword_3 extends KeywordToken  {
	
	public ApiDescription_ByKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getApiDescriptionAccess().getByKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ApiDescription_DescribedKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// metamodelName=EString
protected class ApiDescription_MetamodelNameAssignment_4 extends AssignmentToken  {
	
	public ApiDescription_MetamodelNameAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getApiDescriptionAccess().getMetamodelNameAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ApiDescription_ByKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("metamodelName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("metamodelName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getApiDescriptionAccess().getMetamodelNameEStringParserRuleCall_4_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getApiDescriptionAccess().getMetamodelNameEStringParserRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// ("generic" "mapper" mapperClassName=QualifiedName)?
protected class ApiDescription_Group_5 extends GroupToken {
	
	public ApiDescription_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getApiDescriptionAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ApiDescription_MapperClassNameAssignment_5_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "generic"
protected class ApiDescription_GenericKeyword_5_0 extends KeywordToken  {
	
	public ApiDescription_GenericKeyword_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getApiDescriptionAccess().getGenericKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ApiDescription_MetamodelNameAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "mapper"
protected class ApiDescription_MapperKeyword_5_1 extends KeywordToken  {
	
	public ApiDescription_MapperKeyword_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getApiDescriptionAccess().getMapperKeyword_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ApiDescription_GenericKeyword_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// mapperClassName=QualifiedName
protected class ApiDescription_MapperClassNameAssignment_5_2 extends AssignmentToken  {
	
	public ApiDescription_MapperClassNameAssignment_5_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getApiDescriptionAccess().getMapperClassNameAssignment_5_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ApiDescription_MapperKeyword_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("mapperClassName",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("mapperClassName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getApiDescriptionAccess().getMapperClassNameQualifiedNameParserRuleCall_5_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getApiDescriptionAccess().getMapperClassNameQualifiedNameParserRuleCall_5_2_0();
			return obj;
		}
		return null;
	}

}


// declaredElements+=DeclaredElement*
protected class ApiDescription_DeclaredElementsAssignment_6 extends AssignmentToken  {
	
	public ApiDescription_DeclaredElementsAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getApiDescriptionAccess().getDeclaredElementsAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DeclaredElement_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("declaredElements",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("declaredElements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getDeclaredElementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getApiDescriptionAccess().getDeclaredElementsDeclaredElementParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ApiDescription_DeclaredElementsAssignment_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ApiDescription_Group_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new ApiDescription_MetamodelNameAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// classMappings+=ClassMapping+
protected class ApiDescription_ClassMappingsAssignment_7 extends AssignmentToken  {
	
	public ApiDescription_ClassMappingsAssignment_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getApiDescriptionAccess().getClassMappingsAssignment_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClassMapping_SimpleClassMappingParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("classMappings",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("classMappings");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getClassMappingRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getApiDescriptionAccess().getClassMappingsClassMappingParserRuleCall_7_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ApiDescription_ClassMappingsAssignment_7(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ApiDescription_DeclaredElementsAssignment_6(lastRuleCallOrigin, next, actIndex, consumed);
			case 2: return new ApiDescription_Group_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 3: return new ApiDescription_MetamodelNameAssignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule ApiDescription ****************/


/************ begin Rule ClassMapping ****************
 *
 * ClassMapping:
 * 	SimpleClassMapping;
 *
 **/

// SimpleClassMapping
protected class ClassMapping_SimpleClassMappingParserRuleCall extends RuleCallToken {
	
	public ClassMapping_SimpleClassMappingParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getClassMappingAccess().getSimpleClassMappingParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleClassMapping_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSimpleClassMappingRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SimpleClassMapping_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule ClassMapping ****************/


/************ begin Rule SimpleClassMapping ****************
 *
 * SimpleClassMapping:
 * 	"metaclass" metaclassName=EString "to" canonicalClassName=QualifiedName ("{" creation=CreationMechanism
 * 	featureMappings+=FeatureMapping* "}")?;
 *
 **/

// "metaclass" metaclassName=EString "to" canonicalClassName=QualifiedName ("{" creation=CreationMechanism
// featureMappings+=FeatureMapping* "}")?
protected class SimpleClassMapping_Group extends GroupToken {
	
	public SimpleClassMapping_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleClassMappingAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleClassMapping_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SimpleClassMapping_CanonicalClassNameAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSimpleClassMappingRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "metaclass"
protected class SimpleClassMapping_MetaclassKeyword_0 extends KeywordToken  {
	
	public SimpleClassMapping_MetaclassKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleClassMappingAccess().getMetaclassKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// metaclassName=EString
protected class SimpleClassMapping_MetaclassNameAssignment_1 extends AssignmentToken  {
	
	public SimpleClassMapping_MetaclassNameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleClassMappingAccess().getMetaclassNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleClassMapping_MetaclassKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("metaclassName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("metaclassName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSimpleClassMappingAccess().getMetaclassNameEStringParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getSimpleClassMappingAccess().getMetaclassNameEStringParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "to"
protected class SimpleClassMapping_ToKeyword_2 extends KeywordToken  {
	
	public SimpleClassMapping_ToKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleClassMappingAccess().getToKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleClassMapping_MetaclassNameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// canonicalClassName=QualifiedName
protected class SimpleClassMapping_CanonicalClassNameAssignment_3 extends AssignmentToken  {
	
	public SimpleClassMapping_CanonicalClassNameAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleClassMappingAccess().getCanonicalClassNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleClassMapping_ToKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("canonicalClassName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("canonicalClassName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSimpleClassMappingAccess().getCanonicalClassNameQualifiedNameParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getSimpleClassMappingAccess().getCanonicalClassNameQualifiedNameParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// ("{" creation=CreationMechanism featureMappings+=FeatureMapping* "}")?
protected class SimpleClassMapping_Group_4 extends GroupToken {
	
	public SimpleClassMapping_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleClassMappingAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleClassMapping_RightCurlyBracketKeyword_4_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class SimpleClassMapping_LeftCurlyBracketKeyword_4_0 extends KeywordToken  {
	
	public SimpleClassMapping_LeftCurlyBracketKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleClassMappingAccess().getLeftCurlyBracketKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleClassMapping_CanonicalClassNameAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// creation=CreationMechanism
protected class SimpleClassMapping_CreationAssignment_4_1 extends AssignmentToken  {
	
	public SimpleClassMapping_CreationAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleClassMappingAccess().getCreationAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CreationMechanism_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("creation",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("creation");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getCreationMechanismRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSimpleClassMappingAccess().getCreationCreationMechanismParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SimpleClassMapping_LeftCurlyBracketKeyword_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// featureMappings+=FeatureMapping*
protected class SimpleClassMapping_FeatureMappingsAssignment_4_2 extends AssignmentToken  {
	
	public SimpleClassMapping_FeatureMappingsAssignment_4_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleClassMappingAccess().getFeatureMappingsAssignment_4_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMapping_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("featureMappings",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("featureMappings");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getFeatureMappingRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSimpleClassMappingAccess().getFeatureMappingsFeatureMappingParserRuleCall_4_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SimpleClassMapping_FeatureMappingsAssignment_4_2(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new SimpleClassMapping_CreationAssignment_4_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class SimpleClassMapping_RightCurlyBracketKeyword_4_3 extends KeywordToken  {
	
	public SimpleClassMapping_RightCurlyBracketKeyword_4_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleClassMappingAccess().getRightCurlyBracketKeyword_4_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleClassMapping_FeatureMappingsAssignment_4_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SimpleClassMapping_CreationAssignment_4_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}



/************ end Rule SimpleClassMapping ****************/


/************ begin Rule CreationMechanism ****************
 *
 * CreationMechanism:
 * 	EmptyConstructor | NonEmptyConstructor;
 *
 **/

// EmptyConstructor | NonEmptyConstructor
protected class CreationMechanism_Alternatives extends AlternativesToken {

	public CreationMechanism_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getCreationMechanismAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new CreationMechanism_EmptyConstructorParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new CreationMechanism_NonEmptyConstructorParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNonEmptyConstructorAccess().getConstructorAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// EmptyConstructor
protected class CreationMechanism_EmptyConstructorParserRuleCall_0 extends RuleCallToken {
	
	public CreationMechanism_EmptyConstructorParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCreationMechanismAccess().getEmptyConstructorParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmptyConstructor_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(EmptyConstructor_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// NonEmptyConstructor
protected class CreationMechanism_NonEmptyConstructorParserRuleCall_1 extends RuleCallToken {
	
	public CreationMechanism_NonEmptyConstructorParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCreationMechanismAccess().getNonEmptyConstructorParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NonEmptyConstructor_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(NonEmptyConstructor_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule CreationMechanism ****************/


/************ begin Rule EmptyConstructor ****************
 *
 * EmptyConstructor returns Constructor:
 * 	"empty" {Constructor} "constructor" ("{" statement+=Statement+ "}")?;
 *
 **/

// "empty" {Constructor} "constructor" ("{" statement+=Statement+ "}")?
protected class EmptyConstructor_Group extends GroupToken {
	
	public EmptyConstructor_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEmptyConstructorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmptyConstructor_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new EmptyConstructor_ConstructorKeyword_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getEmptyConstructorAccess().getConstructorAction_1().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "empty"
protected class EmptyConstructor_EmptyKeyword_0 extends KeywordToken  {
	
	public EmptyConstructor_EmptyKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEmptyConstructorAccess().getEmptyKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// {Constructor}
protected class EmptyConstructor_ConstructorAction_1 extends ActionToken  {

	public EmptyConstructor_ConstructorAction_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getEmptyConstructorAccess().getConstructorAction_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmptyConstructor_EmptyKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "constructor"
protected class EmptyConstructor_ConstructorKeyword_2 extends KeywordToken  {
	
	public EmptyConstructor_ConstructorKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEmptyConstructorAccess().getConstructorKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmptyConstructor_ConstructorAction_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ("{" statement+=Statement+ "}")?
protected class EmptyConstructor_Group_3 extends GroupToken {
	
	public EmptyConstructor_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getEmptyConstructorAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmptyConstructor_RightCurlyBracketKeyword_3_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class EmptyConstructor_LeftCurlyBracketKeyword_3_0 extends KeywordToken  {
	
	public EmptyConstructor_LeftCurlyBracketKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEmptyConstructorAccess().getLeftCurlyBracketKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmptyConstructor_ConstructorKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// statement+=Statement+
protected class EmptyConstructor_StatementAssignment_3_1 extends AssignmentToken  {
	
	public EmptyConstructor_StatementAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getEmptyConstructorAccess().getStatementAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_SetFeatureParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statement",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getEmptyConstructorAccess().getStatementStatementParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new EmptyConstructor_StatementAssignment_3_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new EmptyConstructor_LeftCurlyBracketKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class EmptyConstructor_RightCurlyBracketKeyword_3_2 extends KeywordToken  {
	
	public EmptyConstructor_RightCurlyBracketKeyword_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getEmptyConstructorAccess().getRightCurlyBracketKeyword_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new EmptyConstructor_StatementAssignment_3_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule EmptyConstructor ****************/


/************ begin Rule NonEmptyConstructor ****************
 *
 * NonEmptyConstructor returns Constructor:
 * 	{Constructor} "constructor" "(" parameters+=[FeatureMapping] ("," parameters+=[FeatureMapping])* ")" ("{"
 * 	statement+=Statement+ "}")?;
 *
 **/

// {Constructor} "constructor" "(" parameters+=[FeatureMapping] ("," parameters+=[FeatureMapping])* ")" ("{"
// statement+=Statement+ "}")?
protected class NonEmptyConstructor_Group extends GroupToken {
	
	public NonEmptyConstructor_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNonEmptyConstructorAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NonEmptyConstructor_Group_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NonEmptyConstructor_RightParenthesisKeyword_5(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNonEmptyConstructorAccess().getConstructorAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Constructor}
protected class NonEmptyConstructor_ConstructorAction_0 extends ActionToken  {

	public NonEmptyConstructor_ConstructorAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getNonEmptyConstructorAccess().getConstructorAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// "constructor"
protected class NonEmptyConstructor_ConstructorKeyword_1 extends KeywordToken  {
	
	public NonEmptyConstructor_ConstructorKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNonEmptyConstructorAccess().getConstructorKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NonEmptyConstructor_ConstructorAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "("
protected class NonEmptyConstructor_LeftParenthesisKeyword_2 extends KeywordToken  {
	
	public NonEmptyConstructor_LeftParenthesisKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNonEmptyConstructorAccess().getLeftParenthesisKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NonEmptyConstructor_ConstructorKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// parameters+=[FeatureMapping]
protected class NonEmptyConstructor_ParametersAssignment_3 extends AssignmentToken  {
	
	public NonEmptyConstructor_ParametersAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNonEmptyConstructorAccess().getParametersAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NonEmptyConstructor_LeftParenthesisKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameters",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNonEmptyConstructorAccess().getParametersFeatureMappingCrossReference_3_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getNonEmptyConstructorAccess().getParametersFeatureMappingCrossReference_3_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("," parameters+=[FeatureMapping])*
protected class NonEmptyConstructor_Group_4 extends GroupToken {
	
	public NonEmptyConstructor_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNonEmptyConstructorAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NonEmptyConstructor_ParametersAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class NonEmptyConstructor_CommaKeyword_4_0 extends KeywordToken  {
	
	public NonEmptyConstructor_CommaKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNonEmptyConstructorAccess().getCommaKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NonEmptyConstructor_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NonEmptyConstructor_ParametersAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// parameters+=[FeatureMapping]
protected class NonEmptyConstructor_ParametersAssignment_4_1 extends AssignmentToken  {
	
	public NonEmptyConstructor_ParametersAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNonEmptyConstructorAccess().getParametersAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NonEmptyConstructor_CommaKeyword_4_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameters",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameters");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getNonEmptyConstructorAccess().getParametersFeatureMappingCrossReference_4_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getNonEmptyConstructorAccess().getParametersFeatureMappingCrossReference_4_1_0(); 
				return obj;
			}
		}
		return null;
	}

}


// ")"
protected class NonEmptyConstructor_RightParenthesisKeyword_5 extends KeywordToken  {
	
	public NonEmptyConstructor_RightParenthesisKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNonEmptyConstructorAccess().getRightParenthesisKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NonEmptyConstructor_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new NonEmptyConstructor_ParametersAssignment_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ("{" statement+=Statement+ "}")?
protected class NonEmptyConstructor_Group_6 extends GroupToken {
	
	public NonEmptyConstructor_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getNonEmptyConstructorAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NonEmptyConstructor_RightCurlyBracketKeyword_6_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "{"
protected class NonEmptyConstructor_LeftCurlyBracketKeyword_6_0 extends KeywordToken  {
	
	public NonEmptyConstructor_LeftCurlyBracketKeyword_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNonEmptyConstructorAccess().getLeftCurlyBracketKeyword_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NonEmptyConstructor_RightParenthesisKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// statement+=Statement+
protected class NonEmptyConstructor_StatementAssignment_6_1 extends AssignmentToken  {
	
	public NonEmptyConstructor_StatementAssignment_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNonEmptyConstructorAccess().getStatementAssignment_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_SetFeatureParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statement",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getNonEmptyConstructorAccess().getStatementStatementParserRuleCall_6_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new NonEmptyConstructor_StatementAssignment_6_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new NonEmptyConstructor_LeftCurlyBracketKeyword_6_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class NonEmptyConstructor_RightCurlyBracketKeyword_6_2 extends KeywordToken  {
	
	public NonEmptyConstructor_RightCurlyBracketKeyword_6_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getNonEmptyConstructorAccess().getRightCurlyBracketKeyword_6_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new NonEmptyConstructor_StatementAssignment_6_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule NonEmptyConstructor ****************/


/************ begin Rule Statement ****************
 *
 * Statement:
 * 	SetFeature;
 *
 **/

// SetFeature
protected class Statement_SetFeatureParserRuleCall extends RuleCallToken {
	
	public Statement_SetFeatureParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getSetFeatureParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetFeature_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSetFeatureRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SetFeature_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule Statement ****************/


/************ begin Rule SetFeature ****************
 *
 * SetFeature:
 * 	"set" feature=[FeatureMapping] "=" (intValue=INT | strValue=STRING | boolValue=EBoolean);
 *
 **/

// "set" feature=[FeatureMapping] "=" (intValue=INT | strValue=STRING | boolValue=EBoolean)
protected class SetFeature_Group extends GroupToken {
	
	public SetFeature_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSetFeatureAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetFeature_Alternatives_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSetFeatureRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "set"
protected class SetFeature_SetKeyword_0 extends KeywordToken  {
	
	public SetFeature_SetKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSetFeatureAccess().getSetKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// feature=[FeatureMapping]
protected class SetFeature_FeatureAssignment_1 extends AssignmentToken  {
	
	public SetFeature_FeatureAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetFeatureAccess().getFeatureAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetFeature_SetKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("feature",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("feature");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSetFeatureAccess().getFeatureFeatureMappingCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getSetFeatureAccess().getFeatureFeatureMappingCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "="
protected class SetFeature_EqualsSignKeyword_2 extends KeywordToken  {
	
	public SetFeature_EqualsSignKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSetFeatureAccess().getEqualsSignKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetFeature_FeatureAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// intValue=INT | strValue=STRING | boolValue=EBoolean
protected class SetFeature_Alternatives_3 extends AlternativesToken {

	public SetFeature_Alternatives_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSetFeatureAccess().getAlternatives_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetFeature_IntValueAssignment_3_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SetFeature_StrValueAssignment_3_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SetFeature_BoolValueAssignment_3_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// intValue=INT
protected class SetFeature_IntValueAssignment_3_0 extends AssignmentToken  {
	
	public SetFeature_IntValueAssignment_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetFeatureAccess().getIntValueAssignment_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetFeature_EqualsSignKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("intValue",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("intValue");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetFeatureAccess().getIntValueINTTerminalRuleCall_3_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSetFeatureAccess().getIntValueINTTerminalRuleCall_3_0_0();
			return obj;
		}
		return null;
	}

}

// strValue=STRING
protected class SetFeature_StrValueAssignment_3_1 extends AssignmentToken  {
	
	public SetFeature_StrValueAssignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetFeatureAccess().getStrValueAssignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetFeature_EqualsSignKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("strValue",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("strValue");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetFeatureAccess().getStrValueSTRINGTerminalRuleCall_3_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSetFeatureAccess().getStrValueSTRINGTerminalRuleCall_3_1_0();
			return obj;
		}
		return null;
	}

}

// boolValue=EBoolean
protected class SetFeature_BoolValueAssignment_3_2 extends AssignmentToken  {
	
	public SetFeature_BoolValueAssignment_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSetFeatureAccess().getBoolValueAssignment_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetFeature_EqualsSignKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("boolValue",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("boolValue");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSetFeatureAccess().getBoolValueEBooleanParserRuleCall_3_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getSetFeatureAccess().getBoolValueEBooleanParserRuleCall_3_2_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule SetFeature ****************/


/************ begin Rule FeatureMapping ****************
 *
 * FeatureMapping:
 * 	SimpleAttributeMapping | SimpleReferenceMapping;
 *
 **/

// SimpleAttributeMapping | SimpleReferenceMapping
protected class FeatureMapping_Alternatives extends AlternativesToken {

	public FeatureMapping_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getFeatureMappingAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new FeatureMapping_SimpleAttributeMappingParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new FeatureMapping_SimpleReferenceMappingParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSimpleAttributeMappingRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSimpleReferenceMappingRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SimpleAttributeMapping
protected class FeatureMapping_SimpleAttributeMappingParserRuleCall_0 extends RuleCallToken {
	
	public FeatureMapping_SimpleAttributeMappingParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureMappingAccess().getSimpleAttributeMappingParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleAttributeMapping_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSimpleAttributeMappingRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SimpleAttributeMapping_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// SimpleReferenceMapping
protected class FeatureMapping_SimpleReferenceMappingParserRuleCall_1 extends RuleCallToken {
	
	public FeatureMapping_SimpleReferenceMappingParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getFeatureMappingAccess().getSimpleReferenceMappingParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleReferenceMapping_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSimpleReferenceMappingRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SimpleReferenceMapping_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule FeatureMapping ****************/


/************ begin Rule SimpleAttributeMapping ****************
 *
 * SimpleAttributeMapping:
 * 	"attr" featureName=EString isMultivalued?="*"? ":" type=ID ("constructor" ":" constructorType=QualifiedName)? ("get"
 * 	getMethod=GetMechanism)? ("set" setMethod=SetMechanism)?;
 *
 **/

// "attr" featureName=EString isMultivalued?="*"? ":" type=ID ("constructor" ":" constructorType=QualifiedName)? ("get"
// getMethod=GetMechanism)? ("set" setMethod=SetMechanism)?
protected class SimpleAttributeMapping_Group extends GroupToken {
	
	public SimpleAttributeMapping_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleAttributeMappingAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleAttributeMapping_Group_7(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SimpleAttributeMapping_Group_6(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SimpleAttributeMapping_Group_5(lastRuleCallOrigin, this, 2, inst);
			case 3: return new SimpleAttributeMapping_TypeAssignment_4(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSimpleAttributeMappingRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "attr"
protected class SimpleAttributeMapping_AttrKeyword_0 extends KeywordToken  {
	
	public SimpleAttributeMapping_AttrKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleAttributeMappingAccess().getAttrKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// featureName=EString
protected class SimpleAttributeMapping_FeatureNameAssignment_1 extends AssignmentToken  {
	
	public SimpleAttributeMapping_FeatureNameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleAttributeMappingAccess().getFeatureNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleAttributeMapping_AttrKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("featureName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("featureName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSimpleAttributeMappingAccess().getFeatureNameEStringParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getSimpleAttributeMappingAccess().getFeatureNameEStringParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// isMultivalued?="*"?
protected class SimpleAttributeMapping_IsMultivaluedAssignment_2 extends AssignmentToken  {
	
	public SimpleAttributeMapping_IsMultivaluedAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleAttributeMappingAccess().getIsMultivaluedAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleAttributeMapping_FeatureNameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("isMultivalued",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("isMultivalued");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSimpleAttributeMappingAccess().getIsMultivaluedAsteriskKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class SimpleAttributeMapping_ColonKeyword_3 extends KeywordToken  {
	
	public SimpleAttributeMapping_ColonKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleAttributeMappingAccess().getColonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleAttributeMapping_IsMultivaluedAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SimpleAttributeMapping_FeatureNameAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// type=ID
protected class SimpleAttributeMapping_TypeAssignment_4 extends AssignmentToken  {
	
	public SimpleAttributeMapping_TypeAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleAttributeMappingAccess().getTypeAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleAttributeMapping_ColonKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSimpleAttributeMappingAccess().getTypeIDTerminalRuleCall_4_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSimpleAttributeMappingAccess().getTypeIDTerminalRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// ("constructor" ":" constructorType=QualifiedName)?
protected class SimpleAttributeMapping_Group_5 extends GroupToken {
	
	public SimpleAttributeMapping_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleAttributeMappingAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleAttributeMapping_ConstructorTypeAssignment_5_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "constructor"
protected class SimpleAttributeMapping_ConstructorKeyword_5_0 extends KeywordToken  {
	
	public SimpleAttributeMapping_ConstructorKeyword_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleAttributeMappingAccess().getConstructorKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleAttributeMapping_TypeAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ":"
protected class SimpleAttributeMapping_ColonKeyword_5_1 extends KeywordToken  {
	
	public SimpleAttributeMapping_ColonKeyword_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleAttributeMappingAccess().getColonKeyword_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleAttributeMapping_ConstructorKeyword_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// constructorType=QualifiedName
protected class SimpleAttributeMapping_ConstructorTypeAssignment_5_2 extends AssignmentToken  {
	
	public SimpleAttributeMapping_ConstructorTypeAssignment_5_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleAttributeMappingAccess().getConstructorTypeAssignment_5_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleAttributeMapping_ColonKeyword_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("constructorType",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("constructorType");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSimpleAttributeMappingAccess().getConstructorTypeQualifiedNameParserRuleCall_5_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getSimpleAttributeMappingAccess().getConstructorTypeQualifiedNameParserRuleCall_5_2_0();
			return obj;
		}
		return null;
	}

}


// ("get" getMethod=GetMechanism)?
protected class SimpleAttributeMapping_Group_6 extends GroupToken {
	
	public SimpleAttributeMapping_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleAttributeMappingAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleAttributeMapping_GetMethodAssignment_6_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "get"
protected class SimpleAttributeMapping_GetKeyword_6_0 extends KeywordToken  {
	
	public SimpleAttributeMapping_GetKeyword_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleAttributeMappingAccess().getGetKeyword_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleAttributeMapping_Group_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SimpleAttributeMapping_TypeAssignment_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// getMethod=GetMechanism
protected class SimpleAttributeMapping_GetMethodAssignment_6_1 extends AssignmentToken  {
	
	public SimpleAttributeMapping_GetMethodAssignment_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleAttributeMappingAccess().getGetMethodAssignment_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GetMechanism_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("getMethod",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("getMethod");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGetMechanismRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSimpleAttributeMappingAccess().getGetMethodGetMechanismParserRuleCall_6_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SimpleAttributeMapping_GetKeyword_6_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("set" setMethod=SetMechanism)?
protected class SimpleAttributeMapping_Group_7 extends GroupToken {
	
	public SimpleAttributeMapping_Group_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleAttributeMappingAccess().getGroup_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleAttributeMapping_SetMethodAssignment_7_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "set"
protected class SimpleAttributeMapping_SetKeyword_7_0 extends KeywordToken  {
	
	public SimpleAttributeMapping_SetKeyword_7_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleAttributeMappingAccess().getSetKeyword_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleAttributeMapping_Group_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SimpleAttributeMapping_Group_5(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SimpleAttributeMapping_TypeAssignment_4(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// setMethod=SetMechanism
protected class SimpleAttributeMapping_SetMethodAssignment_7_1 extends AssignmentToken  {
	
	public SimpleAttributeMapping_SetMethodAssignment_7_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleAttributeMappingAccess().getSetMethodAssignment_7_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetMechanism_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("setMethod",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("setMethod");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSetMechanismRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSimpleAttributeMappingAccess().getSetMethodSetMechanismParserRuleCall_7_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SimpleAttributeMapping_SetKeyword_7_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule SimpleAttributeMapping ****************/


/************ begin Rule SimpleReferenceMapping ****************
 *
 * / *
 *  * enum PrimitiveType : 
 * 	PRIMITIVE_STRING='String' |
 * 	PRIMITIVE_BOOLEAN='Boolean' |
 * 	PRIMITIVE_INTEGER='Integer'		
 * ;
 * * / SimpleReferenceMapping:
 * 	"ref" featureName=EString isMultivalued?="*"? ":" type=[ClassMapping] ("constructor" ":"
 * 	constructorType=QualifiedName)? ("get" getMethod=GetMechanism)? ("set" setMethod=SetMechanism)?;
 *
 **/

// "ref" featureName=EString isMultivalued?="*"? ":" type=[ClassMapping] ("constructor" ":" constructorType=QualifiedName)?
// ("get" getMethod=GetMechanism)? ("set" setMethod=SetMechanism)?
protected class SimpleReferenceMapping_Group extends GroupToken {
	
	public SimpleReferenceMapping_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleReferenceMappingAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleReferenceMapping_Group_7(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SimpleReferenceMapping_Group_6(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SimpleReferenceMapping_Group_5(lastRuleCallOrigin, this, 2, inst);
			case 3: return new SimpleReferenceMapping_TypeAssignment_4(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSimpleReferenceMappingRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "ref"
protected class SimpleReferenceMapping_RefKeyword_0 extends KeywordToken  {
	
	public SimpleReferenceMapping_RefKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleReferenceMappingAccess().getRefKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// featureName=EString
protected class SimpleReferenceMapping_FeatureNameAssignment_1 extends AssignmentToken  {
	
	public SimpleReferenceMapping_FeatureNameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleReferenceMappingAccess().getFeatureNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleReferenceMapping_RefKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("featureName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("featureName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSimpleReferenceMappingAccess().getFeatureNameEStringParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getSimpleReferenceMappingAccess().getFeatureNameEStringParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// isMultivalued?="*"?
protected class SimpleReferenceMapping_IsMultivaluedAssignment_2 extends AssignmentToken  {
	
	public SimpleReferenceMapping_IsMultivaluedAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleReferenceMappingAccess().getIsMultivaluedAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleReferenceMapping_FeatureNameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("isMultivalued",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("isMultivalued");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSimpleReferenceMappingAccess().getIsMultivaluedAsteriskKeyword_2_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class SimpleReferenceMapping_ColonKeyword_3 extends KeywordToken  {
	
	public SimpleReferenceMapping_ColonKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleReferenceMappingAccess().getColonKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleReferenceMapping_IsMultivaluedAssignment_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SimpleReferenceMapping_FeatureNameAssignment_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// type=[ClassMapping]
protected class SimpleReferenceMapping_TypeAssignment_4 extends AssignmentToken  {
	
	public SimpleReferenceMapping_TypeAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleReferenceMappingAccess().getTypeAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleReferenceMapping_ColonKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("type",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("type");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSimpleReferenceMappingAccess().getTypeClassMappingCrossReference_4_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getSimpleReferenceMappingAccess().getTypeClassMappingCrossReference_4_0(); 
				return obj;
			}
		}
		return null;
	}

}

// ("constructor" ":" constructorType=QualifiedName)?
protected class SimpleReferenceMapping_Group_5 extends GroupToken {
	
	public SimpleReferenceMapping_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleReferenceMappingAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleReferenceMapping_ConstructorTypeAssignment_5_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "constructor"
protected class SimpleReferenceMapping_ConstructorKeyword_5_0 extends KeywordToken  {
	
	public SimpleReferenceMapping_ConstructorKeyword_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleReferenceMappingAccess().getConstructorKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleReferenceMapping_TypeAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ":"
protected class SimpleReferenceMapping_ColonKeyword_5_1 extends KeywordToken  {
	
	public SimpleReferenceMapping_ColonKeyword_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleReferenceMappingAccess().getColonKeyword_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleReferenceMapping_ConstructorKeyword_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// constructorType=QualifiedName
protected class SimpleReferenceMapping_ConstructorTypeAssignment_5_2 extends AssignmentToken  {
	
	public SimpleReferenceMapping_ConstructorTypeAssignment_5_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleReferenceMappingAccess().getConstructorTypeAssignment_5_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleReferenceMapping_ColonKeyword_5_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("constructorType",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("constructorType");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSimpleReferenceMappingAccess().getConstructorTypeQualifiedNameParserRuleCall_5_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getSimpleReferenceMappingAccess().getConstructorTypeQualifiedNameParserRuleCall_5_2_0();
			return obj;
		}
		return null;
	}

}


// ("get" getMethod=GetMechanism)?
protected class SimpleReferenceMapping_Group_6 extends GroupToken {
	
	public SimpleReferenceMapping_Group_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleReferenceMappingAccess().getGroup_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleReferenceMapping_GetMethodAssignment_6_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "get"
protected class SimpleReferenceMapping_GetKeyword_6_0 extends KeywordToken  {
	
	public SimpleReferenceMapping_GetKeyword_6_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleReferenceMappingAccess().getGetKeyword_6_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleReferenceMapping_Group_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SimpleReferenceMapping_TypeAssignment_4(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// getMethod=GetMechanism
protected class SimpleReferenceMapping_GetMethodAssignment_6_1 extends AssignmentToken  {
	
	public SimpleReferenceMapping_GetMethodAssignment_6_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleReferenceMappingAccess().getGetMethodAssignment_6_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GetMechanism_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("getMethod",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("getMethod");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getGetMechanismRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSimpleReferenceMappingAccess().getGetMethodGetMechanismParserRuleCall_6_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SimpleReferenceMapping_GetKeyword_6_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("set" setMethod=SetMechanism)?
protected class SimpleReferenceMapping_Group_7 extends GroupToken {
	
	public SimpleReferenceMapping_Group_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleReferenceMappingAccess().getGroup_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleReferenceMapping_SetMethodAssignment_7_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "set"
protected class SimpleReferenceMapping_SetKeyword_7_0 extends KeywordToken  {
	
	public SimpleReferenceMapping_SetKeyword_7_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleReferenceMappingAccess().getSetKeyword_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleReferenceMapping_Group_6(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SimpleReferenceMapping_Group_5(lastRuleCallOrigin, this, 1, inst);
			case 2: return new SimpleReferenceMapping_TypeAssignment_4(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// setMethod=SetMechanism
protected class SimpleReferenceMapping_SetMethodAssignment_7_1 extends AssignmentToken  {
	
	public SimpleReferenceMapping_SetMethodAssignment_7_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleReferenceMappingAccess().getSetMethodAssignment_7_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetMechanism_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("setMethod",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("setMethod");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSetMechanismRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSimpleReferenceMappingAccess().getSetMethodSetMechanismParserRuleCall_7_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SimpleReferenceMapping_SetKeyword_7_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule SimpleReferenceMapping ****************/


/************ begin Rule GetMechanism ****************
 *
 * GetMechanism:
 * 	SimpleGet | GenericGet | IteratorGet;
 *
 **/

// SimpleGet | GenericGet | IteratorGet
protected class GetMechanism_Alternatives extends AlternativesToken {

	public GetMechanism_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getGetMechanismAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GetMechanism_SimpleGetParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new GetMechanism_GenericGetParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new GetMechanism_IteratorGetParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGenericGetRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIteratorGetRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSimpleGetRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SimpleGet
protected class GetMechanism_SimpleGetParserRuleCall_0 extends RuleCallToken {
	
	public GetMechanism_SimpleGetParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getGetMechanismAccess().getSimpleGetParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleGet_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSimpleGetRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SimpleGet_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// GenericGet
protected class GetMechanism_GenericGetParserRuleCall_1 extends RuleCallToken {
	
	public GetMechanism_GenericGetParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getGetMechanismAccess().getGenericGetParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GenericGet_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGenericGetRule().getType().getClassifier())
			return null;
		if(checkForRecursion(GenericGet_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// IteratorGet
protected class GetMechanism_IteratorGetParserRuleCall_2 extends RuleCallToken {
	
	public GetMechanism_IteratorGetParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getGetMechanismAccess().getIteratorGetParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IteratorGet_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIteratorGetRule().getType().getClassifier())
			return null;
		if(checkForRecursion(IteratorGet_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule GetMechanism ****************/


/************ begin Rule SetMechanism ****************
 *
 * SetMechanism:
 * 	SimpleSet | GenericSet;
 *
 **/

// SimpleSet | GenericSet
protected class SetMechanism_Alternatives extends AlternativesToken {

	public SetMechanism_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSetMechanismAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SetMechanism_SimpleSetParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SetMechanism_GenericSetParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGenericSetRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSimpleSetRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// SimpleSet
protected class SetMechanism_SimpleSetParserRuleCall_0 extends RuleCallToken {
	
	public SetMechanism_SimpleSetParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSetMechanismAccess().getSimpleSetParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleSet_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSimpleSetRule().getType().getClassifier())
			return null;
		if(checkForRecursion(SimpleSet_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// GenericSet
protected class SetMechanism_GenericSetParserRuleCall_1 extends RuleCallToken {
	
	public SetMechanism_GenericSetParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSetMechanismAccess().getGenericSetParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GenericSet_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGenericSetRule().getType().getClassifier())
			return null;
		if(checkForRecursion(GenericSet_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule SetMechanism ****************/


/************ begin Rule SimpleGet ****************
 *
 * SimpleGet:
 * 	"method" getter=Method;
 *
 **/

// "method" getter=Method
protected class SimpleGet_Group extends GroupToken {
	
	public SimpleGet_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleGetAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleGet_GetterAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSimpleGetRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "method"
protected class SimpleGet_MethodKeyword_0 extends KeywordToken  {
	
	public SimpleGet_MethodKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleGetAccess().getMethodKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// getter=Method
protected class SimpleGet_GetterAssignment_1 extends AssignmentToken  {
	
	public SimpleGet_GetterAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleGetAccess().getGetterAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("getter",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("getter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMethodRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSimpleGetAccess().getGetterMethodParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SimpleGet_MethodKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule SimpleGet ****************/


/************ begin Rule SimpleSet ****************
 *
 * SimpleSet:
 * 	"method" setter=Method;
 *
 **/

// "method" setter=Method
protected class SimpleSet_Group extends GroupToken {
	
	public SimpleSet_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSimpleSetAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SimpleSet_SetterAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSimpleSetRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "method"
protected class SimpleSet_MethodKeyword_0 extends KeywordToken  {
	
	public SimpleSet_MethodKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSimpleSetAccess().getMethodKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// setter=Method
protected class SimpleSet_SetterAssignment_1 extends AssignmentToken  {
	
	public SimpleSet_SetterAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSimpleSetAccess().getSetterAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("setter",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("setter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMethodRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSimpleSetAccess().getSetterMethodParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new SimpleSet_MethodKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule SimpleSet ****************/


/************ begin Rule GenericGet ****************
 *
 * GenericGet:
 * 	"generic" getter=Method;
 *
 **/

// "generic" getter=Method
protected class GenericGet_Group extends GroupToken {
	
	public GenericGet_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGenericGetAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GenericGet_GetterAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGenericGetRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "generic"
protected class GenericGet_GenericKeyword_0 extends KeywordToken  {
	
	public GenericGet_GenericKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGenericGetAccess().getGenericKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// getter=Method
protected class GenericGet_GetterAssignment_1 extends AssignmentToken  {
	
	public GenericGet_GetterAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGenericGetAccess().getGetterAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("getter",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("getter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMethodRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGenericGetAccess().getGetterMethodParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new GenericGet_GenericKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule GenericGet ****************/


/************ begin Rule GenericSet ****************
 *
 * GenericSet:
 * 	"generic" setter=Method;
 *
 **/

// "generic" setter=Method
protected class GenericSet_Group extends GroupToken {
	
	public GenericSet_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGenericSetAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new GenericSet_SetterAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGenericSetRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "generic"
protected class GenericSet_GenericKeyword_0 extends KeywordToken  {
	
	public GenericSet_GenericKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGenericSetAccess().getGenericKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// setter=Method
protected class GenericSet_SetterAssignment_1 extends AssignmentToken  {
	
	public GenericSet_SetterAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGenericSetAccess().getSetterAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("setter",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("setter");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMethodRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getGenericSetAccess().getSetterMethodParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new GenericSet_GenericKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule GenericSet ****************/


/************ begin Rule IteratorGet ****************
 *
 * IteratorGet returns patterns::IteratorGetter:
 * 	"iterator" iterator=[patterns::IteratorDescription] "method" getIterator=Method;
 *
 **/

// "iterator" iterator=[patterns::IteratorDescription] "method" getIterator=Method
protected class IteratorGet_Group extends GroupToken {
	
	public IteratorGet_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIteratorGetAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IteratorGet_GetIteratorAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIteratorGetRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "iterator"
protected class IteratorGet_IteratorKeyword_0 extends KeywordToken  {
	
	public IteratorGet_IteratorKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIteratorGetAccess().getIteratorKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// iterator=[patterns::IteratorDescription]
protected class IteratorGet_IteratorAssignment_1 extends AssignmentToken  {
	
	public IteratorGet_IteratorAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIteratorGetAccess().getIteratorAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IteratorGet_IteratorKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("iterator",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("iterator");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::CrossReferenceImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getIteratorGetAccess().getIteratorIteratorDescriptionCrossReference_1_0().getType().getClassifier())) {
				type = AssignmentType.CROSS_REFERENCE;
				element = grammarAccess.getIteratorGetAccess().getIteratorIteratorDescriptionCrossReference_1_0(); 
				return obj;
			}
		}
		return null;
	}

}

// "method"
protected class IteratorGet_MethodKeyword_2 extends KeywordToken  {
	
	public IteratorGet_MethodKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIteratorGetAccess().getMethodKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IteratorGet_IteratorAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// getIterator=Method
protected class IteratorGet_GetIteratorAssignment_3 extends AssignmentToken  {
	
	public IteratorGet_GetIteratorAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIteratorGetAccess().getGetIteratorAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("getIterator",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("getIterator");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMethodRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIteratorGetAccess().getGetIteratorMethodParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IteratorGet_MethodKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule IteratorGet ****************/


/************ begin Rule DeclaredElement ****************
 *
 * // Being-of patterns
 * DeclaredElement:
 * 	IteratorDescription | ObserverDescription;
 *
 **/

// IteratorDescription | ObserverDescription
protected class DeclaredElement_Alternatives extends AlternativesToken {

	public DeclaredElement_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getDeclaredElementAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new DeclaredElement_IteratorDescriptionParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new DeclaredElement_ObserverDescriptionParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIteratorDescriptionRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getObserverDescriptionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// IteratorDescription
protected class DeclaredElement_IteratorDescriptionParserRuleCall_0 extends RuleCallToken {
	
	public DeclaredElement_IteratorDescriptionParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDeclaredElementAccess().getIteratorDescriptionParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IteratorDescription_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIteratorDescriptionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(IteratorDescription_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ObserverDescription
protected class DeclaredElement_ObserverDescriptionParserRuleCall_1 extends RuleCallToken {
	
	public DeclaredElement_ObserverDescriptionParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getDeclaredElementAccess().getObserverDescriptionParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ObserverDescription_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getObserverDescriptionRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ObserverDescription_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule DeclaredElement ****************/


/************ begin Rule IteratorDescription ****************
 *
 * IteratorDescription returns patterns::IteratorDescription:
 * 	"iterator" name=ID ":" iteratorClass=QualifiedName "{" "finished" hasFinished=Method "next" nextElement=Method "}";
 *
 **/

// "iterator" name=ID ":" iteratorClass=QualifiedName "{" "finished" hasFinished=Method "next" nextElement=Method "}"
protected class IteratorDescription_Group extends GroupToken {
	
	public IteratorDescription_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIteratorDescriptionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IteratorDescription_RightCurlyBracketKeyword_9(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIteratorDescriptionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "iterator"
protected class IteratorDescription_IteratorKeyword_0 extends KeywordToken  {
	
	public IteratorDescription_IteratorKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIteratorDescriptionAccess().getIteratorKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class IteratorDescription_NameAssignment_1 extends AssignmentToken  {
	
	public IteratorDescription_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIteratorDescriptionAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IteratorDescription_IteratorKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getIteratorDescriptionAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getIteratorDescriptionAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class IteratorDescription_ColonKeyword_2 extends KeywordToken  {
	
	public IteratorDescription_ColonKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIteratorDescriptionAccess().getColonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IteratorDescription_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// iteratorClass=QualifiedName
protected class IteratorDescription_IteratorClassAssignment_3 extends AssignmentToken  {
	
	public IteratorDescription_IteratorClassAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIteratorDescriptionAccess().getIteratorClassAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IteratorDescription_ColonKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("iteratorClass",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("iteratorClass");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getIteratorDescriptionAccess().getIteratorClassQualifiedNameParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getIteratorDescriptionAccess().getIteratorClassQualifiedNameParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class IteratorDescription_LeftCurlyBracketKeyword_4 extends KeywordToken  {
	
	public IteratorDescription_LeftCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIteratorDescriptionAccess().getLeftCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IteratorDescription_IteratorClassAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "finished"
protected class IteratorDescription_FinishedKeyword_5 extends KeywordToken  {
	
	public IteratorDescription_FinishedKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIteratorDescriptionAccess().getFinishedKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IteratorDescription_LeftCurlyBracketKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// hasFinished=Method
protected class IteratorDescription_HasFinishedAssignment_6 extends AssignmentToken  {
	
	public IteratorDescription_HasFinishedAssignment_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIteratorDescriptionAccess().getHasFinishedAssignment_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("hasFinished",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("hasFinished");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMethodRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIteratorDescriptionAccess().getHasFinishedMethodParserRuleCall_6_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IteratorDescription_FinishedKeyword_5(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "next"
protected class IteratorDescription_NextKeyword_7 extends KeywordToken  {
	
	public IteratorDescription_NextKeyword_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIteratorDescriptionAccess().getNextKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IteratorDescription_HasFinishedAssignment_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// nextElement=Method
protected class IteratorDescription_NextElementAssignment_8 extends AssignmentToken  {
	
	public IteratorDescription_NextElementAssignment_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIteratorDescriptionAccess().getNextElementAssignment_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("nextElement",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("nextElement");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMethodRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIteratorDescriptionAccess().getNextElementMethodParserRuleCall_8_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new IteratorDescription_NextKeyword_7(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class IteratorDescription_RightCurlyBracketKeyword_9 extends KeywordToken  {
	
	public IteratorDescription_RightCurlyBracketKeyword_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIteratorDescriptionAccess().getRightCurlyBracketKeyword_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new IteratorDescription_NextElementAssignment_8(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule IteratorDescription ****************/


/************ begin Rule ObserverDescription ****************
 *
 * ObserverDescription returns patterns::ObserverDescription:
 * 	"observer" name=ID ":" observerClass=QualifiedName "{" updateMethods+=UpdateMethod+ "}";
 *
 **/

// "observer" name=ID ":" observerClass=QualifiedName "{" updateMethods+=UpdateMethod+ "}"
protected class ObserverDescription_Group extends GroupToken {
	
	public ObserverDescription_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getObserverDescriptionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ObserverDescription_RightCurlyBracketKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getObserverDescriptionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "observer"
protected class ObserverDescription_ObserverKeyword_0 extends KeywordToken  {
	
	public ObserverDescription_ObserverKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getObserverDescriptionAccess().getObserverKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// name=ID
protected class ObserverDescription_NameAssignment_1 extends AssignmentToken  {
	
	public ObserverDescription_NameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getObserverDescriptionAccess().getNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ObserverDescription_ObserverKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getObserverDescriptionAccess().getNameIDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getObserverDescriptionAccess().getNameIDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// ":"
protected class ObserverDescription_ColonKeyword_2 extends KeywordToken  {
	
	public ObserverDescription_ColonKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getObserverDescriptionAccess().getColonKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ObserverDescription_NameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// observerClass=QualifiedName
protected class ObserverDescription_ObserverClassAssignment_3 extends AssignmentToken  {
	
	public ObserverDescription_ObserverClassAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getObserverDescriptionAccess().getObserverClassAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ObserverDescription_ColonKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("observerClass",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("observerClass");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getObserverDescriptionAccess().getObserverClassQualifiedNameParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getObserverDescriptionAccess().getObserverClassQualifiedNameParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// "{"
protected class ObserverDescription_LeftCurlyBracketKeyword_4 extends KeywordToken  {
	
	public ObserverDescription_LeftCurlyBracketKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getObserverDescriptionAccess().getLeftCurlyBracketKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ObserverDescription_ObserverClassAssignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// updateMethods+=UpdateMethod+
protected class ObserverDescription_UpdateMethodsAssignment_5 extends AssignmentToken  {
	
	public ObserverDescription_UpdateMethodsAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getObserverDescriptionAccess().getUpdateMethodsAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("updateMethods",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("updateMethods");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getUpdateMethodRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getObserverDescriptionAccess().getUpdateMethodsUpdateMethodParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new ObserverDescription_UpdateMethodsAssignment_5(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new ObserverDescription_LeftCurlyBracketKeyword_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "}"
protected class ObserverDescription_RightCurlyBracketKeyword_6 extends KeywordToken  {
	
	public ObserverDescription_RightCurlyBracketKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getObserverDescriptionAccess().getRightCurlyBracketKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ObserverDescription_UpdateMethodsAssignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ObserverDescription ****************/


/************ begin Rule UpdateMethod ****************
 *
 * // copied from method
 * UpdateMethod returns patterns::UpdateMethod:
 * 	"update" ("[" interest+=INT ("," interest+=INT)* "]")? name=EString "(" (parameterTypes+=QualifiedName (","
 * 	parameterTypes+=QualifiedName)*)? ")" ":" (returnArray?="Array" "<" returnType=QualifiedName ">" |
 * 	returnCollection?="Collection" "<" returnType=QualifiedName ">" | returnType=QualifiedName | returnVoid?="void");
 *
 **/

// "update" ("[" interest+=INT ("," interest+=INT)* "]")? name=EString "(" (parameterTypes+=QualifiedName (","
// parameterTypes+=QualifiedName)*)? ")" ":" (returnArray?="Array" "<" returnType=QualifiedName ">" |
// returnCollection?="Collection" "<" returnType=QualifiedName ">" | returnType=QualifiedName | returnVoid?="void")
protected class UpdateMethod_Group extends GroupToken {
	
	public UpdateMethod_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_Alternatives_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUpdateMethodRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "update"
protected class UpdateMethod_UpdateKeyword_0 extends KeywordToken  {
	
	public UpdateMethod_UpdateKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getUpdateKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// ("[" interest+=INT ("," interest+=INT)* "]")?
protected class UpdateMethod_Group_1 extends GroupToken {
	
	public UpdateMethod_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_RightSquareBracketKeyword_1_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "["
protected class UpdateMethod_LeftSquareBracketKeyword_1_0 extends KeywordToken  {
	
	public UpdateMethod_LeftSquareBracketKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getLeftSquareBracketKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_UpdateKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// interest+=INT
protected class UpdateMethod_InterestAssignment_1_1 extends AssignmentToken  {
	
	public UpdateMethod_InterestAssignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getInterestAssignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_LeftSquareBracketKeyword_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("interest",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("interest");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getUpdateMethodAccess().getInterestINTTerminalRuleCall_1_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getUpdateMethodAccess().getInterestINTTerminalRuleCall_1_1_0();
			return obj;
		}
		return null;
	}

}

// ("," interest+=INT)*
protected class UpdateMethod_Group_1_2 extends GroupToken {
	
	public UpdateMethod_Group_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getGroup_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_InterestAssignment_1_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class UpdateMethod_CommaKeyword_1_2_0 extends KeywordToken  {
	
	public UpdateMethod_CommaKeyword_1_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getCommaKeyword_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_Group_1_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new UpdateMethod_InterestAssignment_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// interest+=INT
protected class UpdateMethod_InterestAssignment_1_2_1 extends AssignmentToken  {
	
	public UpdateMethod_InterestAssignment_1_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getInterestAssignment_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_CommaKeyword_1_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("interest",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("interest");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getUpdateMethodAccess().getInterestINTTerminalRuleCall_1_2_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getUpdateMethodAccess().getInterestINTTerminalRuleCall_1_2_1_0();
			return obj;
		}
		return null;
	}

}


// "]"
protected class UpdateMethod_RightSquareBracketKeyword_1_3 extends KeywordToken  {
	
	public UpdateMethod_RightSquareBracketKeyword_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getRightSquareBracketKeyword_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_Group_1_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new UpdateMethod_InterestAssignment_1_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}


// name=EString
protected class UpdateMethod_NameAssignment_2 extends AssignmentToken  {
	
	public UpdateMethod_NameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new UpdateMethod_UpdateKeyword_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getUpdateMethodAccess().getNameEStringParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getUpdateMethodAccess().getNameEStringParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class UpdateMethod_LeftParenthesisKeyword_3 extends KeywordToken  {
	
	public UpdateMethod_LeftParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getLeftParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_NameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (parameterTypes+=QualifiedName ("," parameterTypes+=QualifiedName)*)?
protected class UpdateMethod_Group_4 extends GroupToken {
	
	public UpdateMethod_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_Group_4_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new UpdateMethod_ParameterTypesAssignment_4_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// parameterTypes+=QualifiedName
protected class UpdateMethod_ParameterTypesAssignment_4_0 extends AssignmentToken  {
	
	public UpdateMethod_ParameterTypesAssignment_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getParameterTypesAssignment_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_LeftParenthesisKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameterTypes",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameterTypes");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getUpdateMethodAccess().getParameterTypesQualifiedNameParserRuleCall_4_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getUpdateMethodAccess().getParameterTypesQualifiedNameParserRuleCall_4_0_0();
			return obj;
		}
		return null;
	}

}

// ("," parameterTypes+=QualifiedName)*
protected class UpdateMethod_Group_4_1 extends GroupToken {
	
	public UpdateMethod_Group_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getGroup_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_ParameterTypesAssignment_4_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class UpdateMethod_CommaKeyword_4_1_0 extends KeywordToken  {
	
	public UpdateMethod_CommaKeyword_4_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getCommaKeyword_4_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_Group_4_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new UpdateMethod_ParameterTypesAssignment_4_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// parameterTypes+=QualifiedName
protected class UpdateMethod_ParameterTypesAssignment_4_1_1 extends AssignmentToken  {
	
	public UpdateMethod_ParameterTypesAssignment_4_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getParameterTypesAssignment_4_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_CommaKeyword_4_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameterTypes",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameterTypes");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getUpdateMethodAccess().getParameterTypesQualifiedNameParserRuleCall_4_1_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getUpdateMethodAccess().getParameterTypesQualifiedNameParserRuleCall_4_1_1_0();
			return obj;
		}
		return null;
	}

}



// ")"
protected class UpdateMethod_RightParenthesisKeyword_5 extends KeywordToken  {
	
	public UpdateMethod_RightParenthesisKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getRightParenthesisKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new UpdateMethod_LeftParenthesisKeyword_3(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ":"
protected class UpdateMethod_ColonKeyword_6 extends KeywordToken  {
	
	public UpdateMethod_ColonKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getColonKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_RightParenthesisKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// returnArray?="Array" "<" returnType=QualifiedName ">" | returnCollection?="Collection" "<" returnType=QualifiedName ">"
// | returnType=QualifiedName | returnVoid?="void"
protected class UpdateMethod_Alternatives_7 extends AlternativesToken {

	public UpdateMethod_Alternatives_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getAlternatives_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_Group_7_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new UpdateMethod_Group_7_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new UpdateMethod_ReturnTypeAssignment_7_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new UpdateMethod_ReturnVoidAssignment_7_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}

// returnArray?="Array" "<" returnType=QualifiedName ">"
protected class UpdateMethod_Group_7_0 extends GroupToken {
	
	public UpdateMethod_Group_7_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getGroup_7_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_GreaterThanSignKeyword_7_0_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// returnArray?="Array"
protected class UpdateMethod_ReturnArrayAssignment_7_0_0 extends AssignmentToken  {
	
	public UpdateMethod_ReturnArrayAssignment_7_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getReturnArrayAssignment_7_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_ColonKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("returnArray",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("returnArray");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getUpdateMethodAccess().getReturnArrayArrayKeyword_7_0_0_0();
			return obj;
		}
		return null;
	}

}

// "<"
protected class UpdateMethod_LessThanSignKeyword_7_0_1 extends KeywordToken  {
	
	public UpdateMethod_LessThanSignKeyword_7_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getLessThanSignKeyword_7_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_ReturnArrayAssignment_7_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// returnType=QualifiedName
protected class UpdateMethod_ReturnTypeAssignment_7_0_2 extends AssignmentToken  {
	
	public UpdateMethod_ReturnTypeAssignment_7_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getReturnTypeAssignment_7_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_LessThanSignKeyword_7_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("returnType",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("returnType");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getUpdateMethodAccess().getReturnTypeQualifiedNameParserRuleCall_7_0_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getUpdateMethodAccess().getReturnTypeQualifiedNameParserRuleCall_7_0_2_0();
			return obj;
		}
		return null;
	}

}

// ">"
protected class UpdateMethod_GreaterThanSignKeyword_7_0_3 extends KeywordToken  {
	
	public UpdateMethod_GreaterThanSignKeyword_7_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getGreaterThanSignKeyword_7_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_ReturnTypeAssignment_7_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// returnCollection?="Collection" "<" returnType=QualifiedName ">"
protected class UpdateMethod_Group_7_1 extends GroupToken {
	
	public UpdateMethod_Group_7_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getGroup_7_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_GreaterThanSignKeyword_7_1_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// returnCollection?="Collection"
protected class UpdateMethod_ReturnCollectionAssignment_7_1_0 extends AssignmentToken  {
	
	public UpdateMethod_ReturnCollectionAssignment_7_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getReturnCollectionAssignment_7_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_ColonKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("returnCollection",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("returnCollection");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getUpdateMethodAccess().getReturnCollectionCollectionKeyword_7_1_0_0();
			return obj;
		}
		return null;
	}

}

// "<"
protected class UpdateMethod_LessThanSignKeyword_7_1_1 extends KeywordToken  {
	
	public UpdateMethod_LessThanSignKeyword_7_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getLessThanSignKeyword_7_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_ReturnCollectionAssignment_7_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// returnType=QualifiedName
protected class UpdateMethod_ReturnTypeAssignment_7_1_2 extends AssignmentToken  {
	
	public UpdateMethod_ReturnTypeAssignment_7_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getReturnTypeAssignment_7_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_LessThanSignKeyword_7_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("returnType",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("returnType");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getUpdateMethodAccess().getReturnTypeQualifiedNameParserRuleCall_7_1_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getUpdateMethodAccess().getReturnTypeQualifiedNameParserRuleCall_7_1_2_0();
			return obj;
		}
		return null;
	}

}

// ">"
protected class UpdateMethod_GreaterThanSignKeyword_7_1_3 extends KeywordToken  {
	
	public UpdateMethod_GreaterThanSignKeyword_7_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getGreaterThanSignKeyword_7_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_ReturnTypeAssignment_7_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// returnType=QualifiedName
protected class UpdateMethod_ReturnTypeAssignment_7_2 extends AssignmentToken  {
	
	public UpdateMethod_ReturnTypeAssignment_7_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getReturnTypeAssignment_7_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_ColonKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("returnType",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("returnType");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getUpdateMethodAccess().getReturnTypeQualifiedNameParserRuleCall_7_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getUpdateMethodAccess().getReturnTypeQualifiedNameParserRuleCall_7_2_0();
			return obj;
		}
		return null;
	}

}

// returnVoid?="void"
protected class UpdateMethod_ReturnVoidAssignment_7_3 extends AssignmentToken  {
	
	public UpdateMethod_ReturnVoidAssignment_7_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUpdateMethodAccess().getReturnVoidAssignment_7_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new UpdateMethod_ColonKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("returnVoid",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("returnVoid");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getUpdateMethodAccess().getReturnVoidVoidKeyword_7_3_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule UpdateMethod ****************/



/************ begin Rule Method ****************
 *
 * //'{'
 * //	('parameterTypes' '{' parameterTypes+=EString ( "," parameterTypes+=EString)* '}' )?
 * //	('returnType' returnType=EString)?
 * //	'returnKind' returnKind=ReturnKind
 * //'}';
 * Method:
 * 	name=EString "(" (parameterTypes+=QualifiedName ("," parameterTypes+=QualifiedName)*)? ")" ":" (returnArray?="Array"
 * 	"<" returnType=QualifiedName ">" | returnCollection?="Collection" "<" returnType=QualifiedName ">" |
 * 	returnType=QualifiedName | returnVoid?="void");
 *
 **/

// name=EString "(" (parameterTypes+=QualifiedName ("," parameterTypes+=QualifiedName)*)? ")" ":" (returnArray?="Array" "<"
// returnType=QualifiedName ">" | returnCollection?="Collection" "<" returnType=QualifiedName ">" |
// returnType=QualifiedName | returnVoid?="void")
protected class Method_Group extends GroupToken {
	
	public Method_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMethodAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_Alternatives_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMethodRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// name=EString
protected class Method_NameAssignment_0 extends AssignmentToken  {
	
	public Method_NameAssignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMethodAccess().getNameAssignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("name",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("name");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMethodAccess().getNameEStringParserRuleCall_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getMethodAccess().getNameEStringParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// "("
protected class Method_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public Method_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMethodAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_NameAssignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// (parameterTypes+=QualifiedName ("," parameterTypes+=QualifiedName)*)?
protected class Method_Group_2 extends GroupToken {
	
	public Method_Group_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMethodAccess().getGroup_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Method_ParameterTypesAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// parameterTypes+=QualifiedName
protected class Method_ParameterTypesAssignment_2_0 extends AssignmentToken  {
	
	public Method_ParameterTypesAssignment_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMethodAccess().getParameterTypesAssignment_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameterTypes",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameterTypes");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMethodAccess().getParameterTypesQualifiedNameParserRuleCall_2_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getMethodAccess().getParameterTypesQualifiedNameParserRuleCall_2_0_0();
			return obj;
		}
		return null;
	}

}

// ("," parameterTypes+=QualifiedName)*
protected class Method_Group_2_1 extends GroupToken {
	
	public Method_Group_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMethodAccess().getGroup_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_ParameterTypesAssignment_2_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// ","
protected class Method_CommaKeyword_2_1_0 extends KeywordToken  {
	
	public Method_CommaKeyword_2_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMethodAccess().getCommaKeyword_2_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_Group_2_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Method_ParameterTypesAssignment_2_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// parameterTypes+=QualifiedName
protected class Method_ParameterTypesAssignment_2_1_1 extends AssignmentToken  {
	
	public Method_ParameterTypesAssignment_2_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMethodAccess().getParameterTypesAssignment_2_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_CommaKeyword_2_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("parameterTypes",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("parameterTypes");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMethodAccess().getParameterTypesQualifiedNameParserRuleCall_2_1_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getMethodAccess().getParameterTypesQualifiedNameParserRuleCall_2_1_1_0();
			return obj;
		}
		return null;
	}

}



// ")"
protected class Method_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public Method_RightParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMethodAccess().getRightParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_Group_2(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Method_LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// ":"
protected class Method_ColonKeyword_4 extends KeywordToken  {
	
	public Method_ColonKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMethodAccess().getColonKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_RightParenthesisKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// returnArray?="Array" "<" returnType=QualifiedName ">" | returnCollection?="Collection" "<" returnType=QualifiedName ">"
// | returnType=QualifiedName | returnVoid?="void"
protected class Method_Alternatives_5 extends AlternativesToken {

	public Method_Alternatives_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getMethodAccess().getAlternatives_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_Group_5_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Method_Group_5_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Method_ReturnTypeAssignment_5_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Method_ReturnVoidAssignment_5_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

}

// returnArray?="Array" "<" returnType=QualifiedName ">"
protected class Method_Group_5_0 extends GroupToken {
	
	public Method_Group_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMethodAccess().getGroup_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_GreaterThanSignKeyword_5_0_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// returnArray?="Array"
protected class Method_ReturnArrayAssignment_5_0_0 extends AssignmentToken  {
	
	public Method_ReturnArrayAssignment_5_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMethodAccess().getReturnArrayAssignment_5_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_ColonKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("returnArray",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("returnArray");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMethodAccess().getReturnArrayArrayKeyword_5_0_0_0();
			return obj;
		}
		return null;
	}

}

// "<"
protected class Method_LessThanSignKeyword_5_0_1 extends KeywordToken  {
	
	public Method_LessThanSignKeyword_5_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMethodAccess().getLessThanSignKeyword_5_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_ReturnArrayAssignment_5_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// returnType=QualifiedName
protected class Method_ReturnTypeAssignment_5_0_2 extends AssignmentToken  {
	
	public Method_ReturnTypeAssignment_5_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMethodAccess().getReturnTypeAssignment_5_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_LessThanSignKeyword_5_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("returnType",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("returnType");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMethodAccess().getReturnTypeQualifiedNameParserRuleCall_5_0_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getMethodAccess().getReturnTypeQualifiedNameParserRuleCall_5_0_2_0();
			return obj;
		}
		return null;
	}

}

// ">"
protected class Method_GreaterThanSignKeyword_5_0_3 extends KeywordToken  {
	
	public Method_GreaterThanSignKeyword_5_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMethodAccess().getGreaterThanSignKeyword_5_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_ReturnTypeAssignment_5_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// returnCollection?="Collection" "<" returnType=QualifiedName ">"
protected class Method_Group_5_1 extends GroupToken {
	
	public Method_Group_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMethodAccess().getGroup_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_GreaterThanSignKeyword_5_1_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// returnCollection?="Collection"
protected class Method_ReturnCollectionAssignment_5_1_0 extends AssignmentToken  {
	
	public Method_ReturnCollectionAssignment_5_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMethodAccess().getReturnCollectionAssignment_5_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_ColonKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("returnCollection",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("returnCollection");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMethodAccess().getReturnCollectionCollectionKeyword_5_1_0_0();
			return obj;
		}
		return null;
	}

}

// "<"
protected class Method_LessThanSignKeyword_5_1_1 extends KeywordToken  {
	
	public Method_LessThanSignKeyword_5_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMethodAccess().getLessThanSignKeyword_5_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_ReturnCollectionAssignment_5_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// returnType=QualifiedName
protected class Method_ReturnTypeAssignment_5_1_2 extends AssignmentToken  {
	
	public Method_ReturnTypeAssignment_5_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMethodAccess().getReturnTypeAssignment_5_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_LessThanSignKeyword_5_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("returnType",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("returnType");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMethodAccess().getReturnTypeQualifiedNameParserRuleCall_5_1_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getMethodAccess().getReturnTypeQualifiedNameParserRuleCall_5_1_2_0();
			return obj;
		}
		return null;
	}

}

// ">"
protected class Method_GreaterThanSignKeyword_5_1_3 extends KeywordToken  {
	
	public Method_GreaterThanSignKeyword_5_1_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getMethodAccess().getGreaterThanSignKeyword_5_1_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_ReturnTypeAssignment_5_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


// returnType=QualifiedName
protected class Method_ReturnTypeAssignment_5_2 extends AssignmentToken  {
	
	public Method_ReturnTypeAssignment_5_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMethodAccess().getReturnTypeAssignment_5_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_ColonKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("returnType",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("returnType");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getMethodAccess().getReturnTypeQualifiedNameParserRuleCall_5_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getMethodAccess().getReturnTypeQualifiedNameParserRuleCall_5_2_0();
			return obj;
		}
		return null;
	}

}

// returnVoid?="void"
protected class Method_ReturnVoidAssignment_5_3 extends AssignmentToken  {
	
	public Method_ReturnVoidAssignment_5_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMethodAccess().getReturnVoidAssignment_5_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Method_ColonKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("returnVoid",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("returnVoid");
		if(Boolean.TRUE.equals(value)) { // org::eclipse::xtext::impl::KeywordImpl
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getMethodAccess().getReturnVoidVoidKeyword_5_3_0();
			return obj;
		}
		return null;
	}

}



/************ end Rule Method ****************/



}
