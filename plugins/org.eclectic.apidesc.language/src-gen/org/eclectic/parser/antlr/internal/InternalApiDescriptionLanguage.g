/*
* generated by Xtext
*/
grammar InternalApiDescriptionLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.eclectic.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclectic.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclectic.services.ApiDescriptionLanguageGrammarAccess;

}

@parser::members {

 	private ApiDescriptionLanguageGrammarAccess grammarAccess;
 	
    public InternalApiDescriptionLanguageParser(TokenStream input, ApiDescriptionLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "ApiDescription";	
   	}
   	
   	@Override
   	protected ApiDescriptionLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleApiDescription
entryRuleApiDescription returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getApiDescriptionRule()); }
	 iv_ruleApiDescription=ruleApiDescription 
	 { $current=$iv_ruleApiDescription.current; } 
	 EOF 
;

// Rule ApiDescription
ruleApiDescription returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='api' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getApiDescriptionAccess().getApiKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getApiDescriptionAccess().getApiNameEStringParserRuleCall_1_0()); 
	    }
		lv_apiName_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getApiDescriptionRule());
	        }
       		set(
       			$current, 
       			"apiName",
        		lv_apiName_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='described' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getApiDescriptionAccess().getDescribedKeyword_2());
    }
	otherlv_3='by' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getApiDescriptionAccess().getByKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getApiDescriptionAccess().getMetamodelNameEStringParserRuleCall_4_0()); 
	    }
		lv_metamodelName_4_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getApiDescriptionRule());
	        }
       		set(
       			$current, 
       			"metamodelName",
        		lv_metamodelName_4_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='generic' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getApiDescriptionAccess().getGenericKeyword_5_0());
    }
	otherlv_6='mapper' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getApiDescriptionAccess().getMapperKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getApiDescriptionAccess().getMapperClassNameQualifiedNameParserRuleCall_5_2_0()); 
	    }
		lv_mapperClassName_7_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getApiDescriptionRule());
	        }
       		set(
       			$current, 
       			"mapperClassName",
        		lv_mapperClassName_7_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getApiDescriptionAccess().getDeclaredElementsDeclaredElementParserRuleCall_6_0()); 
	    }
		lv_declaredElements_8_0=ruleDeclaredElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getApiDescriptionRule());
	        }
       		add(
       			$current, 
       			"declaredElements",
        		lv_declaredElements_8_0, 
        		"DeclaredElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getApiDescriptionAccess().getClassMappingsClassMappingParserRuleCall_7_0()); 
	    }
		lv_classMappings_9_0=ruleClassMapping		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getApiDescriptionRule());
	        }
       		add(
       			$current, 
       			"classMappings",
        		lv_classMappings_9_0, 
        		"ClassMapping");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleClassMapping
entryRuleClassMapping returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassMappingRule()); }
	 iv_ruleClassMapping=ruleClassMapping 
	 { $current=$iv_ruleClassMapping.current; } 
	 EOF 
;

// Rule ClassMapping
ruleClassMapping returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getClassMappingAccess().getSimpleClassMappingParserRuleCall()); 
    }
    this_SimpleClassMapping_0=ruleSimpleClassMapping
    { 
        $current = $this_SimpleClassMapping_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleSimpleClassMapping
entryRuleSimpleClassMapping returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleClassMappingRule()); }
	 iv_ruleSimpleClassMapping=ruleSimpleClassMapping 
	 { $current=$iv_ruleSimpleClassMapping.current; } 
	 EOF 
;

// Rule SimpleClassMapping
ruleSimpleClassMapping returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='metaclass' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSimpleClassMappingAccess().getMetaclassKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleClassMappingAccess().getMetaclassNameEStringParserRuleCall_1_0()); 
	    }
		lv_metaclassName_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleClassMappingRule());
	        }
       		set(
       			$current, 
       			"metaclassName",
        		lv_metaclassName_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='to' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSimpleClassMappingAccess().getToKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleClassMappingAccess().getCanonicalClassNameQualifiedNameParserRuleCall_3_0()); 
	    }
		lv_canonicalClassName_3_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleClassMappingRule());
	        }
       		set(
       			$current, 
       			"canonicalClassName",
        		lv_canonicalClassName_3_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSimpleClassMappingAccess().getLeftCurlyBracketKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleClassMappingAccess().getCreationCreationMechanismParserRuleCall_4_1_0()); 
	    }
		lv_creation_5_0=ruleCreationMechanism		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleClassMappingRule());
	        }
       		set(
       			$current, 
       			"creation",
        		lv_creation_5_0, 
        		"CreationMechanism");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleClassMappingAccess().getFeatureMappingsFeatureMappingParserRuleCall_4_2_0()); 
	    }
		lv_featureMappings_6_0=ruleFeatureMapping		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleClassMappingRule());
	        }
       		add(
       			$current, 
       			"featureMappings",
        		lv_featureMappings_6_0, 
        		"FeatureMapping");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSimpleClassMappingAccess().getRightCurlyBracketKeyword_4_3());
    }
)?)
;





// Entry rule entryRuleCreationMechanism
entryRuleCreationMechanism returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCreationMechanismRule()); }
	 iv_ruleCreationMechanism=ruleCreationMechanism 
	 { $current=$iv_ruleCreationMechanism.current; } 
	 EOF 
;

// Rule CreationMechanism
ruleCreationMechanism returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCreationMechanismAccess().getEmptyConstructorParserRuleCall_0()); 
    }
    this_EmptyConstructor_0=ruleEmptyConstructor
    { 
        $current = $this_EmptyConstructor_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCreationMechanismAccess().getNonEmptyConstructorParserRuleCall_1()); 
    }
    this_NonEmptyConstructor_1=ruleNonEmptyConstructor
    { 
        $current = $this_NonEmptyConstructor_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEmptyConstructor
entryRuleEmptyConstructor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEmptyConstructorRule()); }
	 iv_ruleEmptyConstructor=ruleEmptyConstructor 
	 { $current=$iv_ruleEmptyConstructor.current; } 
	 EOF 
;

// Rule EmptyConstructor
ruleEmptyConstructor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='empty' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEmptyConstructorAccess().getEmptyKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getEmptyConstructorAccess().getConstructorAction_1(),
            $current);
    }
)	otherlv_2='constructor' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEmptyConstructorAccess().getConstructorKeyword_2());
    }
(	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEmptyConstructorAccess().getLeftCurlyBracketKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEmptyConstructorAccess().getStatementStatementParserRuleCall_3_1_0()); 
	    }
		lv_statement_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEmptyConstructorRule());
	        }
       		add(
       			$current, 
       			"statement",
        		lv_statement_4_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEmptyConstructorAccess().getRightCurlyBracketKeyword_3_2());
    }
)?)
;





// Entry rule entryRuleNonEmptyConstructor
entryRuleNonEmptyConstructor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNonEmptyConstructorRule()); }
	 iv_ruleNonEmptyConstructor=ruleNonEmptyConstructor 
	 { $current=$iv_ruleNonEmptyConstructor.current; } 
	 EOF 
;

// Rule NonEmptyConstructor
ruleNonEmptyConstructor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getNonEmptyConstructorAccess().getConstructorAction_0(),
            $current);
    }
)	otherlv_1='constructor' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNonEmptyConstructorAccess().getConstructorKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNonEmptyConstructorAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNonEmptyConstructorRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getNonEmptyConstructorAccess().getParametersFeatureMappingCrossReference_3_0()); 
	}

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNonEmptyConstructorAccess().getCommaKeyword_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNonEmptyConstructorRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getNonEmptyConstructorAccess().getParametersFeatureMappingCrossReference_4_1_0()); 
	}

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getNonEmptyConstructorAccess().getRightParenthesisKeyword_5());
    }
(	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getNonEmptyConstructorAccess().getLeftCurlyBracketKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNonEmptyConstructorAccess().getStatementStatementParserRuleCall_6_1_0()); 
	    }
		lv_statement_8_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNonEmptyConstructorRule());
	        }
       		add(
       			$current, 
       			"statement",
        		lv_statement_8_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getNonEmptyConstructorAccess().getRightCurlyBracketKeyword_6_2());
    }
)?)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getStatementAccess().getSetFeatureParserRuleCall()); 
    }
    this_SetFeature_0=ruleSetFeature
    { 
        $current = $this_SetFeature_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleSetFeature
entryRuleSetFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetFeatureRule()); }
	 iv_ruleSetFeature=ruleSetFeature 
	 { $current=$iv_ruleSetFeature.current; } 
	 EOF 
;

// Rule SetFeature
ruleSetFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='set' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSetFeatureAccess().getSetKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSetFeatureRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getSetFeatureAccess().getFeatureFeatureMappingCrossReference_1_0()); 
	}

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSetFeatureAccess().getEqualsSignKeyword_2());
    }
((
(
		lv_intValue_3_0=RULE_INT
		{
			newLeafNode(lv_intValue_3_0, grammarAccess.getSetFeatureAccess().getIntValueINTTerminalRuleCall_3_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSetFeatureRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"intValue",
        		lv_intValue_3_0, 
        		"INT");
	    }

)
)
    |(
(
		lv_strValue_4_0=RULE_STRING
		{
			newLeafNode(lv_strValue_4_0, grammarAccess.getSetFeatureAccess().getStrValueSTRINGTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSetFeatureRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"strValue",
        		lv_strValue_4_0, 
        		"STRING");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSetFeatureAccess().getBoolValueEBooleanParserRuleCall_3_2_0()); 
	    }
		lv_boolValue_5_0=ruleEBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSetFeatureRule());
	        }
       		set(
       			$current, 
       			"boolValue",
        		lv_boolValue_5_0, 
        		"EBoolean");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleFeatureMapping
entryRuleFeatureMapping returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureMappingRule()); }
	 iv_ruleFeatureMapping=ruleFeatureMapping 
	 { $current=$iv_ruleFeatureMapping.current; } 
	 EOF 
;

// Rule FeatureMapping
ruleFeatureMapping returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFeatureMappingAccess().getSimpleAttributeMappingParserRuleCall_0()); 
    }
    this_SimpleAttributeMapping_0=ruleSimpleAttributeMapping
    { 
        $current = $this_SimpleAttributeMapping_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFeatureMappingAccess().getSimpleReferenceMappingParserRuleCall_1()); 
    }
    this_SimpleReferenceMapping_1=ruleSimpleReferenceMapping
    { 
        $current = $this_SimpleReferenceMapping_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSimpleAttributeMapping
entryRuleSimpleAttributeMapping returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleAttributeMappingRule()); }
	 iv_ruleSimpleAttributeMapping=ruleSimpleAttributeMapping 
	 { $current=$iv_ruleSimpleAttributeMapping.current; } 
	 EOF 
;

// Rule SimpleAttributeMapping
ruleSimpleAttributeMapping returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='attr' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSimpleAttributeMappingAccess().getAttrKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleAttributeMappingAccess().getFeatureNameEStringParserRuleCall_1_0()); 
	    }
		lv_featureName_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleAttributeMappingRule());
	        }
       		set(
       			$current, 
       			"featureName",
        		lv_featureName_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_isMultivalued_2_0=	'*' 
    {
        newLeafNode(lv_isMultivalued_2_0, grammarAccess.getSimpleAttributeMappingAccess().getIsMultivaluedAsteriskKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleAttributeMappingRule());
	        }
       		setWithLastConsumed($current, "isMultivalued", true, "*");
	    }

)
)?	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSimpleAttributeMappingAccess().getColonKeyword_3());
    }
(
(
		lv_type_4_0=RULE_ID
		{
			newLeafNode(lv_type_4_0, grammarAccess.getSimpleAttributeMappingAccess().getTypeIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleAttributeMappingRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"ID");
	    }

)
)(	otherlv_5='constructor' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSimpleAttributeMappingAccess().getConstructorKeyword_5_0());
    }
	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSimpleAttributeMappingAccess().getColonKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleAttributeMappingAccess().getConstructorTypeQualifiedNameParserRuleCall_5_2_0()); 
	    }
		lv_constructorType_7_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleAttributeMappingRule());
	        }
       		set(
       			$current, 
       			"constructorType",
        		lv_constructorType_7_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_8='get' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSimpleAttributeMappingAccess().getGetKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleAttributeMappingAccess().getGetMethodGetMechanismParserRuleCall_6_1_0()); 
	    }
		lv_getMethod_9_0=ruleGetMechanism		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleAttributeMappingRule());
	        }
       		set(
       			$current, 
       			"getMethod",
        		lv_getMethod_9_0, 
        		"GetMechanism");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_10='set' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSimpleAttributeMappingAccess().getSetKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleAttributeMappingAccess().getSetMethodSetMechanismParserRuleCall_7_1_0()); 
	    }
		lv_setMethod_11_0=ruleSetMechanism		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleAttributeMappingRule());
	        }
       		set(
       			$current, 
       			"setMethod",
        		lv_setMethod_11_0, 
        		"SetMechanism");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleSimpleReferenceMapping
entryRuleSimpleReferenceMapping returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleReferenceMappingRule()); }
	 iv_ruleSimpleReferenceMapping=ruleSimpleReferenceMapping 
	 { $current=$iv_ruleSimpleReferenceMapping.current; } 
	 EOF 
;

// Rule SimpleReferenceMapping
ruleSimpleReferenceMapping returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ref' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSimpleReferenceMappingAccess().getRefKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleReferenceMappingAccess().getFeatureNameEStringParserRuleCall_1_0()); 
	    }
		lv_featureName_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleReferenceMappingRule());
	        }
       		set(
       			$current, 
       			"featureName",
        		lv_featureName_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_isMultivalued_2_0=	'*' 
    {
        newLeafNode(lv_isMultivalued_2_0, grammarAccess.getSimpleReferenceMappingAccess().getIsMultivaluedAsteriskKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleReferenceMappingRule());
	        }
       		setWithLastConsumed($current, "isMultivalued", true, "*");
	    }

)
)?	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSimpleReferenceMappingAccess().getColonKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimpleReferenceMappingRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getSimpleReferenceMappingAccess().getTypeClassMappingCrossReference_4_0()); 
	}

)
)(	otherlv_5='constructor' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSimpleReferenceMappingAccess().getConstructorKeyword_5_0());
    }
	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSimpleReferenceMappingAccess().getColonKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleReferenceMappingAccess().getConstructorTypeQualifiedNameParserRuleCall_5_2_0()); 
	    }
		lv_constructorType_7_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleReferenceMappingRule());
	        }
       		set(
       			$current, 
       			"constructorType",
        		lv_constructorType_7_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_8='get' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSimpleReferenceMappingAccess().getGetKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleReferenceMappingAccess().getGetMethodGetMechanismParserRuleCall_6_1_0()); 
	    }
		lv_getMethod_9_0=ruleGetMechanism		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleReferenceMappingRule());
	        }
       		set(
       			$current, 
       			"getMethod",
        		lv_getMethod_9_0, 
        		"GetMechanism");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_10='set' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSimpleReferenceMappingAccess().getSetKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleReferenceMappingAccess().getSetMethodSetMechanismParserRuleCall_7_1_0()); 
	    }
		lv_setMethod_11_0=ruleSetMechanism		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleReferenceMappingRule());
	        }
       		set(
       			$current, 
       			"setMethod",
        		lv_setMethod_11_0, 
        		"SetMechanism");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleGetMechanism
entryRuleGetMechanism returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGetMechanismRule()); }
	 iv_ruleGetMechanism=ruleGetMechanism 
	 { $current=$iv_ruleGetMechanism.current; } 
	 EOF 
;

// Rule GetMechanism
ruleGetMechanism returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGetMechanismAccess().getSimpleGetParserRuleCall_0()); 
    }
    this_SimpleGet_0=ruleSimpleGet
    { 
        $current = $this_SimpleGet_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGetMechanismAccess().getGenericGetParserRuleCall_1()); 
    }
    this_GenericGet_1=ruleGenericGet
    { 
        $current = $this_GenericGet_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGetMechanismAccess().getIteratorGetParserRuleCall_2()); 
    }
    this_IteratorGet_2=ruleIteratorGet
    { 
        $current = $this_IteratorGet_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSetMechanism
entryRuleSetMechanism returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSetMechanismRule()); }
	 iv_ruleSetMechanism=ruleSetMechanism 
	 { $current=$iv_ruleSetMechanism.current; } 
	 EOF 
;

// Rule SetMechanism
ruleSetMechanism returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSetMechanismAccess().getSimpleSetParserRuleCall_0()); 
    }
    this_SimpleSet_0=ruleSimpleSet
    { 
        $current = $this_SimpleSet_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSetMechanismAccess().getGenericSetParserRuleCall_1()); 
    }
    this_GenericSet_1=ruleGenericSet
    { 
        $current = $this_GenericSet_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSimpleGet
entryRuleSimpleGet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleGetRule()); }
	 iv_ruleSimpleGet=ruleSimpleGet 
	 { $current=$iv_ruleSimpleGet.current; } 
	 EOF 
;

// Rule SimpleGet
ruleSimpleGet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='method' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSimpleGetAccess().getMethodKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleGetAccess().getGetterMethodParserRuleCall_1_0()); 
	    }
		lv_getter_1_0=ruleMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleGetRule());
	        }
       		set(
       			$current, 
       			"getter",
        		lv_getter_1_0, 
        		"Method");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSimpleSet
entryRuleSimpleSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleSetRule()); }
	 iv_ruleSimpleSet=ruleSimpleSet 
	 { $current=$iv_ruleSimpleSet.current; } 
	 EOF 
;

// Rule SimpleSet
ruleSimpleSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='method' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSimpleSetAccess().getMethodKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleSetAccess().getSetterMethodParserRuleCall_1_0()); 
	    }
		lv_setter_1_0=ruleMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleSetRule());
	        }
       		set(
       			$current, 
       			"setter",
        		lv_setter_1_0, 
        		"Method");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleGenericGet
entryRuleGenericGet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGenericGetRule()); }
	 iv_ruleGenericGet=ruleGenericGet 
	 { $current=$iv_ruleGenericGet.current; } 
	 EOF 
;

// Rule GenericGet
ruleGenericGet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='generic' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGenericGetAccess().getGenericKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGenericGetAccess().getGetterMethodParserRuleCall_1_0()); 
	    }
		lv_getter_1_0=ruleMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenericGetRule());
	        }
       		set(
       			$current, 
       			"getter",
        		lv_getter_1_0, 
        		"Method");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleGenericSet
entryRuleGenericSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGenericSetRule()); }
	 iv_ruleGenericSet=ruleGenericSet 
	 { $current=$iv_ruleGenericSet.current; } 
	 EOF 
;

// Rule GenericSet
ruleGenericSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='generic' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGenericSetAccess().getGenericKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGenericSetAccess().getSetterMethodParserRuleCall_1_0()); 
	    }
		lv_setter_1_0=ruleMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenericSetRule());
	        }
       		set(
       			$current, 
       			"setter",
        		lv_setter_1_0, 
        		"Method");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIteratorGet
entryRuleIteratorGet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIteratorGetRule()); }
	 iv_ruleIteratorGet=ruleIteratorGet 
	 { $current=$iv_ruleIteratorGet.current; } 
	 EOF 
;

// Rule IteratorGet
ruleIteratorGet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='iterator' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIteratorGetAccess().getIteratorKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIteratorGetRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getIteratorGetAccess().getIteratorIteratorDescriptionCrossReference_1_0()); 
	}

)
)	otherlv_2='method' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIteratorGetAccess().getMethodKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIteratorGetAccess().getGetIteratorMethodParserRuleCall_3_0()); 
	    }
		lv_getIterator_3_0=ruleMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIteratorGetRule());
	        }
       		set(
       			$current, 
       			"getIterator",
        		lv_getIterator_3_0, 
        		"Method");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDeclaredElement
entryRuleDeclaredElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclaredElementRule()); }
	 iv_ruleDeclaredElement=ruleDeclaredElement 
	 { $current=$iv_ruleDeclaredElement.current; } 
	 EOF 
;

// Rule DeclaredElement
ruleDeclaredElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDeclaredElementAccess().getIteratorDescriptionParserRuleCall_0()); 
    }
    this_IteratorDescription_0=ruleIteratorDescription
    { 
        $current = $this_IteratorDescription_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclaredElementAccess().getObserverDescriptionParserRuleCall_1()); 
    }
    this_ObserverDescription_1=ruleObserverDescription
    { 
        $current = $this_ObserverDescription_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIteratorDescription
entryRuleIteratorDescription returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIteratorDescriptionRule()); }
	 iv_ruleIteratorDescription=ruleIteratorDescription 
	 { $current=$iv_ruleIteratorDescription.current; } 
	 EOF 
;

// Rule IteratorDescription
ruleIteratorDescription returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='iterator' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIteratorDescriptionAccess().getIteratorKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getIteratorDescriptionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIteratorDescriptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIteratorDescriptionAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIteratorDescriptionAccess().getIteratorClassQualifiedNameParserRuleCall_3_0()); 
	    }
		lv_iteratorClass_3_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIteratorDescriptionRule());
	        }
       		set(
       			$current, 
       			"iteratorClass",
        		lv_iteratorClass_3_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIteratorDescriptionAccess().getLeftCurlyBracketKeyword_4());
    }
	otherlv_5='finished' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIteratorDescriptionAccess().getFinishedKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIteratorDescriptionAccess().getHasFinishedMethodParserRuleCall_6_0()); 
	    }
		lv_hasFinished_6_0=ruleMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIteratorDescriptionRule());
	        }
       		set(
       			$current, 
       			"hasFinished",
        		lv_hasFinished_6_0, 
        		"Method");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='next' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getIteratorDescriptionAccess().getNextKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIteratorDescriptionAccess().getNextElementMethodParserRuleCall_8_0()); 
	    }
		lv_nextElement_8_0=ruleMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIteratorDescriptionRule());
	        }
       		set(
       			$current, 
       			"nextElement",
        		lv_nextElement_8_0, 
        		"Method");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getIteratorDescriptionAccess().getRightCurlyBracketKeyword_9());
    }
)
;





// Entry rule entryRuleObserverDescription
entryRuleObserverDescription returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getObserverDescriptionRule()); }
	 iv_ruleObserverDescription=ruleObserverDescription 
	 { $current=$iv_ruleObserverDescription.current; } 
	 EOF 
;

// Rule ObserverDescription
ruleObserverDescription returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='observer' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getObserverDescriptionAccess().getObserverKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getObserverDescriptionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getObserverDescriptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getObserverDescriptionAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getObserverDescriptionAccess().getObserverClassQualifiedNameParserRuleCall_3_0()); 
	    }
		lv_observerClass_3_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObserverDescriptionRule());
	        }
       		set(
       			$current, 
       			"observerClass",
        		lv_observerClass_3_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getObserverDescriptionAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getObserverDescriptionAccess().getUpdateMethodsUpdateMethodParserRuleCall_5_0()); 
	    }
		lv_updateMethods_5_0=ruleUpdateMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObserverDescriptionRule());
	        }
       		add(
       			$current, 
       			"updateMethods",
        		lv_updateMethods_5_0, 
        		"UpdateMethod");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getObserverDescriptionAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleUpdateMethod
entryRuleUpdateMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUpdateMethodRule()); }
	 iv_ruleUpdateMethod=ruleUpdateMethod 
	 { $current=$iv_ruleUpdateMethod.current; } 
	 EOF 
;

// Rule UpdateMethod
ruleUpdateMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='update' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUpdateMethodAccess().getUpdateKeyword_0());
    }
(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUpdateMethodAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		lv_interest_2_0=RULE_INT
		{
			newLeafNode(lv_interest_2_0, grammarAccess.getUpdateMethodAccess().getInterestINTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUpdateMethodRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"interest",
        		lv_interest_2_0, 
        		"INT");
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUpdateMethodAccess().getCommaKeyword_1_2_0());
    }
(
(
		lv_interest_4_0=RULE_INT
		{
			newLeafNode(lv_interest_4_0, grammarAccess.getUpdateMethodAccess().getInterestINTTerminalRuleCall_1_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUpdateMethodRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"interest",
        		lv_interest_4_0, 
        		"INT");
	    }

)
))*	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getUpdateMethodAccess().getRightSquareBracketKeyword_1_3());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateMethodAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_6_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateMethodRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_6_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='(' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getUpdateMethodAccess().getLeftParenthesisKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateMethodAccess().getParameterTypesQualifiedNameParserRuleCall_4_0_0()); 
	    }
		lv_parameterTypes_8_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateMethodRule());
	        }
       		add(
       			$current, 
       			"parameterTypes",
        		lv_parameterTypes_8_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getUpdateMethodAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateMethodAccess().getParameterTypesQualifiedNameParserRuleCall_4_1_1_0()); 
	    }
		lv_parameterTypes_10_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateMethodRule());
	        }
       		add(
       			$current, 
       			"parameterTypes",
        		lv_parameterTypes_10_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getUpdateMethodAccess().getRightParenthesisKeyword_5());
    }
	otherlv_12=':' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getUpdateMethodAccess().getColonKeyword_6());
    }
(((
(
		lv_returnArray_13_0=	'Array' 
    {
        newLeafNode(lv_returnArray_13_0, grammarAccess.getUpdateMethodAccess().getReturnArrayArrayKeyword_7_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUpdateMethodRule());
	        }
       		setWithLastConsumed($current, "returnArray", true, "Array");
	    }

)
)	otherlv_14='<' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getUpdateMethodAccess().getLessThanSignKeyword_7_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateMethodAccess().getReturnTypeQualifiedNameParserRuleCall_7_0_2_0()); 
	    }
		lv_returnType_15_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateMethodRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_15_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_16='>' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getUpdateMethodAccess().getGreaterThanSignKeyword_7_0_3());
    }
)
    |((
(
		lv_returnCollection_17_0=	'Collection' 
    {
        newLeafNode(lv_returnCollection_17_0, grammarAccess.getUpdateMethodAccess().getReturnCollectionCollectionKeyword_7_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUpdateMethodRule());
	        }
       		setWithLastConsumed($current, "returnCollection", true, "Collection");
	    }

)
)	otherlv_18='<' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getUpdateMethodAccess().getLessThanSignKeyword_7_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateMethodAccess().getReturnTypeQualifiedNameParserRuleCall_7_1_2_0()); 
	    }
		lv_returnType_19_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateMethodRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_19_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_20='>' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getUpdateMethodAccess().getGreaterThanSignKeyword_7_1_3());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateMethodAccess().getReturnTypeQualifiedNameParserRuleCall_7_2_0()); 
	    }
		lv_returnType_21_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateMethodRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_21_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_returnVoid_22_0=	'void' 
    {
        newLeafNode(lv_returnVoid_22_0, grammarAccess.getUpdateMethodAccess().getReturnVoidVoidKeyword_7_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUpdateMethodRule());
	        }
       		setWithLastConsumed($current, "returnVoid", true, "void");
	    }

)
)))
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	 iv_ruleMethod=ruleMethod 
	 { $current=$iv_ruleMethod.current; } 
	 EOF 
;

// Rule Method
ruleMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getNameEStringParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMethodAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getParameterTypesQualifiedNameParserRuleCall_2_0_0()); 
	    }
		lv_parameterTypes_2_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"parameterTypes",
        		lv_parameterTypes_2_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMethodAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getParameterTypesQualifiedNameParserRuleCall_2_1_1_0()); 
	    }
		lv_parameterTypes_4_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"parameterTypes",
        		lv_parameterTypes_4_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMethodAccess().getRightParenthesisKeyword_3());
    }
	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMethodAccess().getColonKeyword_4());
    }
(((
(
		lv_returnArray_7_0=	'Array' 
    {
        newLeafNode(lv_returnArray_7_0, grammarAccess.getMethodAccess().getReturnArrayArrayKeyword_5_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
       		setWithLastConsumed($current, "returnArray", true, "Array");
	    }

)
)	otherlv_8='<' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMethodAccess().getLessThanSignKeyword_5_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getReturnTypeQualifiedNameParserRuleCall_5_0_2_0()); 
	    }
		lv_returnType_9_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_9_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10='>' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getMethodAccess().getGreaterThanSignKeyword_5_0_3());
    }
)
    |((
(
		lv_returnCollection_11_0=	'Collection' 
    {
        newLeafNode(lv_returnCollection_11_0, grammarAccess.getMethodAccess().getReturnCollectionCollectionKeyword_5_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
       		setWithLastConsumed($current, "returnCollection", true, "Collection");
	    }

)
)	otherlv_12='<' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getMethodAccess().getLessThanSignKeyword_5_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getReturnTypeQualifiedNameParserRuleCall_5_1_2_0()); 
	    }
		lv_returnType_13_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_13_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_14='>' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getMethodAccess().getGreaterThanSignKeyword_5_1_3());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getReturnTypeQualifiedNameParserRuleCall_5_2_0()); 
	    }
		lv_returnType_15_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_15_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		lv_returnVoid_16_0=	'void' 
    {
        newLeafNode(lv_returnVoid_16_0, grammarAccess.getMethodAccess().getReturnVoidVoidKeyword_5_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
       		setWithLastConsumed($current, "returnVoid", true, "void");
	    }

)
)))
;





// Entry rule entryRuleEBoolean
entryRuleEBoolean returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEBooleanRule()); } 
	 iv_ruleEBoolean=ruleEBoolean 
	 { $current=$iv_ruleEBoolean.current.getText(); }  
	 EOF 
;

// Rule EBoolean
ruleEBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEBooleanAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEBooleanAccess().getFalseKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(((
	'.' 
)=>
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
)    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;









RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


