/*
* generated by Xtext
*/
grammar InternalExpressions;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package org.eclectic.frontend.syntax.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclectic.frontend.syntax.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclectic.frontend.syntax.services.ExpressionsGrammarAccess;

}

@parser::members {
 
 	private ExpressionsGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ExpressionsGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleTraceInterface
entryRuleTraceInterface 
:
{ before(grammarAccess.getTraceInterfaceRule()); }
	 ruleTraceInterface
{ after(grammarAccess.getTraceInterfaceRule()); } 
	 EOF 
;

// Rule TraceInterface
ruleTraceInterface
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTraceInterfaceAccess().getGroup()); }
(rule__TraceInterface__Group__0)
{ after(grammarAccess.getTraceInterfaceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTraceDefinition
entryRuleTraceDefinition 
:
{ before(grammarAccess.getTraceDefinitionRule()); }
	 ruleTraceDefinition
{ after(grammarAccess.getTraceDefinitionRule()); } 
	 EOF 
;

// Rule TraceDefinition
ruleTraceDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTraceDefinitionAccess().getGroup()); }
(rule__TraceDefinition__Group__0)
{ after(grammarAccess.getTraceDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTraceElementInline
entryRuleTraceElementInline 
:
{ before(grammarAccess.getTraceElementInlineRule()); }
	 ruleTraceElementInline
{ after(grammarAccess.getTraceElementInlineRule()); } 
	 EOF 
;

// Rule TraceElementInline
ruleTraceElementInline
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTraceElementInlineAccess().getGroup()); }
(rule__TraceElementInline__Group__0)
{ after(grammarAccess.getTraceElementInlineAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTraceElementExpanded
entryRuleTraceElementExpanded 
:
{ before(grammarAccess.getTraceElementExpandedRule()); }
	 ruleTraceElementExpanded
{ after(grammarAccess.getTraceElementExpandedRule()); } 
	 EOF 
;

// Rule TraceElementExpanded
ruleTraceElementExpanded
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTraceElementExpandedAccess().getGroup()); }
(rule__TraceElementExpanded__Group__0)
{ after(grammarAccess.getTraceElementExpandedAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeExpression
entryRuleTypeExpression 
:
{ before(grammarAccess.getTypeExpressionRule()); }
	 ruleTypeExpression
{ after(grammarAccess.getTypeExpressionRule()); } 
	 EOF 
;

// Rule TypeExpression
ruleTypeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeExpressionAccess().getClassUseParserRuleCall()); }
	ruleClassUse
{ after(grammarAccess.getTypeExpressionAccess().getClassUseParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClassUse
entryRuleClassUse 
:
{ before(grammarAccess.getClassUseRule()); }
	 ruleClassUse
{ after(grammarAccess.getClassUseRule()); } 
	 EOF 
;

// Rule ClassUse
ruleClassUse
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassUseAccess().getGroup()); }
(rule__ClassUse__Group__0)
{ after(grammarAccess.getClassUseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSingleAnnotation
entryRuleSingleAnnotation 
:
{ before(grammarAccess.getSingleAnnotationRule()); }
	 ruleSingleAnnotation
{ after(grammarAccess.getSingleAnnotationRule()); } 
	 EOF 
;

// Rule SingleAnnotation
ruleSingleAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSingleAnnotationAccess().getPotencyAnnotationParserRuleCall()); }
	rulePotencyAnnotation
{ after(grammarAccess.getSingleAnnotationAccess().getPotencyAnnotationParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePotencyAnnotation
entryRulePotencyAnnotation 
:
{ before(grammarAccess.getPotencyAnnotationRule()); }
	 rulePotencyAnnotation
{ after(grammarAccess.getPotencyAnnotationRule()); } 
	 EOF 
;

// Rule PotencyAnnotation
rulePotencyAnnotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPotencyAnnotationAccess().getGroup()); }
(rule__PotencyAnnotation__Group__0)
{ after(grammarAccess.getPotencyAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getAlternatives()); }
(rule__Statement__Alternatives)
{ after(grammarAccess.getStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePropertyWrite
entryRulePropertyWrite 
:
{ before(grammarAccess.getPropertyWriteRule()); }
	 rulePropertyWrite
{ after(grammarAccess.getPropertyWriteRule()); } 
	 EOF 
;

// Rule PropertyWrite
rulePropertyWrite
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyWriteAccess().getGroup()); }
(rule__PropertyWrite__Group__0)
{ after(grammarAccess.getPropertyWriteAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDefineVariable
entryRuleDefineVariable 
:
{ before(grammarAccess.getDefineVariableRule()); }
	 ruleDefineVariable
{ after(grammarAccess.getDefineVariableRule()); } 
	 EOF 
;

// Rule DefineVariable
ruleDefineVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDefineVariableAccess().getGroup()); }
(rule__DefineVariable__Group__0)
{ after(grammarAccess.getDefineVariableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModelReference
entryRuleModelReference 
:
{ before(grammarAccess.getModelReferenceRule()); }
	 ruleModelReference
{ after(grammarAccess.getModelReferenceRule()); } 
	 EOF 
;

// Rule ModelReference
ruleModelReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelReferenceAccess().getGroup()); }
(rule__ModelReference__Group__0)
{ after(grammarAccess.getModelReferenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getMethodCallParserRuleCall()); }
	ruleMethodCall
{ after(grammarAccess.getExpressionAccess().getMethodCallParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression 
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
(rule__PrimaryExpression__Alternatives)
{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfExpr
entryRuleIfExpr 
:
{ before(grammarAccess.getIfExprRule()); }
	 ruleIfExpr
{ after(grammarAccess.getIfExprRule()); } 
	 EOF 
;

// Rule IfExpr
ruleIfExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfExprAccess().getGroup()); }
(rule__IfExpr__Group__0)
{ after(grammarAccess.getIfExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConditionBranch
entryRuleConditionBranch 
:
{ before(grammarAccess.getConditionBranchRule()); }
	 ruleConditionBranch
{ after(grammarAccess.getConditionBranchRule()); } 
	 EOF 
;

// Rule ConditionBranch
ruleConditionBranch
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionBranchAccess().getGroup()); }
(rule__ConditionBranch__Group__0)
{ after(grammarAccess.getConditionBranchAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBranchBranch
entryRuleBranchBranch 
:
{ before(grammarAccess.getBranchBranchRule()); }
	 ruleBranchBranch
{ after(grammarAccess.getBranchBranchRule()); } 
	 EOF 
;

// Rule BranchBranch
ruleBranchBranch
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getBranchBranchAccess().getStatementsAssignment()); }
(rule__BranchBranch__StatementsAssignment)
{ after(grammarAccess.getBranchBranchAccess().getStatementsAssignment()); }
)
(
{ before(grammarAccess.getBranchBranchAccess().getStatementsAssignment()); }
(rule__BranchBranch__StatementsAssignment)*
{ after(grammarAccess.getBranchBranchAccess().getStatementsAssignment()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParenthesizedExpression
entryRuleParenthesizedExpression 
:
{ before(grammarAccess.getParenthesizedExpressionRule()); }
	 ruleParenthesizedExpression
{ after(grammarAccess.getParenthesizedExpressionRule()); } 
	 EOF 
;

// Rule ParenthesizedExpression
ruleParenthesizedExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getGroup()); }
(rule__ParenthesizedExpression__Group__0)
{ after(grammarAccess.getParenthesizedExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableReference
entryRuleVariableReference 
:
{ before(grammarAccess.getVariableReferenceRule()); }
	 ruleVariableReference
{ after(grammarAccess.getVariableReferenceRule()); } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableReferenceAccess().getVariableAssignment()); }
(rule__VariableReference__VariableAssignment)
{ after(grammarAccess.getVariableReferenceAccess().getVariableAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClosureDeclaration
entryRuleClosureDeclaration 
:
{ before(grammarAccess.getClosureDeclarationRule()); }
	 ruleClosureDeclaration
{ after(grammarAccess.getClosureDeclarationRule()); } 
	 EOF 
;

// Rule ClosureDeclaration
ruleClosureDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClosureDeclarationAccess().getGroup()); }
(rule__ClosureDeclaration__Group__0)
{ after(grammarAccess.getClosureDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClosureParameter
entryRuleClosureParameter 
:
{ before(grammarAccess.getClosureParameterRule()); }
	 ruleClosureParameter
{ after(grammarAccess.getClosureParameterRule()); } 
	 EOF 
;

// Rule ClosureParameter
ruleClosureParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClosureParameterAccess().getNameAssignment()); }
(rule__ClosureParameter__NameAssignment)
{ after(grammarAccess.getClosureParameterAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMethodCall
entryRuleMethodCall 
:
{ before(grammarAccess.getMethodCallRule()); }
	 ruleMethodCall
{ after(grammarAccess.getMethodCallRule()); } 
	 EOF 
;

// Rule MethodCall
ruleMethodCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMethodCallAccess().getGroup()); }
(rule__MethodCall__Group__0)
{ after(grammarAccess.getMethodCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleMatchTraceExpression
entryRuleMatchTraceExpression 
:
{ before(grammarAccess.getMatchTraceExpressionRule()); }
	 ruleMatchTraceExpression
{ after(grammarAccess.getMatchTraceExpressionRule()); } 
	 EOF 
;

// Rule MatchTraceExpression
ruleMatchTraceExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMatchTraceExpressionAccess().getGroup()); }
(rule__MatchTraceExpression__Group__0)
{ after(grammarAccess.getMatchTraceExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTraceExprLanguage
entryRuleTraceExprLanguage 
:
{ before(grammarAccess.getTraceExprLanguageRule()); }
	 ruleTraceExprLanguage
{ after(grammarAccess.getTraceExprLanguageRule()); } 
	 EOF 
;

// Rule TraceExprLanguage
ruleTraceExprLanguage
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTraceExprLanguageAccess().getGroup()); }
(rule__TraceExprLanguage__Group__0)
{ after(grammarAccess.getTraceExprLanguageAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePutTraceExpression
entryRulePutTraceExpression 
:
{ before(grammarAccess.getPutTraceExpressionRule()); }
	 rulePutTraceExpression
{ after(grammarAccess.getPutTraceExpressionRule()); } 
	 EOF 
;

// Rule PutTraceExpression
rulePutTraceExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPutTraceExpressionAccess().getGroup()); }
(rule__PutTraceExpression__Group__0)
{ after(grammarAccess.getPutTraceExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePutTraceParameter
entryRulePutTraceParameter 
:
{ before(grammarAccess.getPutTraceParameterRule()); }
	 rulePutTraceParameter
{ after(grammarAccess.getPutTraceParameterRule()); } 
	 EOF 
;

// Rule PutTraceParameter
rulePutTraceParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPutTraceParameterAccess().getGroup()); }
(rule__PutTraceParameter__Group__0)
{ after(grammarAccess.getPutTraceParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumLiteral
entryRuleNumLiteral 
:
{ before(grammarAccess.getNumLiteralRule()); }
	 ruleNumLiteral
{ after(grammarAccess.getNumLiteralRule()); } 
	 EOF 
;

// Rule NumLiteral
ruleNumLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumLiteralAccess().getValueAssignment()); }
(rule__NumLiteral__ValueAssignment)
{ after(grammarAccess.getNumLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloatLiteral
entryRuleFloatLiteral 
:
{ before(grammarAccess.getFloatLiteralRule()); }
	 ruleFloatLiteral
{ after(grammarAccess.getFloatLiteralRule()); } 
	 EOF 
;

// Rule FloatLiteral
ruleFloatLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFloatLiteralAccess().getValueAssignment()); }
(rule__FloatLiteral__ValueAssignment)
{ after(grammarAccess.getFloatLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEDouble
entryRuleEDouble 
:
{ before(grammarAccess.getEDoubleRule()); }
	 ruleEDouble
{ after(grammarAccess.getEDoubleRule()); } 
	 EOF 
;

// Rule EDouble
ruleEDouble
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEDoubleAccess().getGroup()); }
(rule__EDouble__Group__0)
{ after(grammarAccess.getEDoubleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringLiteral
entryRuleStringLiteral 
:
{ before(grammarAccess.getStringLiteralRule()); }
	 ruleStringLiteral
{ after(grammarAccess.getStringLiteralRule()); } 
	 EOF 
;

// Rule StringLiteral
ruleStringLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
(rule__StringLiteral__ValueAssignment)
{ after(grammarAccess.getStringLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral 
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
(rule__BooleanLiteral__ValueAssignment)
{ after(grammarAccess.getBooleanLiteralAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEString
entryRuleEString 
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEStringAccess().getAlternatives()); }
(rule__EString__Alternatives)
{ after(grammarAccess.getEStringAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEInt
entryRuleEInt 
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEIntAccess().getGroup()); }
(rule__EInt__Group__0)
{ after(grammarAccess.getEIntAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEBoolean
entryRuleEBoolean 
:
{ before(grammarAccess.getEBooleanRule()); }
	 ruleEBoolean
{ after(grammarAccess.getEBooleanRule()); } 
	 EOF 
;

// Rule EBoolean
ruleEBoolean
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEBooleanAccess().getAlternatives()); }
(rule__EBoolean__Alternatives)
{ after(grammarAccess.getEBooleanAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}






// Rule BinaryOp
ruleBinaryOp
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryOpAccess().getAlternatives()); }
(rule__BinaryOp__Alternatives)
{ after(grammarAccess.getBinaryOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__TraceDefinition__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceDefinitionAccess().getGroup_2_0()); }
(rule__TraceDefinition__Group_2_0__0)
{ after(grammarAccess.getTraceDefinitionAccess().getGroup_2_0()); }
)

    |(
{ before(grammarAccess.getTraceDefinitionAccess().getGroup_2_1()); }
(rule__TraceDefinition__Group_2_1__0)
{ after(grammarAccess.getTraceDefinitionAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PotencyAnnotation__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPotencyAnnotationAccess().getCommercialAtKeyword_0_0()); }

	'@' 

{ after(grammarAccess.getPotencyAnnotationAccess().getCommercialAtKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getPotencyAnnotationAccess().getCircumflexAccentKeyword_0_1()); }

	'^' 

{ after(grammarAccess.getPotencyAnnotationAccess().getCircumflexAccentKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getDefineVariableParserRuleCall_0()); }
	ruleDefineVariable
{ after(grammarAccess.getStatementAccess().getDefineVariableParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getExpressionParserRuleCall_1()); }
	ruleExpression
{ after(grammarAccess.getStatementAccess().getExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getPutTraceExpressionParserRuleCall_2()); }
	rulePutTraceExpression
{ after(grammarAccess.getStatementAccess().getPutTraceExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getPropertyWriteParserRuleCall_3()); }
	rulePropertyWrite
{ after(grammarAccess.getStatementAccess().getPropertyWriteParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0()); }
	ruleLiteral
{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getVariableReferenceParserRuleCall_1()); }
	ruleVariableReference
{ after(grammarAccess.getPrimaryExpressionAccess().getVariableReferenceParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getModelReferenceParserRuleCall_2()); }
	ruleModelReference
{ after(grammarAccess.getPrimaryExpressionAccess().getModelReferenceParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_3()); }
	ruleParenthesizedExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getParenthesizedExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getMatchTraceExpressionParserRuleCall_4()); }
	ruleMatchTraceExpression
{ after(grammarAccess.getPrimaryExpressionAccess().getMatchTraceExpressionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getClosureDeclarationParserRuleCall_5()); }
	ruleClosureDeclaration
{ after(grammarAccess.getPrimaryExpressionAccess().getClosureDeclarationParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getPrimaryExpressionAccess().getIfExprParserRuleCall_6()); }
	ruleIfExpr
{ after(grammarAccess.getPrimaryExpressionAccess().getIfExprParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getFloatLiteralParserRuleCall_0()); }
	ruleFloatLiteral
{ after(grammarAccess.getLiteralAccess().getFloatLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getNumLiteralParserRuleCall_1()); }
	ruleNumLiteral
{ after(grammarAccess.getLiteralAccess().getNumLiteralParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); }
	ruleStringLiteral
{ after(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_3()); }
	ruleBooleanLiteral
{ after(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getGroup_1_0()); }
(rule__MethodCall__Group_1_0__0)
{ after(grammarAccess.getMethodCallAccess().getGroup_1_0()); }
)

    |(
(
{ before(grammarAccess.getMethodCallAccess().getGroup_1_1()); }
(rule__MethodCall__Group_1_1__0)
{ after(grammarAccess.getMethodCallAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getMethodCallAccess().getGroup_1_1()); }
(rule__MethodCall__Group_1_1__0)*
{ after(grammarAccess.getMethodCallAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EString__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EBoolean__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEBooleanAccess().getTrueKeyword_0()); }

	'true' 

{ after(grammarAccess.getEBooleanAccess().getTrueKeyword_0()); }
)

    |(
{ before(grammarAccess.getEBooleanAccess().getFalseKeyword_1()); }

	'false' 

{ after(grammarAccess.getEBooleanAccess().getFalseKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryOpAccess().getADDEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getBinaryOpAccess().getADDEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getBinaryOpAccess().getSUBEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getBinaryOpAccess().getSUBEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getBinaryOpAccess().getMULEnumLiteralDeclaration_2()); }
(	'*' 
)
{ after(grammarAccess.getBinaryOpAccess().getMULEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getBinaryOpAccess().getDIVEnumLiteralDeclaration_3()); }
(	'/' 
)
{ after(grammarAccess.getBinaryOpAccess().getDIVEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__TraceInterface__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceInterface__Group__0__Impl
	rule__TraceInterface__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceInterface__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceInterfaceAccess().getTraceKeyword_0()); }

	'trace' 

{ after(grammarAccess.getTraceInterfaceAccess().getTraceKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TraceInterface__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceInterface__Group__1__Impl
	rule__TraceInterface__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceInterface__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceInterfaceAccess().getNameAssignment_1()); }
(rule__TraceInterface__NameAssignment_1)
{ after(grammarAccess.getTraceInterfaceAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TraceInterface__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceInterface__Group__2__Impl
	rule__TraceInterface__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceInterface__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getTraceInterfaceAccess().getDefinitionsAssignment_2()); }
(rule__TraceInterface__DefinitionsAssignment_2)
{ after(grammarAccess.getTraceInterfaceAccess().getDefinitionsAssignment_2()); }
)
(
{ before(grammarAccess.getTraceInterfaceAccess().getDefinitionsAssignment_2()); }
(rule__TraceInterface__DefinitionsAssignment_2)*
{ after(grammarAccess.getTraceInterfaceAccess().getDefinitionsAssignment_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TraceInterface__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceInterface__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceInterface__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceInterfaceAccess().getEndKeyword_3()); }

	'end' 

{ after(grammarAccess.getTraceInterfaceAccess().getEndKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TraceDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceDefinition__Group__0__Impl
	rule__TraceDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceDefinitionAccess().getLinkKeyword_0()); }

	'link' 

{ after(grammarAccess.getTraceDefinitionAccess().getLinkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TraceDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceDefinition__Group__1__Impl
	rule__TraceDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceDefinitionAccess().getNameAssignment_1()); }
(rule__TraceDefinition__NameAssignment_1)
{ after(grammarAccess.getTraceDefinitionAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TraceDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceDefinition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceDefinitionAccess().getAlternatives_2()); }
(rule__TraceDefinition__Alternatives_2)
{ after(grammarAccess.getTraceDefinitionAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TraceDefinition__Group_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceDefinition__Group_2_0__0__Impl
	rule__TraceDefinition__Group_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceDefinition__Group_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceDefinitionAccess().getLeftCurlyBracketKeyword_2_0_0()); }

	'{' 

{ after(grammarAccess.getTraceDefinitionAccess().getLeftCurlyBracketKeyword_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TraceDefinition__Group_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceDefinition__Group_2_0__1__Impl
	rule__TraceDefinition__Group_2_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceDefinition__Group_2_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceDefinitionAccess().getElementsAssignment_2_0_1()); }
(rule__TraceDefinition__ElementsAssignment_2_0_1)
{ after(grammarAccess.getTraceDefinitionAccess().getElementsAssignment_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TraceDefinition__Group_2_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceDefinition__Group_2_0__2__Impl
	rule__TraceDefinition__Group_2_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceDefinition__Group_2_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceDefinitionAccess().getGroup_2_0_2()); }
(rule__TraceDefinition__Group_2_0_2__0)*
{ after(grammarAccess.getTraceDefinitionAccess().getGroup_2_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TraceDefinition__Group_2_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceDefinition__Group_2_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceDefinition__Group_2_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceDefinitionAccess().getRightCurlyBracketKeyword_2_0_3()); }

	'}' 

{ after(grammarAccess.getTraceDefinitionAccess().getRightCurlyBracketKeyword_2_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TraceDefinition__Group_2_0_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceDefinition__Group_2_0_2__0__Impl
	rule__TraceDefinition__Group_2_0_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceDefinition__Group_2_0_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceDefinitionAccess().getSemicolonKeyword_2_0_2_0()); }

	';' 

{ after(grammarAccess.getTraceDefinitionAccess().getSemicolonKeyword_2_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TraceDefinition__Group_2_0_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceDefinition__Group_2_0_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceDefinition__Group_2_0_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceDefinitionAccess().getElementsAssignment_2_0_2_1()); }
(rule__TraceDefinition__ElementsAssignment_2_0_2_1)
{ after(grammarAccess.getTraceDefinitionAccess().getElementsAssignment_2_0_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TraceDefinition__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceDefinition__Group_2_1__0__Impl
	rule__TraceDefinition__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceDefinition__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceDefinitionAccess().getElementsAssignment_2_1_0()); }
(rule__TraceDefinition__ElementsAssignment_2_1_0)
{ after(grammarAccess.getTraceDefinitionAccess().getElementsAssignment_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TraceDefinition__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceDefinition__Group_2_1__1__Impl
	rule__TraceDefinition__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceDefinition__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceDefinitionAccess().getElementsAssignment_2_1_1()); }
(rule__TraceDefinition__ElementsAssignment_2_1_1)*
{ after(grammarAccess.getTraceDefinitionAccess().getElementsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TraceDefinition__Group_2_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceDefinition__Group_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceDefinition__Group_2_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceDefinitionAccess().getEndKeyword_2_1_2()); }

	'end' 

{ after(grammarAccess.getTraceDefinitionAccess().getEndKeyword_2_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TraceElementInline__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceElementInline__Group__0__Impl
	rule__TraceElementInline__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceElementInline__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceElementInlineAccess().getNameAssignment_0()); }
(rule__TraceElementInline__NameAssignment_0)
{ after(grammarAccess.getTraceElementInlineAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TraceElementInline__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceElementInline__Group__1__Impl
	rule__TraceElementInline__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceElementInline__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceElementInlineAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getTraceElementInlineAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TraceElementInline__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceElementInline__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceElementInline__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceElementInlineAccess().getTypeAssignment_2()); }
(rule__TraceElementInline__TypeAssignment_2)
{ after(grammarAccess.getTraceElementInlineAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TraceElementExpanded__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceElementExpanded__Group__0__Impl
	rule__TraceElementExpanded__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceElementExpanded__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceElementExpandedAccess().getVarKeyword_0()); }

	'var' 

{ after(grammarAccess.getTraceElementExpandedAccess().getVarKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TraceElementExpanded__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceElementExpanded__Group__1__Impl
	rule__TraceElementExpanded__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceElementExpanded__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceElementExpandedAccess().getNameAssignment_1()); }
(rule__TraceElementExpanded__NameAssignment_1)
{ after(grammarAccess.getTraceElementExpandedAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TraceElementExpanded__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceElementExpanded__Group__2__Impl
	rule__TraceElementExpanded__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceElementExpanded__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceElementExpandedAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getTraceElementExpandedAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TraceElementExpanded__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceElementExpanded__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceElementExpanded__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceElementExpandedAccess().getTypeAssignment_3()); }
(rule__TraceElementExpanded__TypeAssignment_3)
{ after(grammarAccess.getTraceElementExpandedAccess().getTypeAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ClassUse__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassUse__Group__0__Impl
	rule__ClassUse__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassUse__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassUseAccess().getModelAssignment_0()); }
(rule__ClassUse__ModelAssignment_0)
{ after(grammarAccess.getClassUseAccess().getModelAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassUse__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassUse__Group__1__Impl
	rule__ClassUse__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassUse__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassUseAccess().getExclamationMarkKeyword_1()); }

	'!' 

{ after(grammarAccess.getClassUseAccess().getExclamationMarkKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassUse__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassUse__Group__2__Impl
	rule__ClassUse__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassUse__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassUseAccess().getClassNameAssignment_2()); }
(rule__ClassUse__ClassNameAssignment_2)
{ after(grammarAccess.getClassUseAccess().getClassNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassUse__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassUse__Group__3__Impl
	rule__ClassUse__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassUse__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassUseAccess().getAnnotationsAssignment_3()); }
(rule__ClassUse__AnnotationsAssignment_3)?
{ after(grammarAccess.getClassUseAccess().getAnnotationsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassUse__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassUse__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassUse__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassUseAccess().getStrictTypeAssignment_4()); }
(rule__ClassUse__StrictTypeAssignment_4)?
{ after(grammarAccess.getClassUseAccess().getStrictTypeAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__PotencyAnnotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PotencyAnnotation__Group__0__Impl
	rule__PotencyAnnotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PotencyAnnotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPotencyAnnotationAccess().getAlternatives_0()); }
(rule__PotencyAnnotation__Alternatives_0)
{ after(grammarAccess.getPotencyAnnotationAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PotencyAnnotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PotencyAnnotation__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PotencyAnnotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPotencyAnnotationAccess().getValueAssignment_1()); }
(rule__PotencyAnnotation__ValueAssignment_1)
{ after(grammarAccess.getPotencyAnnotationAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PropertyWrite__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyWrite__Group__0__Impl
	rule__PropertyWrite__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyWrite__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyWriteAccess().getReceptorAssignment_0()); }
(rule__PropertyWrite__ReceptorAssignment_0)
{ after(grammarAccess.getPropertyWriteAccess().getReceptorAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyWrite__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyWrite__Group__1__Impl
	rule__PropertyWrite__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyWrite__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyWriteAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getPropertyWriteAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyWrite__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyWrite__Group__2__Impl
	rule__PropertyWrite__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyWrite__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyWriteAccess().getPropertyAssignment_2()); }
(rule__PropertyWrite__PropertyAssignment_2)
{ after(grammarAccess.getPropertyWriteAccess().getPropertyAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyWrite__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyWrite__Group__3__Impl
	rule__PropertyWrite__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyWrite__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyWriteAccess().getEqualsSignKeyword_3()); }

	'=' 

{ after(grammarAccess.getPropertyWriteAccess().getEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PropertyWrite__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PropertyWrite__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyWrite__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyWriteAccess().getExpressionAssignment_4()); }
(rule__PropertyWrite__ExpressionAssignment_4)
{ after(grammarAccess.getPropertyWriteAccess().getExpressionAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__DefineVariable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineVariable__Group__0__Impl
	rule__DefineVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineVariable__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineVariableAccess().getNameAssignment_0()); }
(rule__DefineVariable__NameAssignment_0)
{ after(grammarAccess.getDefineVariableAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefineVariable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineVariable__Group__1__Impl
	rule__DefineVariable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineVariable__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineVariableAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getDefineVariableAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DefineVariable__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DefineVariable__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DefineVariable__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineVariableAccess().getExpressionAssignment_2()); }
(rule__DefineVariable__ExpressionAssignment_2)
{ after(grammarAccess.getDefineVariableAccess().getExpressionAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ModelReference__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelReference__Group__0__Impl
	rule__ModelReference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelReference__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelReferenceAccess().getModelAssignment_0()); }
(rule__ModelReference__ModelAssignment_0)
{ after(grammarAccess.getModelReferenceAccess().getModelAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModelReference__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelReference__Group__1__Impl
	rule__ModelReference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelReference__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelReferenceAccess().getExclamationMarkKeyword_1()); }

	'!' 

{ after(grammarAccess.getModelReferenceAccess().getExclamationMarkKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ModelReference__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ModelReference__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ModelReference__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelReferenceAccess().getClassNameAssignment_2()); }
(rule__ModelReference__ClassNameAssignment_2)
{ after(grammarAccess.getModelReferenceAccess().getClassNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__IfExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpr__Group__0__Impl
	rule__IfExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIfExprAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpr__Group__1__Impl
	rule__IfExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getThenAssignment_1()); }
(rule__IfExpr__ThenAssignment_1)
{ after(grammarAccess.getIfExprAccess().getThenAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpr__Group__2__Impl
	rule__IfExpr__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getGroup_2()); }
(rule__IfExpr__Group_2__0)*
{ after(grammarAccess.getIfExprAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpr__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpr__Group__3__Impl
	rule__IfExpr__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getGroup_3()); }
(rule__IfExpr__Group_3__0)?
{ after(grammarAccess.getIfExprAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpr__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpr__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getEndKeyword_4()); }

	'end' 

{ after(grammarAccess.getIfExprAccess().getEndKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__IfExpr__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpr__Group_2__0__Impl
	rule__IfExpr__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getElsifKeyword_2_0()); }

	'elsif' 

{ after(grammarAccess.getIfExprAccess().getElsifKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpr__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpr__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getElsifsAssignment_2_1()); }
(rule__IfExpr__ElsifsAssignment_2_1)
{ after(grammarAccess.getIfExprAccess().getElsifsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IfExpr__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpr__Group_3__0__Impl
	rule__IfExpr__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getElseKeyword_3_0()); }

	'else' 

{ after(grammarAccess.getIfExprAccess().getElseKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpr__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpr__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getElseAssignment_3_1()); }
(rule__IfExpr__ElseAssignment_3_1)
{ after(grammarAccess.getIfExprAccess().getElseAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ConditionBranch__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionBranch__Group__0__Impl
	rule__ConditionBranch__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionBranch__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionBranchAccess().getConditionAssignment_0()); }
(rule__ConditionBranch__ConditionAssignment_0)
{ after(grammarAccess.getConditionBranchAccess().getConditionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionBranch__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ConditionBranch__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionBranch__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getConditionBranchAccess().getStatementsAssignment_1()); }
(rule__ConditionBranch__StatementsAssignment_1)
{ after(grammarAccess.getConditionBranchAccess().getStatementsAssignment_1()); }
)
(
{ before(grammarAccess.getConditionBranchAccess().getStatementsAssignment_1()); }
(rule__ConditionBranch__StatementsAssignment_1)*
{ after(grammarAccess.getConditionBranchAccess().getStatementsAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParenthesizedExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group__0__Impl
	rule__ParenthesizedExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getParenthesizedExpressionAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group__1__Impl
	rule__ParenthesizedExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getExpressionParserRuleCall_1()); }
	ruleExpression
{ after(grammarAccess.getParenthesizedExpressionAccess().getExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParenthesizedExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParenthesizedExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParenthesizedExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getParenthesizedExpressionAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ClosureDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClosureDeclaration__Group__0__Impl
	rule__ClosureDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClosureDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosureDeclarationAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getClosureDeclarationAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClosureDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClosureDeclaration__Group__1__Impl
	rule__ClosureDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClosureDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosureDeclarationAccess().getGroup_1()); }
(rule__ClosureDeclaration__Group_1__0)?
{ after(grammarAccess.getClosureDeclarationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClosureDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClosureDeclaration__Group__2__Impl
	rule__ClosureDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ClosureDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getClosureDeclarationAccess().getStatementsAssignment_2()); }
(rule__ClosureDeclaration__StatementsAssignment_2)
{ after(grammarAccess.getClosureDeclarationAccess().getStatementsAssignment_2()); }
)
(
{ before(grammarAccess.getClosureDeclarationAccess().getStatementsAssignment_2()); }
(rule__ClosureDeclaration__StatementsAssignment_2)*
{ after(grammarAccess.getClosureDeclarationAccess().getStatementsAssignment_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClosureDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClosureDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClosureDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosureDeclarationAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getClosureDeclarationAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ClosureDeclaration__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClosureDeclaration__Group_1__0__Impl
	rule__ClosureDeclaration__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClosureDeclaration__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosureDeclarationAccess().getVerticalLineKeyword_1_0()); }

	'|' 

{ after(grammarAccess.getClosureDeclarationAccess().getVerticalLineKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClosureDeclaration__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClosureDeclaration__Group_1__1__Impl
	rule__ClosureDeclaration__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClosureDeclaration__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosureDeclarationAccess().getFormalParametersAssignment_1_1()); }
(rule__ClosureDeclaration__FormalParametersAssignment_1_1)
{ after(grammarAccess.getClosureDeclarationAccess().getFormalParametersAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClosureDeclaration__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClosureDeclaration__Group_1__2__Impl
	rule__ClosureDeclaration__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ClosureDeclaration__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosureDeclarationAccess().getGroup_1_2()); }
(rule__ClosureDeclaration__Group_1_2__0)*
{ after(grammarAccess.getClosureDeclarationAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClosureDeclaration__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClosureDeclaration__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClosureDeclaration__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosureDeclarationAccess().getVerticalLineKeyword_1_3()); }

	'|' 

{ after(grammarAccess.getClosureDeclarationAccess().getVerticalLineKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ClosureDeclaration__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClosureDeclaration__Group_1_2__0__Impl
	rule__ClosureDeclaration__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClosureDeclaration__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosureDeclarationAccess().getCommaKeyword_1_2_0()); }

	',' 

{ after(grammarAccess.getClosureDeclarationAccess().getCommaKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClosureDeclaration__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClosureDeclaration__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClosureDeclaration__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosureDeclarationAccess().getFormalParametersAssignment_1_2_1()); }
(rule__ClosureDeclaration__FormalParametersAssignment_1_2_1)
{ after(grammarAccess.getClosureDeclarationAccess().getFormalParametersAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MethodCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group__0__Impl
	rule__MethodCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
{ after(grammarAccess.getMethodCallAccess().getPrimaryExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getAlternatives_1()); }
(rule__MethodCall__Alternatives_1)?
{ after(grammarAccess.getMethodCallAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MethodCall__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group_1_0__0__Impl
	rule__MethodCall__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getBinaryExprLeftAction_1_0_0()); }
(

)
{ after(grammarAccess.getMethodCallAccess().getBinaryExprLeftAction_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group_1_0__1__Impl
	rule__MethodCall__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getBinaryOpAssignment_1_0_1()); }
(rule__MethodCall__BinaryOpAssignment_1_0_1)
{ after(grammarAccess.getMethodCallAccess().getBinaryOpAssignment_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getRightAssignment_1_0_2()); }
(rule__MethodCall__RightAssignment_1_0_2)
{ after(grammarAccess.getMethodCallAccess().getRightAssignment_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MethodCall__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group_1_1__0__Impl
	rule__MethodCall__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getGroup_1_1_0()); }
(rule__MethodCall__Group_1_1_0__0)
{ after(grammarAccess.getMethodCallAccess().getGroup_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group_1_1__1__Impl
	rule__MethodCall__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getFullStopKeyword_1_1_1()); }

	'.' 

{ after(grammarAccess.getMethodCallAccess().getFullStopKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group_1_1__2__Impl
	rule__MethodCall__Group_1_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getMethodNameAssignment_1_1_2()); }
(rule__MethodCall__MethodNameAssignment_1_1_2)
{ after(grammarAccess.getMethodCallAccess().getMethodNameAssignment_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group_1_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group_1_1__3__Impl
	rule__MethodCall__Group_1_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_1_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getGroup_1_1_3()); }
(rule__MethodCall__Group_1_1_3__0)?
{ after(grammarAccess.getMethodCallAccess().getGroup_1_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group_1_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group_1_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_1_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getParametersAssignment_1_1_4()); }
(rule__MethodCall__ParametersAssignment_1_1_4)?
{ after(grammarAccess.getMethodCallAccess().getParametersAssignment_1_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__MethodCall__Group_1_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group_1_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_1_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getMethodCallReceptorAction_1_1_0_0()); }
(

)
{ after(grammarAccess.getMethodCallAccess().getMethodCallReceptorAction_1_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__MethodCall__Group_1_1_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group_1_1_3__0__Impl
	rule__MethodCall__Group_1_1_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_1_1_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getWithParametersAssignment_1_1_3_0()); }
(rule__MethodCall__WithParametersAssignment_1_1_3_0)
{ after(grammarAccess.getMethodCallAccess().getWithParametersAssignment_1_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group_1_1_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group_1_1_3__1__Impl
	rule__MethodCall__Group_1_1_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_1_1_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getParametersAssignment_1_1_3_1()); }
(rule__MethodCall__ParametersAssignment_1_1_3_1)
{ after(grammarAccess.getMethodCallAccess().getParametersAssignment_1_1_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group_1_1_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group_1_1_3__2__Impl
	rule__MethodCall__Group_1_1_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_1_1_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getGroup_1_1_3_2()); }
(rule__MethodCall__Group_1_1_3_2__0)*
{ after(grammarAccess.getMethodCallAccess().getGroup_1_1_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group_1_1_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group_1_1_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_1_1_3__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getRightParenthesisKeyword_1_1_3_3()); }

	')' 

{ after(grammarAccess.getMethodCallAccess().getRightParenthesisKeyword_1_1_3_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__MethodCall__Group_1_1_3_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group_1_1_3_2__0__Impl
	rule__MethodCall__Group_1_1_3_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_1_1_3_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getCommaKeyword_1_1_3_2_0()); }

	',' 

{ after(grammarAccess.getMethodCallAccess().getCommaKeyword_1_1_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MethodCall__Group_1_1_3_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MethodCall__Group_1_1_3_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__Group_1_1_3_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getParametersAssignment_1_1_3_2_1()); }
(rule__MethodCall__ParametersAssignment_1_1_3_2_1)
{ after(grammarAccess.getMethodCallAccess().getParametersAssignment_1_1_3_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

























rule__MatchTraceExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MatchTraceExpression__Group__0__Impl
	rule__MatchTraceExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchTraceExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchTraceExpressionAccess().getMatchKeyword_0()); }

	'match' 

{ after(grammarAccess.getMatchTraceExpressionAccess().getMatchKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MatchTraceExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MatchTraceExpression__Group__1__Impl
	rule__MatchTraceExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchTraceExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchTraceExpressionAccess().getGroup_1()); }
(rule__MatchTraceExpression__Group_1__0)?
{ after(grammarAccess.getMatchTraceExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MatchTraceExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MatchTraceExpression__Group__2__Impl
	rule__MatchTraceExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchTraceExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchTraceExpressionAccess().getTraceAssignment_2()); }
(rule__MatchTraceExpression__TraceAssignment_2)
{ after(grammarAccess.getMatchTraceExpressionAccess().getTraceAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MatchTraceExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MatchTraceExpression__Group__3__Impl
	rule__MatchTraceExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchTraceExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchTraceExpressionAccess().getWithKeyword_3()); }

	'with' 

{ after(grammarAccess.getMatchTraceExpressionAccess().getWithKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MatchTraceExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MatchTraceExpression__Group__4__Impl
	rule__MatchTraceExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchTraceExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchTraceExpressionAccess().getLeftSquareBracketKeyword_4()); }

	'[' 

{ after(grammarAccess.getMatchTraceExpressionAccess().getLeftSquareBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MatchTraceExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MatchTraceExpression__Group__5__Impl
	rule__MatchTraceExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchTraceExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchTraceExpressionAccess().getTraceExprAssignment_5()); }
(rule__MatchTraceExpression__TraceExprAssignment_5)
{ after(grammarAccess.getMatchTraceExpressionAccess().getTraceExprAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MatchTraceExpression__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MatchTraceExpression__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchTraceExpression__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchTraceExpressionAccess().getRightSquareBracketKeyword_6()); }

	']' 

{ after(grammarAccess.getMatchTraceExpressionAccess().getRightSquareBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__MatchTraceExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MatchTraceExpression__Group_1__0__Impl
	rule__MatchTraceExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchTraceExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchTraceExpressionAccess().getIDTerminalRuleCall_1_0()); }
	RULE_ID
{ after(grammarAccess.getMatchTraceExpressionAccess().getIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MatchTraceExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MatchTraceExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MatchTraceExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchTraceExpressionAccess().getExclamationMarkKeyword_1_1()); }

	'!' 

{ after(grammarAccess.getMatchTraceExpressionAccess().getExclamationMarkKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TraceExprLanguage__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceExprLanguage__Group__0__Impl
	rule__TraceExprLanguage__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceExprLanguage__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceExprLanguageAccess().getTraceVarAssignment_0()); }
(rule__TraceExprLanguage__TraceVarAssignment_0)
{ after(grammarAccess.getTraceExprLanguageAccess().getTraceVarAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TraceExprLanguage__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceExprLanguage__Group__1__Impl
	rule__TraceExprLanguage__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceExprLanguage__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceExprLanguageAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getTraceExprLanguageAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TraceExprLanguage__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TraceExprLanguage__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TraceExprLanguage__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceExprLanguageAccess().getExprAssignment_2()); }
(rule__TraceExprLanguage__ExprAssignment_2)
{ after(grammarAccess.getTraceExprLanguageAccess().getExprAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PutTraceExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PutTraceExpression__Group__0__Impl
	rule__PutTraceExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PutTraceExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutTraceExpressionAccess().getPutKeyword_0()); }

	'put' 

{ after(grammarAccess.getPutTraceExpressionAccess().getPutKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PutTraceExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PutTraceExpression__Group__1__Impl
	rule__PutTraceExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PutTraceExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutTraceExpressionAccess().getGroup_1()); }
(rule__PutTraceExpression__Group_1__0)?
{ after(grammarAccess.getPutTraceExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PutTraceExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PutTraceExpression__Group__2__Impl
	rule__PutTraceExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PutTraceExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutTraceExpressionAccess().getTraceAssignment_2()); }
(rule__PutTraceExpression__TraceAssignment_2)
{ after(grammarAccess.getPutTraceExpressionAccess().getTraceAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PutTraceExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PutTraceExpression__Group__3__Impl
	rule__PutTraceExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PutTraceExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutTraceExpressionAccess().getWithKeyword_3()); }

	'with' 

{ after(grammarAccess.getPutTraceExpressionAccess().getWithKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PutTraceExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PutTraceExpression__Group__4__Impl
	rule__PutTraceExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PutTraceExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutTraceExpressionAccess().getLeftSquareBracketKeyword_4()); }

	'[' 

{ after(grammarAccess.getPutTraceExpressionAccess().getLeftSquareBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PutTraceExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PutTraceExpression__Group__5__Impl
	rule__PutTraceExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__PutTraceExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutTraceExpressionAccess().getParametersAssignment_5()); }
(rule__PutTraceExpression__ParametersAssignment_5)
{ after(grammarAccess.getPutTraceExpressionAccess().getParametersAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PutTraceExpression__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PutTraceExpression__Group__6__Impl
	rule__PutTraceExpression__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__PutTraceExpression__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getPutTraceExpressionAccess().getGroup_6()); }
(rule__PutTraceExpression__Group_6__0)
{ after(grammarAccess.getPutTraceExpressionAccess().getGroup_6()); }
)
(
{ before(grammarAccess.getPutTraceExpressionAccess().getGroup_6()); }
(rule__PutTraceExpression__Group_6__0)*
{ after(grammarAccess.getPutTraceExpressionAccess().getGroup_6()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PutTraceExpression__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PutTraceExpression__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PutTraceExpression__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutTraceExpressionAccess().getRightSquareBracketKeyword_7()); }

	']' 

{ after(grammarAccess.getPutTraceExpressionAccess().getRightSquareBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__PutTraceExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PutTraceExpression__Group_1__0__Impl
	rule__PutTraceExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PutTraceExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutTraceExpressionAccess().getIDTerminalRuleCall_1_0()); }
	RULE_ID
{ after(grammarAccess.getPutTraceExpressionAccess().getIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PutTraceExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PutTraceExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PutTraceExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutTraceExpressionAccess().getExclamationMarkKeyword_1_1()); }

	'!' 

{ after(grammarAccess.getPutTraceExpressionAccess().getExclamationMarkKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PutTraceExpression__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PutTraceExpression__Group_6__0__Impl
	rule__PutTraceExpression__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PutTraceExpression__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutTraceExpressionAccess().getCommaKeyword_6_0()); }

	',' 

{ after(grammarAccess.getPutTraceExpressionAccess().getCommaKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PutTraceExpression__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PutTraceExpression__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PutTraceExpression__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutTraceExpressionAccess().getParametersAssignment_6_1()); }
(rule__PutTraceExpression__ParametersAssignment_6_1)
{ after(grammarAccess.getPutTraceExpressionAccess().getParametersAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PutTraceParameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PutTraceParameter__Group__0__Impl
	rule__PutTraceParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PutTraceParameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutTraceParameterAccess().getTraceVarAssignment_0()); }
(rule__PutTraceParameter__TraceVarAssignment_0)
{ after(grammarAccess.getPutTraceParameterAccess().getTraceVarAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PutTraceParameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PutTraceParameter__Group__1__Impl
	rule__PutTraceParameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PutTraceParameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutTraceParameterAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getPutTraceParameterAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PutTraceParameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PutTraceParameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PutTraceParameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutTraceParameterAccess().getValueAssignment_2()); }
(rule__PutTraceParameter__ValueAssignment_2)
{ after(grammarAccess.getPutTraceParameterAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EDouble__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EDouble__Group__0__Impl
	rule__EDouble__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
{ after(grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EDouble__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EDouble__Group__1__Impl
	rule__EDouble__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDoubleAccess().getFullStopKeyword_1()); }

	'.' 

{ after(grammarAccess.getEDoubleAccess().getFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EDouble__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EDouble__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
{ after(grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EInt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__TraceInterface__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceInterfaceAccess().getNameEStringParserRuleCall_1_0()); }
	ruleEString{ after(grammarAccess.getTraceInterfaceAccess().getNameEStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TraceInterface__DefinitionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceInterfaceAccess().getDefinitionsTraceDefinitionParserRuleCall_2_0()); }
	ruleTraceDefinition{ after(grammarAccess.getTraceInterfaceAccess().getDefinitionsTraceDefinitionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TraceDefinition__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceDefinitionAccess().getNameEStringParserRuleCall_1_0()); }
	ruleEString{ after(grammarAccess.getTraceDefinitionAccess().getNameEStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TraceDefinition__ElementsAssignment_2_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceDefinitionAccess().getElementsTraceElementInlineParserRuleCall_2_0_1_0()); }
	ruleTraceElementInline{ after(grammarAccess.getTraceDefinitionAccess().getElementsTraceElementInlineParserRuleCall_2_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TraceDefinition__ElementsAssignment_2_0_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceDefinitionAccess().getElementsTraceElementInlineParserRuleCall_2_0_2_1_0()); }
	ruleTraceElementInline{ after(grammarAccess.getTraceDefinitionAccess().getElementsTraceElementInlineParserRuleCall_2_0_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TraceDefinition__ElementsAssignment_2_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceDefinitionAccess().getElementsTraceElementExpandedParserRuleCall_2_1_0_0()); }
	ruleTraceElementExpanded{ after(grammarAccess.getTraceDefinitionAccess().getElementsTraceElementExpandedParserRuleCall_2_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TraceDefinition__ElementsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceDefinitionAccess().getElementsTraceElementExpandedParserRuleCall_2_1_1_0()); }
	ruleTraceElementExpanded{ after(grammarAccess.getTraceDefinitionAccess().getElementsTraceElementExpandedParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TraceElementInline__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceElementInlineAccess().getNameEStringParserRuleCall_0_0()); }
	ruleEString{ after(grammarAccess.getTraceElementInlineAccess().getNameEStringParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TraceElementInline__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceElementInlineAccess().getTypeTypeExpressionParserRuleCall_2_0()); }
	ruleTypeExpression{ after(grammarAccess.getTraceElementInlineAccess().getTypeTypeExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TraceElementExpanded__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceElementExpandedAccess().getNameEStringParserRuleCall_1_0()); }
	ruleEString{ after(grammarAccess.getTraceElementExpandedAccess().getNameEStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TraceElementExpanded__TypeAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceElementExpandedAccess().getTypeTypeExpressionParserRuleCall_3_0()); }
	ruleTypeExpression{ after(grammarAccess.getTraceElementExpandedAccess().getTypeTypeExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassUse__ModelAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassUseAccess().getModelRepresentModelCrossReference_0_0()); }
(
{ before(grammarAccess.getClassUseAccess().getModelRepresentModelIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getClassUseAccess().getModelRepresentModelIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getClassUseAccess().getModelRepresentModelCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassUse__ClassNameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassUseAccess().getClassNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getClassUseAccess().getClassNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassUse__AnnotationsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassUseAccess().getAnnotationsSingleAnnotationParserRuleCall_3_0()); }
	ruleSingleAnnotation{ after(grammarAccess.getClassUseAccess().getAnnotationsSingleAnnotationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassUse__StrictTypeAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassUseAccess().getStrictTypeExclamationMarkKeyword_4_0()); }
(
{ before(grammarAccess.getClassUseAccess().getStrictTypeExclamationMarkKeyword_4_0()); }

	'!' 

{ after(grammarAccess.getClassUseAccess().getStrictTypeExclamationMarkKeyword_4_0()); }
)

{ after(grammarAccess.getClassUseAccess().getStrictTypeExclamationMarkKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PotencyAnnotation__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPotencyAnnotationAccess().getValueINTTerminalRuleCall_1_0()); }
	RULE_INT{ after(grammarAccess.getPotencyAnnotationAccess().getValueINTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyWrite__ReceptorAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyWriteAccess().getReceptorVariableCrossReference_0_0()); }
(
{ before(grammarAccess.getPropertyWriteAccess().getReceptorVariableIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getPropertyWriteAccess().getReceptorVariableIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getPropertyWriteAccess().getReceptorVariableCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyWrite__PropertyAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyWriteAccess().getPropertyIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getPropertyWriteAccess().getPropertyIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PropertyWrite__ExpressionAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyWriteAccess().getExpressionExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getPropertyWriteAccess().getExpressionExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefineVariable__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineVariableAccess().getNameEStringParserRuleCall_0_0()); }
	ruleEString{ after(grammarAccess.getDefineVariableAccess().getNameEStringParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DefineVariable__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDefineVariableAccess().getExpressionExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getDefineVariableAccess().getExpressionExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModelReference__ModelAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelReferenceAccess().getModelRepresentModelCrossReference_0_0()); }
(
{ before(grammarAccess.getModelReferenceAccess().getModelRepresentModelIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getModelReferenceAccess().getModelRepresentModelIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getModelReferenceAccess().getModelRepresentModelCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ModelReference__ClassNameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelReferenceAccess().getClassNameEStringParserRuleCall_2_0()); }
	ruleEString{ after(grammarAccess.getModelReferenceAccess().getClassNameEStringParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__ThenAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getThenConditionBranchParserRuleCall_1_0()); }
	ruleConditionBranch{ after(grammarAccess.getIfExprAccess().getThenConditionBranchParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__ElsifsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getElsifsConditionBranchParserRuleCall_2_1_0()); }
	ruleConditionBranch{ after(grammarAccess.getIfExprAccess().getElsifsConditionBranchParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpr__ElseAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExprAccess().getElseBranchBranchParserRuleCall_3_1_0()); }
	ruleBranchBranch{ after(grammarAccess.getIfExprAccess().getElseBranchBranchParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionBranch__ConditionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionBranchAccess().getConditionExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getConditionBranchAccess().getConditionExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionBranch__StatementsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionBranchAccess().getStatementsStatementParserRuleCall_1_0()); }
	ruleStatement{ after(grammarAccess.getConditionBranchAccess().getStatementsStatementParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BranchBranch__StatementsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBranchBranchAccess().getStatementsStatementParserRuleCall_0()); }
	ruleStatement{ after(grammarAccess.getBranchBranchAccess().getStatementsStatementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__VariableAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableReferenceAccess().getVariableVariableCrossReference_0()); }
(
{ before(grammarAccess.getVariableReferenceAccess().getVariableVariableIDTerminalRuleCall_0_1()); }
	RULE_ID{ after(grammarAccess.getVariableReferenceAccess().getVariableVariableIDTerminalRuleCall_0_1()); }
)
{ after(grammarAccess.getVariableReferenceAccess().getVariableVariableCrossReference_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClosureDeclaration__FormalParametersAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosureDeclarationAccess().getFormalParametersClosureParameterParserRuleCall_1_1_0()); }
	ruleClosureParameter{ after(grammarAccess.getClosureDeclarationAccess().getFormalParametersClosureParameterParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClosureDeclaration__FormalParametersAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosureDeclarationAccess().getFormalParametersClosureParameterParserRuleCall_1_2_1_0()); }
	ruleClosureParameter{ after(grammarAccess.getClosureDeclarationAccess().getFormalParametersClosureParameterParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClosureDeclaration__StatementsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosureDeclarationAccess().getStatementsStatementParserRuleCall_2_0()); }
	ruleStatement{ after(grammarAccess.getClosureDeclarationAccess().getStatementsStatementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClosureParameter__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosureParameterAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getClosureParameterAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__BinaryOpAssignment_1_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getBinaryOpBinaryOpEnumRuleCall_1_0_1_0()); }
	ruleBinaryOp{ after(grammarAccess.getMethodCallAccess().getBinaryOpBinaryOpEnumRuleCall_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__RightAssignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getRightExpressionParserRuleCall_1_0_2_0()); }
	ruleExpression{ after(grammarAccess.getMethodCallAccess().getRightExpressionParserRuleCall_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__MethodNameAssignment_1_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getMethodNameEStringParserRuleCall_1_1_2_0()); }
	ruleEString{ after(grammarAccess.getMethodCallAccess().getMethodNameEStringParserRuleCall_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__WithParametersAssignment_1_1_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getWithParametersLeftParenthesisKeyword_1_1_3_0_0()); }
(
{ before(grammarAccess.getMethodCallAccess().getWithParametersLeftParenthesisKeyword_1_1_3_0_0()); }

	'(' 

{ after(grammarAccess.getMethodCallAccess().getWithParametersLeftParenthesisKeyword_1_1_3_0_0()); }
)

{ after(grammarAccess.getMethodCallAccess().getWithParametersLeftParenthesisKeyword_1_1_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__ParametersAssignment_1_1_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getParametersExpressionParserRuleCall_1_1_3_1_0()); }
	ruleExpression{ after(grammarAccess.getMethodCallAccess().getParametersExpressionParserRuleCall_1_1_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__ParametersAssignment_1_1_3_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getParametersExpressionParserRuleCall_1_1_3_2_1_0()); }
	ruleExpression{ after(grammarAccess.getMethodCallAccess().getParametersExpressionParserRuleCall_1_1_3_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MethodCall__ParametersAssignment_1_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMethodCallAccess().getParametersClosureDeclarationParserRuleCall_1_1_4_0()); }
	ruleClosureDeclaration{ after(grammarAccess.getMethodCallAccess().getParametersClosureDeclarationParserRuleCall_1_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}























rule__MatchTraceExpression__TraceAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchTraceExpressionAccess().getTraceTraceDefinitionCrossReference_2_0()); }
(
{ before(grammarAccess.getMatchTraceExpressionAccess().getTraceTraceDefinitionIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getMatchTraceExpressionAccess().getTraceTraceDefinitionIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getMatchTraceExpressionAccess().getTraceTraceDefinitionCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MatchTraceExpression__TraceExprAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchTraceExpressionAccess().getTraceExprTraceExprLanguageParserRuleCall_5_0()); }
	ruleTraceExprLanguage{ after(grammarAccess.getMatchTraceExpressionAccess().getTraceExprTraceExprLanguageParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TraceExprLanguage__TraceVarAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceExprLanguageAccess().getTraceVarTraceElementCrossReference_0_0()); }
(
{ before(grammarAccess.getTraceExprLanguageAccess().getTraceVarTraceElementIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getTraceExprLanguageAccess().getTraceVarTraceElementIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getTraceExprLanguageAccess().getTraceVarTraceElementCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TraceExprLanguage__ExprAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTraceExprLanguageAccess().getExprExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getTraceExprLanguageAccess().getExprExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PutTraceExpression__TraceAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutTraceExpressionAccess().getTraceTraceDefinitionCrossReference_2_0()); }
(
{ before(grammarAccess.getPutTraceExpressionAccess().getTraceTraceDefinitionIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getPutTraceExpressionAccess().getTraceTraceDefinitionIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getPutTraceExpressionAccess().getTraceTraceDefinitionCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PutTraceExpression__ParametersAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutTraceExpressionAccess().getParametersPutTraceParameterParserRuleCall_5_0()); }
	rulePutTraceParameter{ after(grammarAccess.getPutTraceExpressionAccess().getParametersPutTraceParameterParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PutTraceExpression__ParametersAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutTraceExpressionAccess().getParametersPutTraceParameterParserRuleCall_6_1_0()); }
	rulePutTraceParameter{ after(grammarAccess.getPutTraceExpressionAccess().getParametersPutTraceParameterParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PutTraceParameter__TraceVarAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutTraceParameterAccess().getTraceVarTraceElementCrossReference_0_0()); }
(
{ before(grammarAccess.getPutTraceParameterAccess().getTraceVarTraceElementIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getPutTraceParameterAccess().getTraceVarTraceElementIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getPutTraceParameterAccess().getTraceVarTraceElementCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PutTraceParameter__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutTraceParameterAccess().getValueExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getPutTraceParameterAccess().getValueExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumLiteralAccess().getValueEIntParserRuleCall_0()); }
	ruleEInt{ after(grammarAccess.getNumLiteralAccess().getValueEIntParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatLiteralAccess().getValueEDoubleParserRuleCall_0()); }
	ruleEDouble{ after(grammarAccess.getFloatLiteralAccess().getValueEDoubleParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanLiteral__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanLiteralAccess().getValueEBooleanParserRuleCall_0()); }
	ruleEBoolean{ after(grammarAccess.getBooleanLiteralAccess().getValueEBooleanParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_KEYWORD_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* ':';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


