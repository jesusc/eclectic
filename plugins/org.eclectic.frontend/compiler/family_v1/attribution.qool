// 
// This is the compiler from Mappings to Qool 
// 

qool attribution2idc(in) -> (idc)

model rt 
  class generic 
	ref s : _!Any 
	ref t : _!Any 
  end
  
  // to emulate global variables, for inline_model!
  class global
    att s : _!String
    ref  t : _!Any
  end

  class var2var
    ref s : _!Any
    ref t : idc!Variable
  end
  
  class instr
    ref s    :  _!Any
    ref list : idc!Instruction*
  end
  
  class queue_link
    att name   : _!String
    ref queue_ : idc!Queue
  end

  class attr2link
    ref s  : in!AttributeDcl
    ref t  : idc!KClass
  end  
end 

local queue instrQ      : rt!instr
local queue varsQ       : rt!var2var

local queue genericQ    : rt!generic
local queue globalQ     : rt!global
local queue queueByName : rt!queue_link
local queue attr2linkQ  : rt!attr2link

model queue mAttributionTransformation     : in!AttributionTransformation
model queue mAttributionRule               : in!AttributionRule
model queue mAttributeInit                 : in!AttributeInit
model queue mAttributeUse                  : in!AttributeUse

// core
model queue mVariableReference           : in!VariableReference
model queue mMethodCall                  : in!MethodCall
model queue mModelReference              : in!ModelReference
model queue mStringLiteral               : in!StringLiteral
model queue mIntegerLiteral               : in!NumLiteral
model queue mPropertyWrite               : in!PropertyWrite
model queue mDefineVariable              : in!DefineVariable
model queue mClosureDefinition           : in!ClosureDeclaration
model queue mResolveLink                 : in!ResolveLink


segment high_level
  forall trafo from mAttributionTransformation
    qt      = idc!QoolTransformation.new
    qt.name = trafo.name
    qt.qualifier = "main"
        
	// Begin-of ModelDefinition 
    model_def_transformer =  { |kind_of_model|
      result_1 = { |transf_def_param_1|
         
         mp_1 = idc!ModelDefinition.new
         mp_1.name = transf_def_param_1.name
         mp_1.kind = kind_of_model

      	 annotatedWith = trafo.annotations.select { |a| a.annotatedElement.eq(transf_def_param_1) }	
      	 mp_1.metamodel = annotatedWith.select { |a| a.kind_of(in!MetamodelModelAnnotation) }.map { |a|  
      			d = idc!MetamodelDefinition.new
      			d.path = a.metamodel
      			d 
      		}.first // I should have a way to check there is only one
      
         trace_in_model_to_model = rt!generic.new
         trace_in_model_to_model.s = transf_def_param_1
         trace_in_model_to_model.t = mp_1
      
         emit trace_in_model_to_model to genericQ
        
         mp_1 
      }
      result_1
    }
    qt.models = trafo.inModels.map (model_def_transformer.call("IN") )
    qt.models = trafo.outModels.map(model_def_transformer.call("OUT") )

    create_imports = {
	    imported_model_transformer =  { |imp_model|
	    	name = imp_model.name.eq("_").if_else(
	    		{ |v| "__RuntimeModel__" },
	    		{ |v| imp_model.name     }	
	    	)
	        md = idc!ModelDefinition.new
	        md.name = name
	        
	        trace_model_to_model = rt!generic.new
	        trace_model_to_model.s = imp_model
	        trace_model_to_model.t = md
	      
	        emit trace_model_to_model to genericQ
	         
			md
	    }
	    qt.additionalModels = trafo.importedModels.map(imported_model_transformer)
    
	    uses_transformer = { |ecl_transf, idc_transf|
	       idc_transf.importedModels = ecl_transf.uses.map { |u|
	       	 name = u.as.if_nil { u.module }
	         idc  = idc!ImportedModel.new
	         idc.name = name
	
	         use_trace = rt!generic.new
	         use_trace.s = u
	         use_trace.t = idc
	      
	         emit use_trace to genericQ
	
	         // compute capabilities
	         // TODO: Deal with links that do not have module
	         idc.capabilityQueues = in!ResolveLink.all_instances.select { |r| r.module.eq(u) }.uniq_by { |r| r.linkName }.map { |r|
	            q = idc!RequiredQueue.new
	            q.name = r.linkName
	            
	            tlink = rt!queue_link.new
	            tlink.name   = r.queue_id_string
	            tlink.queue_ = q
	            emit tlink to queueByName
	            
	            q
	         }  
	         
	         // I should compute into the capabilities the structure of the trace model
		 
	         idc
	       }
	    }
	    uses_transformer.call(trafo, qt)
	}
	create_imports.call    
    // End-of ModelDefinition

    // Begin-of Traces
    inline_model_creator = { |x|
   	  inlineModel = idc!InlineModel.new
   	  inlineModel.name = "rt_".concat(trafo.name)
   	  qt.inlineModels = inlineModel
      inline_model_trace_link = rt!global.new
      inline_model_trace_link.s = "inline_model"
      inline_model_trace_link.t = inlineModel    
      emit inline_model_trace_link to globalQ
      
      inlineModel    
    }
    
    inlineModel = inline_model_creator.call("dummy")
    	    
    trace_def_transformer = { |attr_dcl| 
    	trace_link_type      = idc!KClass.new
    	trace_link_type.name = attr_dcl.name
       
    	source_trace_feature = idc!KReference.new
    	// target_trace_feature = idc!KReference.new
    	target_trace_feature = attr_dcl.type_.^model.name.eq("_").if_else(
    		{ |v| 
    		  a = idc!KAttribute.new 
    		  a.ktypeName = attr_dcl.type_.className
    		  a
    		},
    		{ |v| idc!KReference.new }
    	)
    	
    	source_trace_feature.name = "s"
    	target_trace_feature.name = attr_dcl.name

		trace_link_type.features = source_trace_feature
		trace_link_type.features = target_trace_feature
    
    	inlineModel.classifiers = trace_link_type
    	
    	trace_link = rt!attr2link.new
    	trace_link.s = attr_dcl
    	trace_link.t = trace_link_type
    	emit trace_link to attr2linkQ    	
    }

    trafo.attributes.each(trace_def_transformer)    
    // End-of Traces

    // Begin-of ModelQueues
    model_queue_transformer = { |rule_dcl|
    	model_queue = idc!ModelElementQueue.new
    	model_queue.name = rule_dcl.type.className.next_id
    	type_info   = idc!TypeInfo.new
    	type_info.^model =  genericQ[ #kindOf(rt!generic), #p(s, rule_dcl.type.^model) ].t
    	type_info.classifierName = rule_dcl.type.className
    	model_queue.type_ = type_info

		qt.queues = model_queue

    	model_queue_trace_link = rt!queue_link.new
        model_queue_trace_link.name   = rule_dcl.type.id_string
    	model_queue_trace_link.queue_ = model_queue
    	    	    	
    	emit model_queue_trace_link to queueByName
    }
    
    trafo.rules.each(model_queue_transformer)
    // End-of ModelQueues

    // Begin-of Local Queues
    local_queue_transformer = { |attr_dcl|
    	local_queue = idc!LocalQueue.new
    	local_queue.name = attr_dcl.name
    	type_info   = idc!TypeInfo.new
    	type_info.^model         = inlineModel
    	type_info.classifierName = attr2linkQ[ #kindOf(rt!attr2link), #p(s, attr_dcl) ].t.name
    	local_queue.type_ = type_info

		qt.queues = local_queue

    	local_queue_trace_link = rt!queue_link.new
        local_queue_trace_link.name   = attr_dcl.name
    	local_queue_trace_link.queue_ = local_queue
    	    	    	
    	emit local_queue_trace_link to queueByName
    }
    
    trafo.attributes.each(local_queue_transformer)
    // End-of Local Queues

    // Begin-of segments
    segment_transformer = { |x|
    	qt.segments = trafo.rules.map { |r|
   			genericQ[ #kindOf(rt!generic), #p(s, r) ].t
	    }        
    }
    segment_transformer.call("dummy")
    // End-of segments

  end
end

segment attribution_rules
  forall rule_dcl from mAttributionRule
    segment_obj      = idc!Segment.new
    segment_obj.name = rule_dcl.type.id_string

    rule2segment = rt!generic.new
    rule2segment.s = rule_dcl
    rule2segment.t = segment_obj      
    emit rule2segment to genericQ

    create_for_all = { |x|
      for_all        = idc!QForAll.new
      for_all.name   = "forAll".next_id    
      for_all.^queue = queueByName[ #kindOf(rt!queue_link), #p(name, rule_dcl.type.id_string) ].queue_

      // not generic, but...
      for_all.row    = rule_dcl.row
      for_all.column = rule_dcl.column
      for_all.file   = rule_dcl.file
    
      for_all
    }
    
    for_all = create_for_all.call("dummy")
    
    var2var_t = rt!var2var.new
    var2var_t.s = rule_dcl.self
    var2var_t.t = for_all
    emit var2var_t to varsQ        
      
    segment_obj.instructions = for_all
    
    for_all.instructions = rule_dcl.statements.map { |stm|
    	instrQ[ #kindOf(rt!instr), #p(s, stm) ].list   
 	}.flatten
 	
  end
end

segment attribute_use
  forall expr from mAttributeUse
      inlineModel = globalQ[ #kindOf(rt!global), #p(s, "inline_model") ].t
      expr_var   = varsQ[ #kindOf(rt!var2var), #p(s, expr.expr) ].t
   
      create_match = { |x|   
        match_instr = idc!QMatch.new
        match_instr.name = "match".next_id
        match_instr.^queue = queueByName[ #kindOf(rt!queue_link), #p(name, expr.attribute.name) ].queue_
        kind_pred  = idc!KindOfPredicate.new
        kind_pred.className = expr.attribute.name
        kind_pred.^model = inlineModel
        eq_pred  = idc!PropertyEqualsPredicate.new
        eq_pred.propertyName = "s"
        eq_pred.value = expr_var
        match_instr.predicates = kind_pred
        match_instr.predicates = eq_pred       
        match_instr
      }
      
      create_get = { |featureName, receptor|
        get_t = idc!Get.new
        get_t.name = "get_t".next_id
        get_t.featureName = featureName
        get_t.receptor    = receptor
        get_t.kind        = "TRY_GET_FIRST"
        get_t
      }

      match_instr = create_match.call("dummy")
      get_t       = create_get.call(expr.attribute.name, match_instr)
         
      var2var_t = rt!var2var.new
      var2var_t.s = expr
      var2var_t.t = get_t
      emit var2var_t to varsQ        
     
	  instr_trace = rt!instr.new
	  instr_trace.s = expr
	  instr_trace.list = instrQ[ #kindOf(rt!instr), #p(s, expr.expr) ].list
	  instr_trace.list = match_instr
	  instr_trace.list = get_t
      emit instr_trace to instrQ
      
  end
end

segment attribute_init 
  forall stm from mAttributeInit
    rule        = stm._refContainer
    inlineModel = globalQ[ #kindOf(rt!global), #p(s, "inline_model") ].t

	// fails
    create_instr_trace = { |x|
       receptor_instructions = instrQ[ #kindOf(rt!instr), #p(s, stm.receptor) ].list
       right_instructions    = instrQ[ #kindOf(rt!instr), #p(s, stm.right) ].list

	   instr_trace = rt!instr.new
	   instr_trace.s = stm
	   instr_trace.list = right_instructions
	   instr_trace.list = receptor_instructions 
 
       instr_trace
    }
    instr_trace = create_instr_trace.call("dummy")
    
    receptor_var          =  varsQ[ #kindOf(rt!var2var), #p(s, stm.receptor) ].t
    right_var             =  varsQ[ #kindOf(rt!var2var), #p(s, stm.right) ].t
   
    // Begin-of Create-Trace
    trace_creator = { |x|
      create = idc!Create.new
      create.name   = "trace".next_id
      create.^model = inlineModel
      create.className = stm.attribute.name
        
      set = idc!Set.new
      set.featureName = "s"
      set.receptor    = create
      set.value       = receptor_var
        
      set2 = idc!Set.new
      set2.featureName = stm.attribute.name
      set2.receptor    = create
      set2.value       = right_var

      emit_stm = idc!QEmit.new      
      emit_stm.^queue = queueByName[ #kindOf(rt!queue_link), #p(name, stm.attribute.name) ].queue_ 
      emit_stm.value = create
        
      result = _!List.new.add(create).add(set).add(set2).add(emit_stm)
      result
      //instr_container.instructions = create
      //instr_container.instructions = set
      //instr_container.instructions = set2
      //instr_container.instructions = emit_stm
    }
    

    receptor_instr =  instrQ[ #kindOf(rt!instr), #p(s, stm.receptor) ].list
    right_instr    =  instrQ[ #kindOf(rt!instr), #p(s, stm.right) ].list

    instr_trace.list = receptor_instr
    instr_trace.list = right_instr
    instr_trace.list = trace_creator.call("dummy")
    // End-of Create-Trace

	emit instr_trace to instrQ    
    
  end
end


segment line_numbers
  forall instr_trace from instrQ
    instr_trace.list.each { |idc_instr|
      idc_instr.row    = instr_trace.s.row
      idc_instr.column = instr_trace.s.column
      idc_instr.file   = instr_trace.s.file
    }
  end
end


// Begin-of COMMON-EXPRESSIONS
segment variable_ref 
  forall expr from mVariableReference
    assign = idc!Assign.new
    assign.name = "assign".next_id
    assign.rightVariable = varsQ[ #kindOf(rt!var2var), #p(s, expr.variable) ].t
    
    var2var_t = rt!var2var.new
    var2var_t.s = expr
    var2var_t.t = assign
    emit var2var_t to varsQ        
     
	instr_trace = rt!instr.new
	instr_trace.s = expr
	instr_trace.list = assign
    emit instr_trace to instrQ   
  end
end

segment model_reference
  forall expr from mModelReference
  	  // TODO: This should be ignored if is the receptor of a "new" methodcall
  	  
  	  
      meta = idc!ReadMeta.new
      meta.name  = "read_meta".next_id
      meta.className = expr.className
      meta.^model =  genericQ[ #kindOf(rt!generic), #p(s, expr.^model) ].t

      var2var_t = rt!var2var.new
      var2var_t.s = expr
      var2var_t.t = meta
      emit var2var_t to varsQ        
     
	  instr_trace = rt!instr.new
 	  instr_trace.s = expr
 	  instr_trace.list = meta
      emit instr_trace to instrQ   
  end
end

segment method_call
  /*
  forall expr from mMethodCall
      where expr.methodName.eq("new").and( expr.receptor.kind_of(in!ModelReference) )
      "---------".println("paso1")
      create = idc!Create.new 
      create.name      = expr.receptor.className.next_id
      create.^model    = { genericQ[ #kindOf(rt!generic), #p(s, expr.receptor.^model) ].t }.call
      create.className = expr.receptor.className

      var2var_t = rt!var2var.new
      var2var_t.s = expr
      var2var_t.t = create
      emit var2var_t to varsQ        
     
	  instr_trace = rt!instr.new
	  instr_trace.s = expr
	  instr_trace.list = create
      emit instr_trace to instrQ   	   
  end
  */
  
  forall expr from mMethodCall
  //    where expr.methodName.eq("new").not
  // no funciona el where

	create_instr = {
	      create = idc!Create.new 
	      create.name      = expr.receptor.className.next_id
	      create.^model    = { genericQ[ #kindOf(rt!generic), #p(s, expr.receptor.^model) ].t }.call
	      create.className = expr.receptor.className
	
	      var2var_t = rt!var2var.new
	      var2var_t.s = expr
	      var2var_t.t = create
	      emit var2var_t to varsQ        
	     
		  instr_trace = rt!instr.new
		  instr_trace.s = expr
		  instr_trace.list = create
	      emit instr_trace to instrQ   	   
	      
      }  
      
      normal_method_call = {

      expr_var   = { varsQ[ #kindOf(rt!var2var), #p(s, expr.receptor) ].t }.call
      params_var =  expr.parameters.map { |p| 
        varsQ[ #kindOf(rt!var2var), #p(s, p) ].t
      }
     
      expr_instr   = { instrQ[ #kindOf(rt!instr), #p(s, expr.receptor) ].list }.call
      params_instr =  expr.parameters.map { |p| 
        instrQ[ #kindOf(rt!instr), #p(s, p) ].list
      }.flatten
               
      with_parameters = { |does_not_work_without_parameters|
         method_call = idc!MethodCall.new
	     method_call.name = "method_call".next_id
	     method_call.methodName = expr.methodName
	     method_call.receptor   = expr_var 
	     method_call.actualParameters = params_var
	     method_call      
      }
      
      without_parameters = { |x|
          get = idc!Get.new
          get.name = "get".next_id
          get.featureName = expr.methodName
          get.receptor    = expr_var
          get.kind        = "TRY_GET_FIRST"                             
          get                
      }

      instr = expr.parameters.size.gt(0).if_else(with_parameters, without_parameters)

      var2var_t = rt!var2var.new
      var2var_t.s = expr
      var2var_t.t = instr
      emit var2var_t to varsQ        
     
	  instr_trace = rt!instr.new
	  instr_trace.s = expr
	  instr_trace.list = expr_instr
	  instr_trace.list = params_instr
	  instr_trace.list = instr
      emit instr_trace to instrQ   	  
	  }	

	  is_create = expr.methodName.eq("new").and( expr.receptor.kind_of(in!ModelReference) ) 
	  is_create.if_else(create_instr, normal_method_call)	
  end  
end


segment string_literal
  // String constant
  forall str_constant from mStringLiteral
     lit = idc!Literal.new
     
     instr_trace = rt!instr.new
     instr_trace.s = str_constant
     instr_trace.list = lit
    
     emit instr_trace to instrQ
     
     var2var_t = rt!var2var.new
     var2var_t.s = str_constant
     var2var_t.t = lit
    
     emit var2var_t to varsQ 
          
     lit.name = "string".next_id
     lit.stringValue = str_constant.value
     lit.kind        = "STRING"
  end
end


segment integer_literal
  forall int_constant from mIntegerLiteral
     lit = idc!Literal.new
     
     instr_trace = rt!instr.new
     instr_trace.s = int_constant
     instr_trace.list = lit
    
     emit instr_trace to instrQ
     
     var2var_t = rt!var2var.new
     var2var_t.s = int_constant
     var2var_t.t = lit
    
     emit var2var_t to varsQ 
          
     lit.name = "integer".next_id
     lit.intValue = int_constant.value
     lit.kind        = "INTEGER"
  end
end

segment property_write
  forall pwrite from mPropertyWrite
      receptor_var   = varsQ[ #kindOf(rt!var2var), #p(s, pwrite.receptor) ].t
      expression_var = varsQ[ #kindOf(rt!var2var), #p(s, pwrite.expression) ].t
     
      receptor_instr   = instrQ[ #kindOf(rt!instr), #p(s, pwrite.receptor) ].list
      expression_instr = instrQ[ #kindOf(rt!instr), #p(s, pwrite.expression) ].list

      setInstr = idc!Set.new
      setInstr.featureName = pwrite.property
      setInstr.receptor    = receptor_var
      setInstr.value       = expression_var
     
	  instr_trace = rt!instr.new
	  instr_trace.s = pwrite
	  instr_trace.list = receptor_instr
	  instr_trace.list = expression_instr
	  instr_trace.list = setInstr
      emit instr_trace to instrQ   	  
  end
end

segment define_variable
  // propagates the variable
  forall define from mDefineVariable
      expression_var = varsQ[ #kindOf(rt!var2var), #p(s, define.expression) ].t
      expression_instr = instrQ[ #kindOf(rt!instr), #p(s, define.expression) ].list

      var2var_t = rt!var2var.new
      var2var_t.s = define
      var2var_t.t = expression_var
      emit var2var_t to varsQ        
     
	  instr_trace = rt!instr.new
	  instr_trace.s = define
	  instr_trace.list = expression_instr
      emit instr_trace to instrQ   	  
  end
end

segment closure_definition
  forall closure_def from mClosureDefinition
      idc = idc!ClosureDef.new
      idc.name = "closure_def".next_id
      idc.formalParameters = closure_def.formalParameters.map({ |fp|
      	idc_p      = idc!Parameter.new
      	idc_p.name = fp.name

	    var2var_t = rt!var2var.new
	    var2var_t.s = fp
	    var2var_t.t = idc_p
	    emit var2var_t to varsQ        

		// empty list of instructions
		instr_trace = rt!instr.new
		instr_trace.s = fp
		instr_trace.list = _!List.new
	    emit instr_trace to instrQ   	  
	    
      	idc_p
      }) 

      idc.instructions = closure_def.statements.map { |stm|
    	instrQ[ #kindOf(rt!instr), #p(s, stm) ].list   
 	  }.flatten
       
      
      var2var_t = rt!var2var.new
      var2var_t.s = closure_def
      var2var_t.t = idc
      emit var2var_t to varsQ        
     
	  instr_trace = rt!instr.new
	  instr_trace.s = closure_def
	  instr_trace.list = idc
      emit instr_trace to instrQ   	  
  end
end

// When isExternal = true && module != nil
segment resolve_link
  forall resolve_link from mResolveLink
      // inlineModel = globalQ[ #kindOf(rt!global), #p(s, "inline_model") ].t
      expr_var   = varsQ[ #kindOf(rt!var2var), #p(s, resolve_link.expr) ].t
   
      create_match = { |x|   
        match_instr = idc!QMatch.new
        match_instr.name = "match".next_id
        match_instr.^queue = queueByName[ #kindOf(rt!queue_link), #p(name, resolve_link.queue_id_string) ].queue_
        //kind_pred  = idc!KindOfPredicate.new
        //kind_pred.className = expr.attribute.name
        //kind_pred.^model = inlineModel
        eq_pred  = idc!PropertyEqualsPredicate.new
        eq_pred.propertyName = "s" // default name for the first source property
        eq_pred.value = expr_var
        // match_instr.predicates = kind_pred
        match_instr.predicates = eq_pred       
        match_instr
      }
      
      create_get = { |featureName, receptor|
        get_t = idc!Get.new
        get_t.name = "get_t".next_id
        get_t.featureName = featureName
        get_t.receptor    = receptor
        get_t.kind        = "TRY_GET_FIRST"
        get_t
      }

      match_instr = create_match.call("dummy")
      get_t       = create_get.call(resolve_link.featureName.if_nil { resolve_link.linkName } , match_instr)
         
      var2var_t = rt!var2var.new
      var2var_t.s = resolve_link
      var2var_t.t = get_t
      emit var2var_t to varsQ        
     
	  instr_trace = rt!instr.new
	  instr_trace.s = resolve_link
	  instr_trace.list = instrQ[ #kindOf(rt!instr), #p(s, resolve_link.expr) ].list
	  instr_trace.list = match_instr
	  instr_trace.list = get_t
      emit instr_trace to instrQ
      
  end
end

// End-of COMMON-EXPRESSIONS
