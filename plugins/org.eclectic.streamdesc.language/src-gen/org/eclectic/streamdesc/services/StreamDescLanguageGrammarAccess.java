/*
* generated by Xtext
*/

package org.eclectic.streamdesc.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class StreamDescLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StreamDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StreamDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStreamKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStreamNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStreamNameEStringParserRuleCall_1_0 = (RuleCall)cStreamNameAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMetamodelNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMetamodelNameEStringParserRuleCall_3_0 = (RuleCall)cMetamodelNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cKeysAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cKeysKeySpecParserRuleCall_4_0_0 = (RuleCall)cKeysAssignment_4_0.eContents().get(0);
		private final Assignment cKeysAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cKeysKeySpecParserRuleCall_4_1_0 = (RuleCall)cKeysAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cWindowsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cWindowsSlidingWindowParserRuleCall_5_0_0 = (RuleCall)cWindowsAssignment_5_0.eContents().get(0);
		private final Assignment cWindowsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cWindowsSlidingWindowParserRuleCall_5_1_0 = (RuleCall)cWindowsAssignment_5_1.eContents().get(0);
		
		//StreamDescription:
		//	"stream" streamName=EString "for" metamodelName=EString (keys+=KeySpec keys+=KeySpec*)? (windows+=SlidingWindow
		//	windows+=SlidingWindow*)?;
		public ParserRule getRule() { return rule; }

		//"stream" streamName=EString "for" metamodelName=EString (keys+=KeySpec keys+=KeySpec*)? (windows+=SlidingWindow
		//windows+=SlidingWindow*)?
		public Group getGroup() { return cGroup; }

		//"stream"
		public Keyword getStreamKeyword_0() { return cStreamKeyword_0; }

		//streamName=EString
		public Assignment getStreamNameAssignment_1() { return cStreamNameAssignment_1; }

		//EString
		public RuleCall getStreamNameEStringParserRuleCall_1_0() { return cStreamNameEStringParserRuleCall_1_0; }

		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//metamodelName=EString
		public Assignment getMetamodelNameAssignment_3() { return cMetamodelNameAssignment_3; }

		//EString
		public RuleCall getMetamodelNameEStringParserRuleCall_3_0() { return cMetamodelNameEStringParserRuleCall_3_0; }

		//(keys+=KeySpec keys+=KeySpec*)?
		public Group getGroup_4() { return cGroup_4; }

		//keys+=KeySpec
		public Assignment getKeysAssignment_4_0() { return cKeysAssignment_4_0; }

		//KeySpec
		public RuleCall getKeysKeySpecParserRuleCall_4_0_0() { return cKeysKeySpecParserRuleCall_4_0_0; }

		//keys+=KeySpec*
		public Assignment getKeysAssignment_4_1() { return cKeysAssignment_4_1; }

		//KeySpec
		public RuleCall getKeysKeySpecParserRuleCall_4_1_0() { return cKeysKeySpecParserRuleCall_4_1_0; }

		//(windows+=SlidingWindow windows+=SlidingWindow*)?
		public Group getGroup_5() { return cGroup_5; }

		//windows+=SlidingWindow
		public Assignment getWindowsAssignment_5_0() { return cWindowsAssignment_5_0; }

		//SlidingWindow
		public RuleCall getWindowsSlidingWindowParserRuleCall_5_0_0() { return cWindowsSlidingWindowParserRuleCall_5_0_0; }

		//windows+=SlidingWindow*
		public Assignment getWindowsAssignment_5_1() { return cWindowsAssignment_5_1; }

		//SlidingWindow
		public RuleCall getWindowsSlidingWindowParserRuleCall_5_1_0() { return cWindowsSlidingWindowParserRuleCall_5_1_0; }
	}

	public class SlidingWindowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SlidingWindow");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTimeSlidingWindowParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementSlidingWindowParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SlidingWindow:
		//	TimeSlidingWindow | ElementSlidingWindow;
		public ParserRule getRule() { return rule; }

		//TimeSlidingWindow | ElementSlidingWindow
		public Alternatives getAlternatives() { return cAlternatives; }

		//TimeSlidingWindow
		public RuleCall getTimeSlidingWindowParserRuleCall_0() { return cTimeSlidingWindowParserRuleCall_0; }

		//ElementSlidingWindow
		public RuleCall getElementSlidingWindowParserRuleCall_1() { return cElementSlidingWindowParserRuleCall_1; }
	}

	public class TimeSlidingWindowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeSlidingWindow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSlidingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassNameEStringParserRuleCall_2_0 = (RuleCall)cClassNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSecondsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSecondsEIntParserRuleCall_4_0 = (RuleCall)cSecondsAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cSecondsKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Keyword cSecsKeyword_5_1 = (Keyword)cAlternatives_5.eContents().get(1);
		
		//TimeSlidingWindow:
		//	"sliding" "for" className=EString "=" seconds=EInt ("seconds" | "secs");
		public ParserRule getRule() { return rule; }

		//"sliding" "for" className=EString "=" seconds=EInt ("seconds" | "secs")
		public Group getGroup() { return cGroup; }

		//"sliding"
		public Keyword getSlidingKeyword_0() { return cSlidingKeyword_0; }

		//"for"
		public Keyword getForKeyword_1() { return cForKeyword_1; }

		//className=EString
		public Assignment getClassNameAssignment_2() { return cClassNameAssignment_2; }

		//EString
		public RuleCall getClassNameEStringParserRuleCall_2_0() { return cClassNameEStringParserRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//seconds=EInt
		public Assignment getSecondsAssignment_4() { return cSecondsAssignment_4; }

		//EInt
		public RuleCall getSecondsEIntParserRuleCall_4_0() { return cSecondsEIntParserRuleCall_4_0; }

		//"seconds" | "secs"
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"seconds"
		public Keyword getSecondsKeyword_5_0() { return cSecondsKeyword_5_0; }

		//"secs"
		public Keyword getSecsKeyword_5_1() { return cSecsKeyword_5_1; }
	}

	public class ElementSlidingWindowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementSlidingWindow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSlidingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassNameEStringParserRuleCall_2_0 = (RuleCall)cClassNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsEIntParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cElementsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ElementSlidingWindow:
		//	"sliding" "for" className=EString "=" elements=EInt "elements";
		public ParserRule getRule() { return rule; }

		//"sliding" "for" className=EString "=" elements=EInt "elements"
		public Group getGroup() { return cGroup; }

		//"sliding"
		public Keyword getSlidingKeyword_0() { return cSlidingKeyword_0; }

		//"for"
		public Keyword getForKeyword_1() { return cForKeyword_1; }

		//className=EString
		public Assignment getClassNameAssignment_2() { return cClassNameAssignment_2; }

		//EString
		public RuleCall getClassNameEStringParserRuleCall_2_0() { return cClassNameEStringParserRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//elements=EInt
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }

		//EInt
		public RuleCall getElementsEIntParserRuleCall_4_0() { return cElementsEIntParserRuleCall_4_0; }

		//"elements"
		public Keyword getElementsKeyword_5() { return cElementsKeyword_5; }
	}

	public class KeySpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "KeySpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cKeyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cClassNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cClassNameEStringParserRuleCall_2_0 = (RuleCall)cClassNameAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFeatureNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFeatureNameEStringParserRuleCall_5_0 = (RuleCall)cFeatureNameAssignment_5.eContents().get(0);
		
		//KeySpec:
		//	"key" "(" className=EString ")" "=" featureName=EString;
		public ParserRule getRule() { return rule; }

		//"key" "(" className=EString ")" "=" featureName=EString
		public Group getGroup() { return cGroup; }

		//"key"
		public Keyword getKeyKeyword_0() { return cKeyKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//className=EString
		public Assignment getClassNameAssignment_2() { return cClassNameAssignment_2; }

		//EString
		public RuleCall getClassNameEStringParserRuleCall_2_0() { return cClassNameEStringParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//featureName=EString
		public Assignment getFeatureNameAssignment_5() { return cFeatureNameAssignment_5; }

		//EString
		public RuleCall getFeatureNameEStringParserRuleCall_5_0() { return cFeatureNameEStringParserRuleCall_5_0; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	INT;
		public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	
	
	private StreamDescriptionElements pStreamDescription;
	private SlidingWindowElements pSlidingWindow;
	private TimeSlidingWindowElements pTimeSlidingWindow;
	private ElementSlidingWindowElements pElementSlidingWindow;
	private KeySpecElements pKeySpec;
	private EStringElements pEString;
	private EIntElements pEInt;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public StreamDescLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//StreamDescription:
	//	"stream" streamName=EString "for" metamodelName=EString (keys+=KeySpec keys+=KeySpec*)? (windows+=SlidingWindow
	//	windows+=SlidingWindow*)?;
	public StreamDescriptionElements getStreamDescriptionAccess() {
		return (pStreamDescription != null) ? pStreamDescription : (pStreamDescription = new StreamDescriptionElements());
	}
	
	public ParserRule getStreamDescriptionRule() {
		return getStreamDescriptionAccess().getRule();
	}

	//SlidingWindow:
	//	TimeSlidingWindow | ElementSlidingWindow;
	public SlidingWindowElements getSlidingWindowAccess() {
		return (pSlidingWindow != null) ? pSlidingWindow : (pSlidingWindow = new SlidingWindowElements());
	}
	
	public ParserRule getSlidingWindowRule() {
		return getSlidingWindowAccess().getRule();
	}

	//TimeSlidingWindow:
	//	"sliding" "for" className=EString "=" seconds=EInt ("seconds" | "secs");
	public TimeSlidingWindowElements getTimeSlidingWindowAccess() {
		return (pTimeSlidingWindow != null) ? pTimeSlidingWindow : (pTimeSlidingWindow = new TimeSlidingWindowElements());
	}
	
	public ParserRule getTimeSlidingWindowRule() {
		return getTimeSlidingWindowAccess().getRule();
	}

	//ElementSlidingWindow:
	//	"sliding" "for" className=EString "=" elements=EInt "elements";
	public ElementSlidingWindowElements getElementSlidingWindowAccess() {
		return (pElementSlidingWindow != null) ? pElementSlidingWindow : (pElementSlidingWindow = new ElementSlidingWindowElements());
	}
	
	public ParserRule getElementSlidingWindowRule() {
		return getElementSlidingWindowAccess().getRule();
	}

	//KeySpec:
	//	"key" "(" className=EString ")" "=" featureName=EString;
	public KeySpecElements getKeySpecAccess() {
		return (pKeySpec != null) ? pKeySpec : (pKeySpec = new KeySpecElements());
	}
	
	public ParserRule getKeySpecRule() {
		return getKeySpecAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	INT;
	public EIntElements getEIntAccess() {
		return (pEInt != null) ? pEInt : (pEInt = new EIntElements());
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
