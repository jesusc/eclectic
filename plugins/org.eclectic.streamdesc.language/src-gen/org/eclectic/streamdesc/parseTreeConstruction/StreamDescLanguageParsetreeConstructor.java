/*
* generated by Xtext
*/
package org.eclectic.streamdesc.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.eclectic.streamdesc.services.StreamDescLanguageGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class StreamDescLanguageParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private StreamDescLanguageGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StreamDescription_Group(this, this, 0, inst);
			case 1: return new SlidingWindow_Alternatives(this, this, 1, inst);
			case 2: return new TimeSlidingWindow_Group(this, this, 2, inst);
			case 3: return new ElementSlidingWindow_Group(this, this, 3, inst);
			case 4: return new KeySpec_Group(this, this, 4, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule StreamDescription ****************
 *
 * StreamDescription:
 * 	"stream" streamName=EString "for" metamodelName=EString (keys+=KeySpec keys+=KeySpec*)? (windows+=SlidingWindow
 * 	windows+=SlidingWindow*)?;
 *
 **/

// "stream" streamName=EString "for" metamodelName=EString (keys+=KeySpec keys+=KeySpec*)? (windows+=SlidingWindow
// windows+=SlidingWindow*)?
protected class StreamDescription_Group extends GroupToken {
	
	public StreamDescription_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStreamDescriptionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StreamDescription_Group_5(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StreamDescription_Group_4(lastRuleCallOrigin, this, 1, inst);
			case 2: return new StreamDescription_MetamodelNameAssignment_3(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getStreamDescriptionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "stream"
protected class StreamDescription_StreamKeyword_0 extends KeywordToken  {
	
	public StreamDescription_StreamKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStreamDescriptionAccess().getStreamKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// streamName=EString
protected class StreamDescription_StreamNameAssignment_1 extends AssignmentToken  {
	
	public StreamDescription_StreamNameAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStreamDescriptionAccess().getStreamNameAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StreamDescription_StreamKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("streamName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("streamName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStreamDescriptionAccess().getStreamNameEStringParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getStreamDescriptionAccess().getStreamNameEStringParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}

// "for"
protected class StreamDescription_ForKeyword_2 extends KeywordToken  {
	
	public StreamDescription_ForKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStreamDescriptionAccess().getForKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StreamDescription_StreamNameAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// metamodelName=EString
protected class StreamDescription_MetamodelNameAssignment_3 extends AssignmentToken  {
	
	public StreamDescription_MetamodelNameAssignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStreamDescriptionAccess().getMetamodelNameAssignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StreamDescription_ForKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("metamodelName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("metamodelName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getStreamDescriptionAccess().getMetamodelNameEStringParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getStreamDescriptionAccess().getMetamodelNameEStringParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// (keys+=KeySpec keys+=KeySpec*)?
protected class StreamDescription_Group_4 extends GroupToken {
	
	public StreamDescription_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStreamDescriptionAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StreamDescription_KeysAssignment_4_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StreamDescription_KeysAssignment_4_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// keys+=KeySpec
protected class StreamDescription_KeysAssignment_4_0 extends AssignmentToken  {
	
	public StreamDescription_KeysAssignment_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStreamDescriptionAccess().getKeysAssignment_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new KeySpec_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("keys",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("keys");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getKeySpecRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStreamDescriptionAccess().getKeysKeySpecParserRuleCall_4_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StreamDescription_MetamodelNameAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// keys+=KeySpec*
protected class StreamDescription_KeysAssignment_4_1 extends AssignmentToken  {
	
	public StreamDescription_KeysAssignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStreamDescriptionAccess().getKeysAssignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new KeySpec_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("keys",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("keys");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getKeySpecRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStreamDescriptionAccess().getKeysKeySpecParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StreamDescription_KeysAssignment_4_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new StreamDescription_KeysAssignment_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// (windows+=SlidingWindow windows+=SlidingWindow*)?
protected class StreamDescription_Group_5 extends GroupToken {
	
	public StreamDescription_Group_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStreamDescriptionAccess().getGroup_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new StreamDescription_WindowsAssignment_5_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new StreamDescription_WindowsAssignment_5_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// windows+=SlidingWindow
protected class StreamDescription_WindowsAssignment_5_0 extends AssignmentToken  {
	
	public StreamDescription_WindowsAssignment_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStreamDescriptionAccess().getWindowsAssignment_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SlidingWindow_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("windows",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("windows");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSlidingWindowRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStreamDescriptionAccess().getWindowsSlidingWindowParserRuleCall_5_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StreamDescription_Group_4(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new StreamDescription_MetamodelNameAssignment_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// windows+=SlidingWindow*
protected class StreamDescription_WindowsAssignment_5_1 extends AssignmentToken  {
	
	public StreamDescription_WindowsAssignment_5_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getStreamDescriptionAccess().getWindowsAssignment_5_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SlidingWindow_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("windows",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("windows");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSlidingWindowRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getStreamDescriptionAccess().getWindowsSlidingWindowParserRuleCall_5_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new StreamDescription_WindowsAssignment_5_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new StreamDescription_WindowsAssignment_5_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule StreamDescription ****************/


/************ begin Rule SlidingWindow ****************
 *
 * SlidingWindow:
 * 	TimeSlidingWindow | ElementSlidingWindow;
 *
 **/

// TimeSlidingWindow | ElementSlidingWindow
protected class SlidingWindow_Alternatives extends AlternativesToken {

	public SlidingWindow_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSlidingWindowAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new SlidingWindow_TimeSlidingWindowParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new SlidingWindow_ElementSlidingWindowParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getElementSlidingWindowRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getTimeSlidingWindowRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// TimeSlidingWindow
protected class SlidingWindow_TimeSlidingWindowParserRuleCall_0 extends RuleCallToken {
	
	public SlidingWindow_TimeSlidingWindowParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSlidingWindowAccess().getTimeSlidingWindowParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimeSlidingWindow_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTimeSlidingWindowRule().getType().getClassifier())
			return null;
		if(checkForRecursion(TimeSlidingWindow_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// ElementSlidingWindow
protected class SlidingWindow_ElementSlidingWindowParserRuleCall_1 extends RuleCallToken {
	
	public SlidingWindow_ElementSlidingWindowParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSlidingWindowAccess().getElementSlidingWindowParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementSlidingWindow_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getElementSlidingWindowRule().getType().getClassifier())
			return null;
		if(checkForRecursion(ElementSlidingWindow_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule SlidingWindow ****************/


/************ begin Rule TimeSlidingWindow ****************
 *
 * TimeSlidingWindow:
 * 	"sliding" "for" className=EString "=" seconds=EInt ("seconds" | "secs");
 *
 **/

// "sliding" "for" className=EString "=" seconds=EInt ("seconds" | "secs")
protected class TimeSlidingWindow_Group extends GroupToken {
	
	public TimeSlidingWindow_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTimeSlidingWindowAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimeSlidingWindow_Alternatives_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTimeSlidingWindowRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "sliding"
protected class TimeSlidingWindow_SlidingKeyword_0 extends KeywordToken  {
	
	public TimeSlidingWindow_SlidingKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTimeSlidingWindowAccess().getSlidingKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "for"
protected class TimeSlidingWindow_ForKeyword_1 extends KeywordToken  {
	
	public TimeSlidingWindow_ForKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTimeSlidingWindowAccess().getForKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimeSlidingWindow_SlidingKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// className=EString
protected class TimeSlidingWindow_ClassNameAssignment_2 extends AssignmentToken  {
	
	public TimeSlidingWindow_ClassNameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTimeSlidingWindowAccess().getClassNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimeSlidingWindow_ForKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("className",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("className");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTimeSlidingWindowAccess().getClassNameEStringParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getTimeSlidingWindowAccess().getClassNameEStringParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class TimeSlidingWindow_EqualsSignKeyword_3 extends KeywordToken  {
	
	public TimeSlidingWindow_EqualsSignKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTimeSlidingWindowAccess().getEqualsSignKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimeSlidingWindow_ClassNameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// seconds=EInt
protected class TimeSlidingWindow_SecondsAssignment_4 extends AssignmentToken  {
	
	public TimeSlidingWindow_SecondsAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTimeSlidingWindowAccess().getSecondsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimeSlidingWindow_EqualsSignKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("seconds",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("seconds");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTimeSlidingWindowAccess().getSecondsEIntParserRuleCall_4_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getTimeSlidingWindowAccess().getSecondsEIntParserRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// "seconds" | "secs"
protected class TimeSlidingWindow_Alternatives_5 extends AlternativesToken {

	public TimeSlidingWindow_Alternatives_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTimeSlidingWindowAccess().getAlternatives_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimeSlidingWindow_SecondsKeyword_5_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "seconds"
protected class TimeSlidingWindow_SecondsKeyword_5_0 extends KeywordToken  {
	
	public TimeSlidingWindow_SecondsKeyword_5_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getTimeSlidingWindowAccess().getSecondsKeyword_5_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new TimeSlidingWindow_SecondsAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule TimeSlidingWindow ****************/


/************ begin Rule ElementSlidingWindow ****************
 *
 * ElementSlidingWindow:
 * 	"sliding" "for" className=EString "=" elements=EInt "elements";
 *
 **/

// "sliding" "for" className=EString "=" elements=EInt "elements"
protected class ElementSlidingWindow_Group extends GroupToken {
	
	public ElementSlidingWindow_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getElementSlidingWindowAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementSlidingWindow_ElementsKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getElementSlidingWindowRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "sliding"
protected class ElementSlidingWindow_SlidingKeyword_0 extends KeywordToken  {
	
	public ElementSlidingWindow_SlidingKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElementSlidingWindowAccess().getSlidingKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "for"
protected class ElementSlidingWindow_ForKeyword_1 extends KeywordToken  {
	
	public ElementSlidingWindow_ForKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElementSlidingWindowAccess().getForKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementSlidingWindow_SlidingKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// className=EString
protected class ElementSlidingWindow_ClassNameAssignment_2 extends AssignmentToken  {
	
	public ElementSlidingWindow_ClassNameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElementSlidingWindowAccess().getClassNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementSlidingWindow_ForKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("className",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("className");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getElementSlidingWindowAccess().getClassNameEStringParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getElementSlidingWindowAccess().getClassNameEStringParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "="
protected class ElementSlidingWindow_EqualsSignKeyword_3 extends KeywordToken  {
	
	public ElementSlidingWindow_EqualsSignKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElementSlidingWindowAccess().getEqualsSignKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementSlidingWindow_ClassNameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// elements=EInt
protected class ElementSlidingWindow_ElementsAssignment_4 extends AssignmentToken  {
	
	public ElementSlidingWindow_ElementsAssignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getElementSlidingWindowAccess().getElementsAssignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementSlidingWindow_EqualsSignKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("elements",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("elements");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getElementSlidingWindowAccess().getElementsEIntParserRuleCall_4_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getElementSlidingWindowAccess().getElementsEIntParserRuleCall_4_0();
			return obj;
		}
		return null;
	}

}

// "elements"
protected class ElementSlidingWindow_ElementsKeyword_5 extends KeywordToken  {
	
	public ElementSlidingWindow_ElementsKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getElementSlidingWindowAccess().getElementsKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ElementSlidingWindow_ElementsAssignment_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule ElementSlidingWindow ****************/


/************ begin Rule KeySpec ****************
 *
 * KeySpec:
 * 	"key" "(" className=EString ")" "=" featureName=EString;
 *
 **/

// "key" "(" className=EString ")" "=" featureName=EString
protected class KeySpec_Group extends GroupToken {
	
	public KeySpec_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getKeySpecAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new KeySpec_FeatureNameAssignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getKeySpecRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "key"
protected class KeySpec_KeyKeyword_0 extends KeywordToken  {
	
	public KeySpec_KeyKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getKeySpecAccess().getKeyKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "("
protected class KeySpec_LeftParenthesisKeyword_1 extends KeywordToken  {
	
	public KeySpec_LeftParenthesisKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getKeySpecAccess().getLeftParenthesisKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new KeySpec_KeyKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// className=EString
protected class KeySpec_ClassNameAssignment_2 extends AssignmentToken  {
	
	public KeySpec_ClassNameAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getKeySpecAccess().getClassNameAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new KeySpec_LeftParenthesisKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("className",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("className");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getKeySpecAccess().getClassNameEStringParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getKeySpecAccess().getClassNameEStringParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// ")"
protected class KeySpec_RightParenthesisKeyword_3 extends KeywordToken  {
	
	public KeySpec_RightParenthesisKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getKeySpecAccess().getRightParenthesisKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new KeySpec_ClassNameAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "="
protected class KeySpec_EqualsSignKeyword_4 extends KeywordToken  {
	
	public KeySpec_EqualsSignKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getKeySpecAccess().getEqualsSignKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new KeySpec_RightParenthesisKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// featureName=EString
protected class KeySpec_FeatureNameAssignment_5 extends AssignmentToken  {
	
	public KeySpec_FeatureNameAssignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getKeySpecAccess().getFeatureNameAssignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new KeySpec_EqualsSignKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("featureName",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("featureName");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getKeySpecAccess().getFeatureNameEStringParserRuleCall_5_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getKeySpecAccess().getFeatureNameEStringParserRuleCall_5_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule KeySpec ****************/



}
