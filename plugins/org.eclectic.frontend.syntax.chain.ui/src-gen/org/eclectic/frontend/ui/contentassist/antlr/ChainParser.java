/*
* generated by Xtext
*/
package org.eclectic.frontend.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclectic.frontend.services.ChainGrammarAccess;

public class ChainParser extends AbstractContentAssistParser {
	
	@Inject
	private ChainGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclectic.frontend.ui.contentassist.antlr.internal.InternalChainParser createParser() {
		org.eclectic.frontend.ui.contentassist.antlr.internal.InternalChainParser result = new org.eclectic.frontend.ui.contentassist.antlr.internal.InternalChainParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getMappingTransformationAccess().getGroup(), "rule__MappingTransformation__Group__0");
					put(grammarAccess.getMappingTransformationAccess().getGroup_4(), "rule__MappingTransformation__Group_4__0");
					put(grammarAccess.getMappingTransformationAccess().getGroup_9(), "rule__MappingTransformation__Group_9__0");
					put(grammarAccess.getTransformationDefinitionParameterAccess().getGroup(), "rule__TransformationDefinitionParameter__Group__0");
					put(grammarAccess.getCompositeTransformationAccess().getGroup(), "rule__CompositeTransformation__Group__0");
					put(grammarAccess.getCompositeTransformationAccess().getGroup_4(), "rule__CompositeTransformation__Group_4__0");
					put(grammarAccess.getCompositeTransformationAccess().getGroup_9(), "rule__CompositeTransformation__Group_9__0");
					put(grammarAccess.getTransformationExecutionAccess().getGroup(), "rule__TransformationExecution__Group__0");
					put(grammarAccess.getTransformationExecutionAccess().getGroup_1(), "rule__TransformationExecution__Group_1__0");
					put(grammarAccess.getTransformationExecutionAccess().getGroup_6(), "rule__TransformationExecution__Group_6__0");
					put(grammarAccess.getExternalTransformationAccess().getGroup(), "rule__ExternalTransformation__Group__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getMappingTransformationAccess().getNameAssignment_1(), "rule__MappingTransformation__NameAssignment_1");
					put(grammarAccess.getMappingTransformationAccess().getInModelsAssignment_3(), "rule__MappingTransformation__InModelsAssignment_3");
					put(grammarAccess.getMappingTransformationAccess().getInModelsAssignment_4_1(), "rule__MappingTransformation__InModelsAssignment_4_1");
					put(grammarAccess.getMappingTransformationAccess().getOutModelsAssignment_8(), "rule__MappingTransformation__OutModelsAssignment_8");
					put(grammarAccess.getMappingTransformationAccess().getOutModelsAssignment_9_1(), "rule__MappingTransformation__OutModelsAssignment_9_1");
					put(grammarAccess.getMappingTransformationAccess().getExternalsAssignment_11(), "rule__MappingTransformation__ExternalsAssignment_11");
					put(grammarAccess.getMappingTransformationAccess().getCompositesAssignment_12(), "rule__MappingTransformation__CompositesAssignment_12");
					put(grammarAccess.getMappingTransformationAccess().getExecutionsAssignment_13(), "rule__MappingTransformation__ExecutionsAssignment_13");
					put(grammarAccess.getTransformationDefinitionParameterAccess().getNameAssignment_1(), "rule__TransformationDefinitionParameter__NameAssignment_1");
					put(grammarAccess.getCompositeTransformationAccess().getNameAssignment_1(), "rule__CompositeTransformation__NameAssignment_1");
					put(grammarAccess.getCompositeTransformationAccess().getInModelsAssignment_3(), "rule__CompositeTransformation__InModelsAssignment_3");
					put(grammarAccess.getCompositeTransformationAccess().getInModelsAssignment_4_1(), "rule__CompositeTransformation__InModelsAssignment_4_1");
					put(grammarAccess.getCompositeTransformationAccess().getOutModelsAssignment_8(), "rule__CompositeTransformation__OutModelsAssignment_8");
					put(grammarAccess.getCompositeTransformationAccess().getOutModelsAssignment_9_1(), "rule__CompositeTransformation__OutModelsAssignment_9_1");
					put(grammarAccess.getCompositeTransformationAccess().getExecutionsAssignment_11(), "rule__CompositeTransformation__ExecutionsAssignment_11");
					put(grammarAccess.getTransformationExecutionAccess().getOutputModelsAssignment_0(), "rule__TransformationExecution__OutputModelsAssignment_0");
					put(grammarAccess.getTransformationExecutionAccess().getOutputModelsAssignment_1_1(), "rule__TransformationExecution__OutputModelsAssignment_1_1");
					put(grammarAccess.getTransformationExecutionAccess().getTransformationAssignment_3(), "rule__TransformationExecution__TransformationAssignment_3");
					put(grammarAccess.getTransformationExecutionAccess().getInputModelsAssignment_5(), "rule__TransformationExecution__InputModelsAssignment_5");
					put(grammarAccess.getTransformationExecutionAccess().getInputModelsAssignment_6_1(), "rule__TransformationExecution__InputModelsAssignment_6_1");
					put(grammarAccess.getExternalTransformationAccess().getNameAssignment_1(), "rule__ExternalTransformation__NameAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclectic.frontend.ui.contentassist.antlr.internal.InternalChainParser typedParser = (org.eclectic.frontend.ui.contentassist.antlr.internal.InternalChainParser) parser;
			typedParser.entryRuleMappingTransformation();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ChainGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ChainGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
