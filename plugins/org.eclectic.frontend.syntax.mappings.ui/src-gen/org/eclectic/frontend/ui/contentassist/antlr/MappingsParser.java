/*
* generated by Xtext
*/
package org.eclectic.frontend.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.eclectic.frontend.services.MappingsGrammarAccess;

public class MappingsParser extends AbstractContentAssistParser {
	
	@Inject
	private MappingsGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.eclectic.frontend.ui.contentassist.antlr.internal.InternalMappingsParser createParser() {
		org.eclectic.frontend.ui.contentassist.antlr.internal.InternalMappingsParser result = new org.eclectic.frontend.ui.contentassist.antlr.internal.InternalMappingsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getContextAccess().getMappingsAlternatives_8_0(), "rule__Context__MappingsAlternatives_8_0");
					put(grammarAccess.getPotencyAnnotationAccess().getAlternatives_0(), "rule__PotencyAnnotation__Alternatives_0");
					put(grammarAccess.getAttributeRightPartAccess().getAlternatives(), "rule__AttributeRightPart__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getMappingTransformationAccess().getGroup(), "rule__MappingTransformation__Group__0");
					put(grammarAccess.getMetamodelModelAnnotationAccess().getGroup(), "rule__MetamodelModelAnnotation__Group__0");
					put(grammarAccess.getUseDeclarationAccess().getGroup(), "rule__UseDeclaration__Group__0");
					put(grammarAccess.getUseDeclarationAccess().getGroup_2(), "rule__UseDeclaration__Group_2__0");
					put(grammarAccess.getTransformationDefinitionParameterAccess().getGroup(), "rule__TransformationDefinitionParameter__Group__0");
					put(grammarAccess.getDelegateAccess().getGroup(), "rule__Delegate__Group__0");
					put(grammarAccess.getDelegateAccess().getGroup_4(), "rule__Delegate__Group_4__0");
					put(grammarAccess.getDelegateAccess().getGroup_6(), "rule__Delegate__Group_6__0");
					put(grammarAccess.getDelegateAccess().getGroup_8(), "rule__Delegate__Group_8__0");
					put(grammarAccess.getContextAccess().getGroup(), "rule__Context__Group__0");
					put(grammarAccess.getContextAccess().getGroup_3(), "rule__Context__Group_3__0");
					put(grammarAccess.getContextAccess().getGroup_6(), "rule__Context__Group_6__0");
					put(grammarAccess.getTagAccess().getGroup(), "rule__Tag__Group__0");
					put(grammarAccess.getMatchedElementAccess().getGroup(), "rule__MatchedElement__Group__0");
					put(grammarAccess.getMatchedElementAccess().getGroup_0(), "rule__MatchedElement__Group_0__0");
					put(grammarAccess.getPotencyAnnotationAccess().getGroup(), "rule__PotencyAnnotation__Group__0");
					put(grammarAccess.getLinkedByAccess().getGroup(), "rule__LinkedBy__Group__0");
					put(grammarAccess.getAttributeMappingAccess().getGroup(), "rule__AttributeMapping__Group__0");
					put(grammarAccess.getAttributeMappingAccess().getGroup_1(), "rule__AttributeMapping__Group_1__0");
					put(grammarAccess.getAttribute2AttributeAccess().getGroup(), "rule__Attribute2Attribute__Group__0");
					put(grammarAccess.getAttribute2AttributeAccess().getGroup_1(), "rule__Attribute2Attribute__Group_1__0");
					put(grammarAccess.getAttributeRefAccess().getGroup(), "rule__AttributeRef__Group__0");
					put(grammarAccess.getAttributeRefAccess().getGroup_0(), "rule__AttributeRef__Group_0__0");
					put(grammarAccess.getReference2ReferenceAccess().getGroup(), "rule__Reference2Reference__Group__0");
					put(grammarAccess.getReference2ReferenceAccess().getGroup_1(), "rule__Reference2Reference__Group_1__0");
					put(grammarAccess.getReference2ReferenceAccess().getGroup_4(), "rule__Reference2Reference__Group_4__0");
					put(grammarAccess.getReferenceRefAccess().getGroup(), "rule__ReferenceRef__Group__0");
					put(grammarAccess.getReferenceRefAccess().getGroup_0(), "rule__ReferenceRef__Group_0__0");
					put(grammarAccess.getConverterAccess().getGroup(), "rule__Converter__Group__0");
					put(grammarAccess.getConverterAccess().getGroup_1(), "rule__Converter__Group_1__0");
					put(grammarAccess.getEDoubleAccess().getGroup(), "rule__EDouble__Group__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getMappingTransformationAccess().getNameAssignment_1(), "rule__MappingTransformation__NameAssignment_1");
					put(grammarAccess.getMappingTransformationAccess().getInModelsAssignment_3(), "rule__MappingTransformation__InModelsAssignment_3");
					put(grammarAccess.getMappingTransformationAccess().getOutModelsAssignment_7(), "rule__MappingTransformation__OutModelsAssignment_7");
					put(grammarAccess.getMappingTransformationAccess().getAnnotationsAssignment_9(), "rule__MappingTransformation__AnnotationsAssignment_9");
					put(grammarAccess.getMappingTransformationAccess().getUsesAssignment_10(), "rule__MappingTransformation__UsesAssignment_10");
					put(grammarAccess.getMappingTransformationAccess().getDelegatesAssignment_11(), "rule__MappingTransformation__DelegatesAssignment_11");
					put(grammarAccess.getMappingTransformationAccess().getContextsAssignment_12(), "rule__MappingTransformation__ContextsAssignment_12");
					put(grammarAccess.getMetamodelModelAnnotationAccess().getAnnotatedElementAssignment_0(), "rule__MetamodelModelAnnotation__AnnotatedElementAssignment_0");
					put(grammarAccess.getMetamodelModelAnnotationAccess().getMetamodelAssignment_2(), "rule__MetamodelModelAnnotation__MetamodelAssignment_2");
					put(grammarAccess.getUseDeclarationAccess().getModuleAssignment_1(), "rule__UseDeclaration__ModuleAssignment_1");
					put(grammarAccess.getUseDeclarationAccess().getAsAssignment_2_1(), "rule__UseDeclaration__AsAssignment_2_1");
					put(grammarAccess.getTransformationDefinitionParameterAccess().getNameAssignment_1(), "rule__TransformationDefinitionParameter__NameAssignment_1");
					put(grammarAccess.getDelegateAccess().getTagsAssignment_0(), "rule__Delegate__TagsAssignment_0");
					put(grammarAccess.getDelegateAccess().getLeftAssignment_3(), "rule__Delegate__LeftAssignment_3");
					put(grammarAccess.getDelegateAccess().getLeftAssignment_4_1(), "rule__Delegate__LeftAssignment_4_1");
					put(grammarAccess.getDelegateAccess().getModuleAssignment_6_0(), "rule__Delegate__ModuleAssignment_6_0");
					put(grammarAccess.getDelegateAccess().getIsExternalAssignment_6_1(), "rule__Delegate__IsExternalAssignment_6_1");
					put(grammarAccess.getDelegateAccess().getLinkNameAssignment_7(), "rule__Delegate__LinkNameAssignment_7");
					put(grammarAccess.getDelegateAccess().getFeatureNameAssignment_8_1(), "rule__Delegate__FeatureNameAssignment_8_1");
					put(grammarAccess.getContextAccess().getTagsAssignment_0(), "rule__Context__TagsAssignment_0");
					put(grammarAccess.getContextAccess().getLeftAssignment_2(), "rule__Context__LeftAssignment_2");
					put(grammarAccess.getContextAccess().getLeftAssignment_3_1(), "rule__Context__LeftAssignment_3_1");
					put(grammarAccess.getContextAccess().getRightAssignment_5(), "rule__Context__RightAssignment_5");
					put(grammarAccess.getContextAccess().getRightAssignment_6_1(), "rule__Context__RightAssignment_6_1");
					put(grammarAccess.getContextAccess().getModifiersAssignment_7(), "rule__Context__ModifiersAssignment_7");
					put(grammarAccess.getContextAccess().getMappingsAssignment_8(), "rule__Context__MappingsAssignment_8");
					put(grammarAccess.getTagAccess().getNameAssignment_1(), "rule__Tag__NameAssignment_1");
					put(grammarAccess.getMatchedElementAccess().getNameAssignment_0_0(), "rule__MatchedElement__NameAssignment_0_0");
					put(grammarAccess.getMatchedElementAccess().getModelAssignment_1(), "rule__MatchedElement__ModelAssignment_1");
					put(grammarAccess.getMatchedElementAccess().getClassNameAssignment_3(), "rule__MatchedElement__ClassNameAssignment_3");
					put(grammarAccess.getMatchedElementAccess().getAnnotationsAssignment_4(), "rule__MatchedElement__AnnotationsAssignment_4");
					put(grammarAccess.getMatchedElementAccess().getStrictTypeAssignment_5(), "rule__MatchedElement__StrictTypeAssignment_5");
					put(grammarAccess.getPotencyAnnotationAccess().getValueAssignment_1(), "rule__PotencyAnnotation__ValueAssignment_1");
					put(grammarAccess.getLinkedByAccess().getAttributeAssignment_1(), "rule__LinkedBy__AttributeAssignment_1");
					put(grammarAccess.getLinkedByAccess().getLinkedElementAssignment_3(), "rule__LinkedBy__LinkedElementAssignment_3");
					put(grammarAccess.getAttributeMappingAccess().getLeftAssignment_0(), "rule__AttributeMapping__LeftAssignment_0");
					put(grammarAccess.getAttributeMappingAccess().getLeftAssignment_1_1(), "rule__AttributeMapping__LeftAssignment_1_1");
					put(grammarAccess.getAttributeMappingAccess().getRightPartAssignment_3(), "rule__AttributeMapping__RightPartAssignment_3");
					put(grammarAccess.getAttribute2AttributeAccess().getRightAssignment_0(), "rule__Attribute2Attribute__RightAssignment_0");
					put(grammarAccess.getAttribute2AttributeAccess().getRightAssignment_1_1(), "rule__Attribute2Attribute__RightAssignment_1_1");
					put(grammarAccess.getAttribute2AttributeAccess().getConverterAssignment_2(), "rule__Attribute2Attribute__ConverterAssignment_2");
					put(grammarAccess.getAttributeIsStringAccess().getStrValueAssignment(), "rule__AttributeIsString__StrValueAssignment");
					put(grammarAccess.getAttributeIsBooleanAccess().getBoolValueAssignment(), "rule__AttributeIsBoolean__BoolValueAssignment");
					put(grammarAccess.getAttributeIsDoubleAccess().getDoubleValueAssignment(), "rule__AttributeIsDouble__DoubleValueAssignment");
					put(grammarAccess.getAttributeIsIntegerAccess().getIntValueAssignment(), "rule__AttributeIsInteger__IntValueAssignment");
					put(grammarAccess.getAttributeRefAccess().getReferredElementAssignment_0_0(), "rule__AttributeRef__ReferredElementAssignment_0_0");
					put(grammarAccess.getAttributeRefAccess().getFeatureNameAssignment_1(), "rule__AttributeRef__FeatureNameAssignment_1");
					put(grammarAccess.getAttributeRefAccess().getMultivaluedAssignment_2(), "rule__AttributeRef__MultivaluedAssignment_2");
					put(grammarAccess.getReference2ReferenceAccess().getLeftAssignment_0(), "rule__Reference2Reference__LeftAssignment_0");
					put(grammarAccess.getReference2ReferenceAccess().getLeftAssignment_1_1(), "rule__Reference2Reference__LeftAssignment_1_1");
					put(grammarAccess.getReference2ReferenceAccess().getRightAssignment_3(), "rule__Reference2Reference__RightAssignment_3");
					put(grammarAccess.getReference2ReferenceAccess().getRightAssignment_4_1(), "rule__Reference2Reference__RightAssignment_4_1");
					put(grammarAccess.getReference2ReferenceAccess().getConverterAssignment_5(), "rule__Reference2Reference__ConverterAssignment_5");
					put(grammarAccess.getReferenceRefAccess().getReferredElementAssignment_0_0(), "rule__ReferenceRef__ReferredElementAssignment_0_0");
					put(grammarAccess.getReferenceRefAccess().getFeatureNameAssignment_1(), "rule__ReferenceRef__FeatureNameAssignment_1");
					put(grammarAccess.getReferenceRefAccess().getMultivaluedAssignment_2(), "rule__ReferenceRef__MultivaluedAssignment_2");
					put(grammarAccess.getConverterAccess().getModuleAssignment_1_0(), "rule__Converter__ModuleAssignment_1_0");
					put(grammarAccess.getConverterAccess().getIsExternalAssignment_1_1(), "rule__Converter__IsExternalAssignment_1_1");
					put(grammarAccess.getConverterAccess().getConverterNameAssignment_2(), "rule__Converter__ConverterNameAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.eclectic.frontend.ui.contentassist.antlr.internal.InternalMappingsParser typedParser = (org.eclectic.frontend.ui.contentassist.antlr.internal.InternalMappingsParser) parser;
			typedParser.entryRuleMappingTransformation();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MappingsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MappingsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
